/*
* generated by Xtext
*/
grammar InternalHaxe;

options {
	superClass=AbstractInternalContentAssistParser;
	backtrack=true;
	
}

@lexer::header {
package ee.xtext.haxe.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package ee.xtext.haxe.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.xtext.parsetree.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import ee.xtext.haxe.services.HaxeGrammarAccess;

}

@parser::members {
 
 	private HaxeGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(HaxeGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleFile
entryRuleFile 
:
{ before(grammarAccess.getFileRule()); }
	 ruleFile
{ after(grammarAccess.getFileRule()); } 
	 EOF 
;

// Rule File
ruleFile
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFileAccess().getBlockExpressionAssignment()); }
(rule__File__BlockExpressionAssignment)*
{ after(grammarAccess.getFileAccess().getBlockExpressionAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTypeReference
entryRuleTypeReference 
:
{ before(grammarAccess.getTypeReferenceRule()); }
	 ruleTypeReference
{ after(grammarAccess.getTypeReferenceRule()); } 
	 EOF 
;

// Rule TypeReference
ruleTypeReference
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTypeReferenceAccess().getGroup()); }
(rule__TypeReference__Group__0)
{ after(grammarAccess.getTypeReferenceAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleExpression
entryRuleExpression 
:
{ before(grammarAccess.getExpressionRule()); }
	 ruleExpression
{ after(grammarAccess.getExpressionRule()); } 
	 EOF 
;

// Rule Expression
ruleExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getExpressionAccess().getAssignmentParserRuleCall()); }
	ruleAssignment
{ after(grammarAccess.getExpressionAccess().getAssignmentParserRuleCall()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAssignment
entryRuleAssignment 
:
{ before(grammarAccess.getAssignmentRule()); }
	 ruleAssignment
{ after(grammarAccess.getAssignmentRule()); } 
	 EOF 
;

// Rule Assignment
ruleAssignment
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAssignmentAccess().getAlternatives()); }
(rule__Assignment__Alternatives)
{ after(grammarAccess.getAssignmentAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleOpSingleAssign
entryRuleOpSingleAssign 
:
{ before(grammarAccess.getOpSingleAssignRule()); }
	 ruleOpSingleAssign
{ after(grammarAccess.getOpSingleAssignRule()); } 
	 EOF 
;

// Rule OpSingleAssign
ruleOpSingleAssign
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getOpSingleAssignAccess().getEqualsSignKeyword()); }

	'=' 

{ after(grammarAccess.getOpSingleAssignAccess().getEqualsSignKeyword()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleOpMultiAssign
entryRuleOpMultiAssign 
:
{ before(grammarAccess.getOpMultiAssignRule()); }
	 ruleOpMultiAssign
{ after(grammarAccess.getOpMultiAssignRule()); } 
	 EOF 
;

// Rule OpMultiAssign
ruleOpMultiAssign
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getOpMultiAssignAccess().getAlternatives()); }
(rule__OpMultiAssign__Alternatives)
{ after(grammarAccess.getOpMultiAssignAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleOrExpression
entryRuleOrExpression 
:
{ before(grammarAccess.getOrExpressionRule()); }
	 ruleOrExpression
{ after(grammarAccess.getOrExpressionRule()); } 
	 EOF 
;

// Rule OrExpression
ruleOrExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getOrExpressionAccess().getGroup()); }
(rule__OrExpression__Group__0)
{ after(grammarAccess.getOrExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleOpOr
entryRuleOpOr 
:
{ before(grammarAccess.getOpOrRule()); }
	 ruleOpOr
{ after(grammarAccess.getOpOrRule()); } 
	 EOF 
;

// Rule OpOr
ruleOpOr
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getOpOrAccess().getVerticalLineVerticalLineKeyword()); }

	'||' 

{ after(grammarAccess.getOpOrAccess().getVerticalLineVerticalLineKeyword()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAndExpression
entryRuleAndExpression 
:
{ before(grammarAccess.getAndExpressionRule()); }
	 ruleAndExpression
{ after(grammarAccess.getAndExpressionRule()); } 
	 EOF 
;

// Rule AndExpression
ruleAndExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAndExpressionAccess().getGroup()); }
(rule__AndExpression__Group__0)
{ after(grammarAccess.getAndExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleOpAnd
entryRuleOpAnd 
:
{ before(grammarAccess.getOpAndRule()); }
	 ruleOpAnd
{ after(grammarAccess.getOpAndRule()); } 
	 EOF 
;

// Rule OpAnd
ruleOpAnd
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getOpAndAccess().getAmpersandAmpersandKeyword()); }

	'&&' 

{ after(grammarAccess.getOpAndAccess().getAmpersandAmpersandKeyword()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleOtherOperatorExpression
entryRuleOtherOperatorExpression 
:
{ before(grammarAccess.getOtherOperatorExpressionRule()); }
	 ruleOtherOperatorExpression
{ after(grammarAccess.getOtherOperatorExpressionRule()); } 
	 EOF 
;

// Rule OtherOperatorExpression
ruleOtherOperatorExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getOtherOperatorExpressionAccess().getGroup()); }
(rule__OtherOperatorExpression__Group__0)
{ after(grammarAccess.getOtherOperatorExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleOpOther
entryRuleOpOther 
:
{ before(grammarAccess.getOpOtherRule()); }
	 ruleOpOther
{ after(grammarAccess.getOpOtherRule()); } 
	 EOF 
;

// Rule OpOther
ruleOpOther
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getOpOtherAccess().getFullStopFullStopFullStopKeyword()); }

	'...' 

{ after(grammarAccess.getOpOtherAccess().getFullStopFullStopFullStopKeyword()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleCompareExpression
entryRuleCompareExpression 
:
{ before(grammarAccess.getCompareExpressionRule()); }
	 ruleCompareExpression
{ after(grammarAccess.getCompareExpressionRule()); } 
	 EOF 
;

// Rule CompareExpression
ruleCompareExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getCompareExpressionAccess().getGroup()); }
(rule__CompareExpression__Group__0)
{ after(grammarAccess.getCompareExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleOpCompare
entryRuleOpCompare 
:
{ before(grammarAccess.getOpCompareRule()); }
	 ruleOpCompare
{ after(grammarAccess.getOpCompareRule()); } 
	 EOF 
;

// Rule OpCompare
ruleOpCompare
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getOpCompareAccess().getAlternatives()); }
(rule__OpCompare__Alternatives)
{ after(grammarAccess.getOpCompareAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBitwiseExpression
entryRuleBitwiseExpression 
:
{ before(grammarAccess.getBitwiseExpressionRule()); }
	 ruleBitwiseExpression
{ after(grammarAccess.getBitwiseExpressionRule()); } 
	 EOF 
;

// Rule BitwiseExpression
ruleBitwiseExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBitwiseExpressionAccess().getGroup()); }
(rule__BitwiseExpression__Group__0)
{ after(grammarAccess.getBitwiseExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleOpBitwise
entryRuleOpBitwise 
:
{ before(grammarAccess.getOpBitwiseRule()); }
	 ruleOpBitwise
{ after(grammarAccess.getOpBitwiseRule()); } 
	 EOF 
;

// Rule OpBitwise
ruleOpBitwise
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getOpBitwiseAccess().getAlternatives()); }
(rule__OpBitwise__Alternatives)
{ after(grammarAccess.getOpBitwiseAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBitshiftExpression
entryRuleBitshiftExpression 
:
{ before(grammarAccess.getBitshiftExpressionRule()); }
	 ruleBitshiftExpression
{ after(grammarAccess.getBitshiftExpressionRule()); } 
	 EOF 
;

// Rule BitshiftExpression
ruleBitshiftExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBitshiftExpressionAccess().getGroup()); }
(rule__BitshiftExpression__Group__0)
{ after(grammarAccess.getBitshiftExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleOpBitshift
entryRuleOpBitshift 
:
{ before(grammarAccess.getOpBitshiftRule()); }
	 ruleOpBitshift
{ after(grammarAccess.getOpBitshiftRule()); } 
	 EOF 
;

// Rule OpBitshift
ruleOpBitshift
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getOpBitshiftAccess().getAlternatives()); }
(rule__OpBitshift__Alternatives)
{ after(grammarAccess.getOpBitshiftAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAddExpression
entryRuleAddExpression 
:
{ before(grammarAccess.getAddExpressionRule()); }
	 ruleAddExpression
{ after(grammarAccess.getAddExpressionRule()); } 
	 EOF 
;

// Rule AddExpression
ruleAddExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAddExpressionAccess().getGroup()); }
(rule__AddExpression__Group__0)
{ after(grammarAccess.getAddExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleOpAdd
entryRuleOpAdd 
:
{ before(grammarAccess.getOpAddRule()); }
	 ruleOpAdd
{ after(grammarAccess.getOpAddRule()); } 
	 EOF 
;

// Rule OpAdd
ruleOpAdd
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getOpAddAccess().getPlusSignKeyword()); }

	'+' 

{ after(grammarAccess.getOpAddAccess().getPlusSignKeyword()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSubtractExpression
entryRuleSubtractExpression 
:
{ before(grammarAccess.getSubtractExpressionRule()); }
	 ruleSubtractExpression
{ after(grammarAccess.getSubtractExpressionRule()); } 
	 EOF 
;

// Rule SubtractExpression
ruleSubtractExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSubtractExpressionAccess().getGroup()); }
(rule__SubtractExpression__Group__0)
{ after(grammarAccess.getSubtractExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleOpSubtract
entryRuleOpSubtract 
:
{ before(grammarAccess.getOpSubtractRule()); }
	 ruleOpSubtract
{ after(grammarAccess.getOpSubtractRule()); } 
	 EOF 
;

// Rule OpSubtract
ruleOpSubtract
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getOpSubtractAccess().getHyphenMinusKeyword()); }

	'-' 

{ after(grammarAccess.getOpSubtractAccess().getHyphenMinusKeyword()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleMultiplyExpression
entryRuleMultiplyExpression 
:
{ before(grammarAccess.getMultiplyExpressionRule()); }
	 ruleMultiplyExpression
{ after(grammarAccess.getMultiplyExpressionRule()); } 
	 EOF 
;

// Rule MultiplyExpression
ruleMultiplyExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getMultiplyExpressionAccess().getGroup()); }
(rule__MultiplyExpression__Group__0)
{ after(grammarAccess.getMultiplyExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleOpMultiply
entryRuleOpMultiply 
:
{ before(grammarAccess.getOpMultiplyRule()); }
	 ruleOpMultiply
{ after(grammarAccess.getOpMultiplyRule()); } 
	 EOF 
;

// Rule OpMultiply
ruleOpMultiply
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getOpMultiplyAccess().getAsteriskKeyword()); }

	'*' 

{ after(grammarAccess.getOpMultiplyAccess().getAsteriskKeyword()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDivideExpression
entryRuleDivideExpression 
:
{ before(grammarAccess.getDivideExpressionRule()); }
	 ruleDivideExpression
{ after(grammarAccess.getDivideExpressionRule()); } 
	 EOF 
;

// Rule DivideExpression
ruleDivideExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDivideExpressionAccess().getGroup()); }
(rule__DivideExpression__Group__0)
{ after(grammarAccess.getDivideExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleOpDivide
entryRuleOpDivide 
:
{ before(grammarAccess.getOpDivideRule()); }
	 ruleOpDivide
{ after(grammarAccess.getOpDivideRule()); } 
	 EOF 
;

// Rule OpDivide
ruleOpDivide
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getOpDivideAccess().getSolidusKeyword()); }

	'/' 

{ after(grammarAccess.getOpDivideAccess().getSolidusKeyword()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleModuloExpression
entryRuleModuloExpression 
:
{ before(grammarAccess.getModuloExpressionRule()); }
	 ruleModuloExpression
{ after(grammarAccess.getModuloExpressionRule()); } 
	 EOF 
;

// Rule ModuloExpression
ruleModuloExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getModuloExpressionAccess().getGroup()); }
(rule__ModuloExpression__Group__0)
{ after(grammarAccess.getModuloExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleOpModulo
entryRuleOpModulo 
:
{ before(grammarAccess.getOpModuloRule()); }
	 ruleOpModulo
{ after(grammarAccess.getOpModuloRule()); } 
	 EOF 
;

// Rule OpModulo
ruleOpModulo
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getOpModuloAccess().getPercentSignKeyword()); }

	'%' 

{ after(grammarAccess.getOpModuloAccess().getPercentSignKeyword()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleUnaryOperation
entryRuleUnaryOperation 
:
{ before(grammarAccess.getUnaryOperationRule()); }
	 ruleUnaryOperation
{ after(grammarAccess.getUnaryOperationRule()); } 
	 EOF 
;

// Rule UnaryOperation
ruleUnaryOperation
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getUnaryOperationAccess().getAlternatives()); }
(rule__UnaryOperation__Alternatives)
{ after(grammarAccess.getUnaryOperationAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleOpUnary
entryRuleOpUnary 
:
{ before(grammarAccess.getOpUnaryRule()); }
	 ruleOpUnary
{ after(grammarAccess.getOpUnaryRule()); } 
	 EOF 
;

// Rule OpUnary
ruleOpUnary
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getOpUnaryAccess().getAlternatives()); }
(rule__OpUnary__Alternatives)
{ after(grammarAccess.getOpUnaryAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePreIncrementOperation
entryRulePreIncrementOperation 
:
{ before(grammarAccess.getPreIncrementOperationRule()); }
	 rulePreIncrementOperation
{ after(grammarAccess.getPreIncrementOperationRule()); } 
	 EOF 
;

// Rule PreIncrementOperation
rulePreIncrementOperation
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPreIncrementOperationAccess().getAlternatives()); }
(rule__PreIncrementOperation__Alternatives)
{ after(grammarAccess.getPreIncrementOperationAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePostIncrementOperation
entryRulePostIncrementOperation 
:
{ before(grammarAccess.getPostIncrementOperationRule()); }
	 rulePostIncrementOperation
{ after(grammarAccess.getPostIncrementOperationRule()); } 
	 EOF 
;

// Rule PostIncrementOperation
rulePostIncrementOperation
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPostIncrementOperationAccess().getAlternatives()); }
(rule__PostIncrementOperation__Alternatives)
{ after(grammarAccess.getPostIncrementOperationAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleOpIncrement
entryRuleOpIncrement 
:
{ before(grammarAccess.getOpIncrementRule()); }
	 ruleOpIncrement
{ after(grammarAccess.getOpIncrementRule()); } 
	 EOF 
;

// Rule OpIncrement
ruleOpIncrement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getOpIncrementAccess().getAlternatives()); }
(rule__OpIncrement__Alternatives)
{ after(grammarAccess.getOpIncrementAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleMemberFeatureCall
entryRuleMemberFeatureCall 
:
{ before(grammarAccess.getMemberFeatureCallRule()); }
	 ruleMemberFeatureCall
{ after(grammarAccess.getMemberFeatureCallRule()); } 
	 EOF 
;

// Rule MemberFeatureCall
ruleMemberFeatureCall
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getMemberFeatureCallAccess().getGroup()); }
(rule__MemberFeatureCall__Group__0)
{ after(grammarAccess.getMemberFeatureCallAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePrimaryExpression
entryRulePrimaryExpression 
:
{ before(grammarAccess.getPrimaryExpressionRule()); }
	 rulePrimaryExpression
{ after(grammarAccess.getPrimaryExpressionRule()); } 
	 EOF 
;

// Rule PrimaryExpression
rulePrimaryExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPrimaryExpressionAccess().getAlternatives()); }
(rule__PrimaryExpression__Alternatives)
{ after(grammarAccess.getPrimaryExpressionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLiteral
entryRuleLiteral 
:
{ before(grammarAccess.getLiteralRule()); }
	 ruleLiteral
{ after(grammarAccess.getLiteralRule()); } 
	 EOF 
;

// Rule Literal
ruleLiteral
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLiteralAccess().getAlternatives()); }
(rule__Literal__Alternatives)
{ after(grammarAccess.getLiteralAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBlockExpression
entryRuleBlockExpression 
:
{ before(grammarAccess.getBlockExpressionRule()); }
	 ruleBlockExpression
{ after(grammarAccess.getBlockExpressionRule()); } 
	 EOF 
;

// Rule BlockExpression
ruleBlockExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBlockExpressionAccess().getGroup()); }
(rule__BlockExpression__Group__0)
{ after(grammarAccess.getBlockExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleExpressionInsideBlock
entryRuleExpressionInsideBlock 
:
{ before(grammarAccess.getExpressionInsideBlockRule()); }
	 ruleExpressionInsideBlock
{ after(grammarAccess.getExpressionInsideBlockRule()); } 
	 EOF 
;

// Rule ExpressionInsideBlock
ruleExpressionInsideBlock
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getExpressionInsideBlockAccess().getAlternatives()); }
(rule__ExpressionInsideBlock__Alternatives)
{ after(grammarAccess.getExpressionInsideBlockAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleVariableDeclarations
entryRuleVariableDeclarations 
:
{ before(grammarAccess.getVariableDeclarationsRule()); }
	 ruleVariableDeclarations
{ after(grammarAccess.getVariableDeclarationsRule()); } 
	 EOF 
;

// Rule VariableDeclarations
ruleVariableDeclarations
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getVariableDeclarationsAccess().getGroup()); }
(rule__VariableDeclarations__Group__0)
{ after(grammarAccess.getVariableDeclarationsAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleVariableDeclaration
entryRuleVariableDeclaration 
:
{ before(grammarAccess.getVariableDeclarationRule()); }
	 ruleVariableDeclaration
{ after(grammarAccess.getVariableDeclarationRule()); } 
	 EOF 
;

// Rule VariableDeclaration
ruleVariableDeclaration
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getVariableDeclarationAccess().getGroup()); }
(rule__VariableDeclaration__Group__0)
{ after(grammarAccess.getVariableDeclarationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleParenthesizedExpression
entryRuleParenthesizedExpression 
:
{ before(grammarAccess.getParenthesizedExpressionRule()); }
	 ruleParenthesizedExpression
{ after(grammarAccess.getParenthesizedExpressionRule()); } 
	 EOF 
;

// Rule ParenthesizedExpression
ruleParenthesizedExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getParenthesizedExpressionAccess().getGroup()); }
(rule__ParenthesizedExpression__Group__0)
{ after(grammarAccess.getParenthesizedExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFeatureCall
entryRuleFeatureCall 
:
{ before(grammarAccess.getFeatureCallRule()); }
	 ruleFeatureCall
{ after(grammarAccess.getFeatureCallRule()); } 
	 EOF 
;

// Rule FeatureCall
ruleFeatureCall
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFeatureCallAccess().getGroup()); }
(rule__FeatureCall__Group__0)
{ after(grammarAccess.getFeatureCallAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}





// Entry rule entryRuleConstructorCall
entryRuleConstructorCall 
:
{ before(grammarAccess.getConstructorCallRule()); }
	 ruleConstructorCall
{ after(grammarAccess.getConstructorCallRule()); } 
	 EOF 
;

// Rule ConstructorCall
ruleConstructorCall
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getConstructorCallAccess().getGroup()); }
(rule__ConstructorCall__Group__0)
{ after(grammarAccess.getConstructorCallAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleIdOrSuper
entryRuleIdOrSuper 
:
{ before(grammarAccess.getIdOrSuperRule()); }
	 ruleIdOrSuper
{ after(grammarAccess.getIdOrSuperRule()); } 
	 EOF 
;

// Rule IdOrSuper
ruleIdOrSuper
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getIdOrSuperAccess().getAlternatives()); }
(rule__IdOrSuper__Alternatives)
{ after(grammarAccess.getIdOrSuperAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBooleanLiteral
entryRuleBooleanLiteral 
:
{ before(grammarAccess.getBooleanLiteralRule()); }
	 ruleBooleanLiteral
{ after(grammarAccess.getBooleanLiteralRule()); } 
	 EOF 
;

// Rule BooleanLiteral
ruleBooleanLiteral
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBooleanLiteralAccess().getGroup()); }
(rule__BooleanLiteral__Group__0)
{ after(grammarAccess.getBooleanLiteralAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNullLiteral
entryRuleNullLiteral 
:
{ before(grammarAccess.getNullLiteralRule()); }
	 ruleNullLiteral
{ after(grammarAccess.getNullLiteralRule()); } 
	 EOF 
;

// Rule NullLiteral
ruleNullLiteral
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNullLiteralAccess().getGroup()); }
(rule__NullLiteral__Group__0)
{ after(grammarAccess.getNullLiteralAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleIntLiteral
entryRuleIntLiteral 
:
{ before(grammarAccess.getIntLiteralRule()); }
	 ruleIntLiteral
{ after(grammarAccess.getIntLiteralRule()); } 
	 EOF 
;

// Rule IntLiteral
ruleIntLiteral
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getIntLiteralAccess().getGroup()); }
(rule__IntLiteral__Group__0)
{ after(grammarAccess.getIntLiteralAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFloatLiteral
entryRuleFloatLiteral 
:
{ before(grammarAccess.getFloatLiteralRule()); }
	 ruleFloatLiteral
{ after(grammarAccess.getFloatLiteralRule()); } 
	 EOF 
;

// Rule FloatLiteral
ruleFloatLiteral
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFloatLiteralAccess().getGroup()); }
(rule__FloatLiteral__Group__0)
{ after(grammarAccess.getFloatLiteralAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleStringLiteral
entryRuleStringLiteral 
:
{ before(grammarAccess.getStringLiteralRule()); }
	 ruleStringLiteral
{ after(grammarAccess.getStringLiteralRule()); } 
	 EOF 
;

// Rule StringLiteral
ruleStringLiteral
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getStringLiteralAccess().getGroup()); }
(rule__StringLiteral__Group__0)
{ after(grammarAccess.getStringLiteralAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleRegularExpressionLiteral
entryRuleRegularExpressionLiteral 
:
{ before(grammarAccess.getRegularExpressionLiteralRule()); }
	 ruleRegularExpressionLiteral
{ after(grammarAccess.getRegularExpressionLiteralRule()); } 
	 EOF 
;

// Rule RegularExpressionLiteral
ruleRegularExpressionLiteral
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getRegularExpressionLiteralAccess().getGroup()); }
(rule__RegularExpressionLiteral__Group__0)
{ after(grammarAccess.getRegularExpressionLiteralAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleArrayLiteral
entryRuleArrayLiteral 
:
{ before(grammarAccess.getArrayLiteralRule()); }
	 ruleArrayLiteral
{ after(grammarAccess.getArrayLiteralRule()); } 
	 EOF 
;

// Rule ArrayLiteral
ruleArrayLiteral
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getArrayLiteralAccess().getGroup()); }
(rule__ArrayLiteral__Group__0)
{ after(grammarAccess.getArrayLiteralAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleQualifiedName
entryRuleQualifiedName 
:
{ before(grammarAccess.getQualifiedNameRule()); }
	 ruleQualifiedName
{ after(grammarAccess.getQualifiedNameRule()); } 
	 EOF 
;

// Rule QualifiedName
ruleQualifiedName
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getQualifiedNameAccess().getGroup()); }
(rule__QualifiedName__Group__0)
{ after(grammarAccess.getQualifiedNameAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleValidID
entryRuleValidID 
:
{ before(grammarAccess.getValidIDRule()); }
	 ruleValidID
{ after(grammarAccess.getValidIDRule()); } 
	 EOF 
;

// Rule ValidID
ruleValidID
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getValidIDAccess().getIDTerminalRuleCall()); }
	RULE_ID
{ after(grammarAccess.getValidIDAccess().getIDTerminalRuleCall()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__Assignment__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentAccess().getGroup_0()); }
(rule__Assignment__Group_0__0)
{ after(grammarAccess.getAssignmentAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getAssignmentAccess().getGroup_1()); }
(rule__Assignment__Group_1__0)
{ after(grammarAccess.getAssignmentAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__OpMultiAssign__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOpMultiAssignAccess().getPlusSignEqualsSignKeyword_0()); }

	'+=' 

{ after(grammarAccess.getOpMultiAssignAccess().getPlusSignEqualsSignKeyword_0()); }
)

    |(
{ before(grammarAccess.getOpMultiAssignAccess().getHyphenMinusEqualsSignKeyword_1()); }

	'-=' 

{ after(grammarAccess.getOpMultiAssignAccess().getHyphenMinusEqualsSignKeyword_1()); }
)

    |(
{ before(grammarAccess.getOpMultiAssignAccess().getAsteriskEqualsSignKeyword_2()); }

	'*=' 

{ after(grammarAccess.getOpMultiAssignAccess().getAsteriskEqualsSignKeyword_2()); }
)

    |(
{ before(grammarAccess.getOpMultiAssignAccess().getSolidusEqualsSignKeyword_3()); }

	'/=' 

{ after(grammarAccess.getOpMultiAssignAccess().getSolidusEqualsSignKeyword_3()); }
)

    |(
{ before(grammarAccess.getOpMultiAssignAccess().getPercentSignEqualsSignKeyword_4()); }

	'%=' 

{ after(grammarAccess.getOpMultiAssignAccess().getPercentSignEqualsSignKeyword_4()); }
)

    |(
{ before(grammarAccess.getOpMultiAssignAccess().getAmpersandEqualsSignKeyword_5()); }

	'&=' 

{ after(grammarAccess.getOpMultiAssignAccess().getAmpersandEqualsSignKeyword_5()); }
)

    |(
{ before(grammarAccess.getOpMultiAssignAccess().getVerticalLineEqualsSignKeyword_6()); }

	'|=' 

{ after(grammarAccess.getOpMultiAssignAccess().getVerticalLineEqualsSignKeyword_6()); }
)

    |(
{ before(grammarAccess.getOpMultiAssignAccess().getCircumflexAccentEqualsSignKeyword_7()); }

	'^=' 

{ after(grammarAccess.getOpMultiAssignAccess().getCircumflexAccentEqualsSignKeyword_7()); }
)

    |(
{ before(grammarAccess.getOpMultiAssignAccess().getLessThanSignLessThanSignEqualsSignKeyword_8()); }

	'<<=' 

{ after(grammarAccess.getOpMultiAssignAccess().getLessThanSignLessThanSignEqualsSignKeyword_8()); }
)

    |(
{ before(grammarAccess.getOpMultiAssignAccess().getGreaterThanSignGreaterThanSignEqualsSignKeyword_9()); }

	'>>=' 

{ after(grammarAccess.getOpMultiAssignAccess().getGreaterThanSignGreaterThanSignEqualsSignKeyword_9()); }
)

    |(
{ before(grammarAccess.getOpMultiAssignAccess().getGreaterThanSignGreaterThanSignGreaterThanSignEqualsSignKeyword_10()); }

	'>>>=' 

{ after(grammarAccess.getOpMultiAssignAccess().getGreaterThanSignGreaterThanSignGreaterThanSignEqualsSignKeyword_10()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__OpCompare__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOpCompareAccess().getEqualsSignEqualsSignKeyword_0()); }

	'==' 

{ after(grammarAccess.getOpCompareAccess().getEqualsSignEqualsSignKeyword_0()); }
)

    |(
{ before(grammarAccess.getOpCompareAccess().getExclamationMarkEqualsSignKeyword_1()); }

	'!=' 

{ after(grammarAccess.getOpCompareAccess().getExclamationMarkEqualsSignKeyword_1()); }
)

    |(
{ before(grammarAccess.getOpCompareAccess().getGreaterThanSignEqualsSignKeyword_2()); }

	'>=' 

{ after(grammarAccess.getOpCompareAccess().getGreaterThanSignEqualsSignKeyword_2()); }
)

    |(
{ before(grammarAccess.getOpCompareAccess().getLessThanSignEqualsSignKeyword_3()); }

	'<=' 

{ after(grammarAccess.getOpCompareAccess().getLessThanSignEqualsSignKeyword_3()); }
)

    |(
{ before(grammarAccess.getOpCompareAccess().getGreaterThanSignKeyword_4()); }

	'>' 

{ after(grammarAccess.getOpCompareAccess().getGreaterThanSignKeyword_4()); }
)

    |(
{ before(grammarAccess.getOpCompareAccess().getLessThanSignKeyword_5()); }

	'<' 

{ after(grammarAccess.getOpCompareAccess().getLessThanSignKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__OpBitwise__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOpBitwiseAccess().getVerticalLineKeyword_0()); }

	'|' 

{ after(grammarAccess.getOpBitwiseAccess().getVerticalLineKeyword_0()); }
)

    |(
{ before(grammarAccess.getOpBitwiseAccess().getAmpersandKeyword_1()); }

	'&' 

{ after(grammarAccess.getOpBitwiseAccess().getAmpersandKeyword_1()); }
)

    |(
{ before(grammarAccess.getOpBitwiseAccess().getCircumflexAccentKeyword_2()); }

	'^' 

{ after(grammarAccess.getOpBitwiseAccess().getCircumflexAccentKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__OpBitshift__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOpBitshiftAccess().getLessThanSignLessThanSignKeyword_0()); }

	'<<' 

{ after(grammarAccess.getOpBitshiftAccess().getLessThanSignLessThanSignKeyword_0()); }
)

    |(
{ before(grammarAccess.getOpBitshiftAccess().getGreaterThanSignGreaterThanSignKeyword_1()); }

	'>>' 

{ after(grammarAccess.getOpBitshiftAccess().getGreaterThanSignGreaterThanSignKeyword_1()); }
)

    |(
{ before(grammarAccess.getOpBitshiftAccess().getGreaterThanSignGreaterThanSignGreaterThanSignKeyword_2()); }

	'>>>' 

{ after(grammarAccess.getOpBitshiftAccess().getGreaterThanSignGreaterThanSignGreaterThanSignKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryOperation__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryOperationAccess().getGroup_0()); }
(rule__UnaryOperation__Group_0__0)
{ after(grammarAccess.getUnaryOperationAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getUnaryOperationAccess().getPreIncrementOperationParserRuleCall_1()); }
	rulePreIncrementOperation
{ after(grammarAccess.getUnaryOperationAccess().getPreIncrementOperationParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__OpUnary__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOpUnaryAccess().getExclamationMarkKeyword_0()); }

	'!' 

{ after(grammarAccess.getOpUnaryAccess().getExclamationMarkKeyword_0()); }
)

    |(
{ before(grammarAccess.getOpUnaryAccess().getHyphenMinusKeyword_1()); }

	'-' 

{ after(grammarAccess.getOpUnaryAccess().getHyphenMinusKeyword_1()); }
)

    |(
{ before(grammarAccess.getOpUnaryAccess().getTildeKeyword_2()); }

	'~' 

{ after(grammarAccess.getOpUnaryAccess().getTildeKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PreIncrementOperation__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPreIncrementOperationAccess().getGroup_0()); }
(rule__PreIncrementOperation__Group_0__0)
{ after(grammarAccess.getPreIncrementOperationAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getPreIncrementOperationAccess().getPostIncrementOperationParserRuleCall_1()); }
	rulePostIncrementOperation
{ after(grammarAccess.getPreIncrementOperationAccess().getPostIncrementOperationParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PostIncrementOperation__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPostIncrementOperationAccess().getGroup_0()); }
(rule__PostIncrementOperation__Group_0__0)
{ after(grammarAccess.getPostIncrementOperationAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getPostIncrementOperationAccess().getMemberFeatureCallParserRuleCall_1()); }
	ruleMemberFeatureCall
{ after(grammarAccess.getPostIncrementOperationAccess().getMemberFeatureCallParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__OpIncrement__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOpIncrementAccess().getPlusSignPlusSignKeyword_0()); }

	'++' 

{ after(grammarAccess.getOpIncrementAccess().getPlusSignPlusSignKeyword_0()); }
)

    |(
{ before(grammarAccess.getOpIncrementAccess().getHyphenMinusHyphenMinusKeyword_1()); }

	'--' 

{ after(grammarAccess.getOpIncrementAccess().getHyphenMinusHyphenMinusKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MemberFeatureCall__Alternatives_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMemberFeatureCallAccess().getGroup_1_0()); }
(rule__MemberFeatureCall__Group_1_0__0)
{ after(grammarAccess.getMemberFeatureCallAccess().getGroup_1_0()); }
)

    |(
{ before(grammarAccess.getMemberFeatureCallAccess().getGroup_1_1()); }
(rule__MemberFeatureCall__Group_1_1__0)
{ after(grammarAccess.getMemberFeatureCallAccess().getGroup_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryExpressionAccess().getLiteralParserRuleCall_0()); }
	ruleLiteral
{ after(grammarAccess.getPrimaryExpressionAccess().getLiteralParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getPrimaryExpressionAccess().getBlockExpressionParserRuleCall_1()); }
	ruleBlockExpression
{ after(grammarAccess.getPrimaryExpressionAccess().getBlockExpressionParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getPrimaryExpressionAccess().getParenthesizedExpressionParserRuleCall_2()); }
	ruleParenthesizedExpression
{ after(grammarAccess.getPrimaryExpressionAccess().getParenthesizedExpressionParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getPrimaryExpressionAccess().getFeatureCallParserRuleCall_3()); }
	ruleFeatureCall
{ after(grammarAccess.getPrimaryExpressionAccess().getFeatureCallParserRuleCall_3()); }
)

    |(
{ before(grammarAccess.getPrimaryExpressionAccess().getConstructorCallParserRuleCall_4()); }
	ruleConstructorCall
{ after(grammarAccess.getPrimaryExpressionAccess().getConstructorCallParserRuleCall_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Literal__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralAccess().getBooleanLiteralParserRuleCall_0()); }
	ruleBooleanLiteral
{ after(grammarAccess.getLiteralAccess().getBooleanLiteralParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getLiteralAccess().getIntLiteralParserRuleCall_1()); }
	ruleIntLiteral
{ after(grammarAccess.getLiteralAccess().getIntLiteralParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getLiteralAccess().getNullLiteralParserRuleCall_2()); }
	ruleNullLiteral
{ after(grammarAccess.getLiteralAccess().getNullLiteralParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getLiteralAccess().getStringLiteralParserRuleCall_3()); }
	ruleStringLiteral
{ after(grammarAccess.getLiteralAccess().getStringLiteralParserRuleCall_3()); }
)

    |(
{ before(grammarAccess.getLiteralAccess().getFloatLiteralParserRuleCall_4()); }
	ruleFloatLiteral
{ after(grammarAccess.getLiteralAccess().getFloatLiteralParserRuleCall_4()); }
)

    |(
{ before(grammarAccess.getLiteralAccess().getRegularExpressionLiteralParserRuleCall_5()); }
	ruleRegularExpressionLiteral
{ after(grammarAccess.getLiteralAccess().getRegularExpressionLiteralParserRuleCall_5()); }
)

    |(
{ before(grammarAccess.getLiteralAccess().getArrayLiteralParserRuleCall_6()); }
	ruleArrayLiteral
{ after(grammarAccess.getLiteralAccess().getArrayLiteralParserRuleCall_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionInsideBlock__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionInsideBlockAccess().getVariableDeclarationsParserRuleCall_0()); }
	ruleVariableDeclarations
{ after(grammarAccess.getExpressionInsideBlockAccess().getVariableDeclarationsParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getExpressionInsideBlockAccess().getExpressionParserRuleCall_1()); }
	ruleExpression
{ after(grammarAccess.getExpressionInsideBlockAccess().getExpressionParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IdOrSuper__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIdOrSuperAccess().getValidIDParserRuleCall_0()); }
	ruleValidID
{ after(grammarAccess.getIdOrSuperAccess().getValidIDParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getIdOrSuperAccess().getSuperKeyword_1()); }

	'super' 

{ after(grammarAccess.getIdOrSuperAccess().getSuperKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanLiteral__Alternatives_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBooleanLiteralAccess().getFalseKeyword_1_0()); }

	'false' 

{ after(grammarAccess.getBooleanLiteralAccess().getFalseKeyword_1_0()); }
)

    |(
{ before(grammarAccess.getBooleanLiteralAccess().getIsTrueAssignment_1_1()); }
(rule__BooleanLiteral__IsTrueAssignment_1_1)
{ after(grammarAccess.getBooleanLiteralAccess().getIsTrueAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IntLiteral__Alternatives_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntLiteralAccess().getValueAssignment_1_0()); }
(rule__IntLiteral__ValueAssignment_1_0)
{ after(grammarAccess.getIntLiteralAccess().getValueAssignment_1_0()); }
)

    |(
{ before(grammarAccess.getIntLiteralAccess().getHEXTerminalRuleCall_1_1()); }
	RULE_HEX
{ after(grammarAccess.getIntLiteralAccess().getHEXTerminalRuleCall_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__TypeReference__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TypeReference__Group__0__Impl
	rule__TypeReference__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeReference__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeReferenceAccess().getTypeAssignment_0()); }
(rule__TypeReference__TypeAssignment_0)
{ after(grammarAccess.getTypeReferenceAccess().getTypeAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TypeReference__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TypeReference__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeReference__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeReferenceAccess().getGroup_1()); }
(rule__TypeReference__Group_1__0)?
{ after(grammarAccess.getTypeReferenceAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__TypeReference__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TypeReference__Group_1__0__Impl
	rule__TypeReference__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeReference__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeReferenceAccess().getLessThanSignKeyword_1_0()); }
(
	'<' 
)
{ after(grammarAccess.getTypeReferenceAccess().getLessThanSignKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TypeReference__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TypeReference__Group_1__1__Impl
	rule__TypeReference__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeReference__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeReferenceAccess().getArgumentsAssignment_1_1()); }
(rule__TypeReference__ArgumentsAssignment_1_1)
{ after(grammarAccess.getTypeReferenceAccess().getArgumentsAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TypeReference__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TypeReference__Group_1__2__Impl
	rule__TypeReference__Group_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeReference__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeReferenceAccess().getGroup_1_2()); }
(rule__TypeReference__Group_1_2__0)*
{ after(grammarAccess.getTypeReferenceAccess().getGroup_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TypeReference__Group_1__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TypeReference__Group_1__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeReference__Group_1__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeReferenceAccess().getGreaterThanSignKeyword_1_3()); }

	'>' 

{ after(grammarAccess.getTypeReferenceAccess().getGreaterThanSignKeyword_1_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__TypeReference__Group_1_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TypeReference__Group_1_2__0__Impl
	rule__TypeReference__Group_1_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeReference__Group_1_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeReferenceAccess().getCommaKeyword_1_2_0()); }

	',' 

{ after(grammarAccess.getTypeReferenceAccess().getCommaKeyword_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TypeReference__Group_1_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TypeReference__Group_1_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeReference__Group_1_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeReferenceAccess().getArgumentsAssignment_1_2_1()); }
(rule__TypeReference__ArgumentsAssignment_1_2_1)
{ after(grammarAccess.getTypeReferenceAccess().getArgumentsAssignment_1_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Assignment__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Assignment__Group_0__0__Impl
	rule__Assignment__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentAccess().getAssignmentAction_0_0()); }
(

)
{ after(grammarAccess.getAssignmentAccess().getAssignmentAction_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Assignment__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Assignment__Group_0__1__Impl
	rule__Assignment__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentAccess().getFeatureAssignment_0_1()); }
(rule__Assignment__FeatureAssignment_0_1)
{ after(grammarAccess.getAssignmentAccess().getFeatureAssignment_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Assignment__Group_0__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Assignment__Group_0__2__Impl
	rule__Assignment__Group_0__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__Group_0__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentAccess().getOpSingleAssignParserRuleCall_0_2()); }
	ruleOpSingleAssign
{ after(grammarAccess.getAssignmentAccess().getOpSingleAssignParserRuleCall_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Assignment__Group_0__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Assignment__Group_0__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__Group_0__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentAccess().getValueAssignment_0_3()); }
(rule__Assignment__ValueAssignment_0_3)
{ after(grammarAccess.getAssignmentAccess().getValueAssignment_0_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Assignment__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Assignment__Group_1__0__Impl
	rule__Assignment__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentAccess().getOrExpressionParserRuleCall_1_0()); }
	ruleOrExpression
{ after(grammarAccess.getAssignmentAccess().getOrExpressionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Assignment__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Assignment__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentAccess().getGroup_1_1()); }
(rule__Assignment__Group_1_1__0)?
{ after(grammarAccess.getAssignmentAccess().getGroup_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Assignment__Group_1_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Assignment__Group_1_1__0__Impl
	rule__Assignment__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__Group_1_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentAccess().getGroup_1_1_0()); }
(rule__Assignment__Group_1_1_0__0)
{ after(grammarAccess.getAssignmentAccess().getGroup_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Assignment__Group_1_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Assignment__Group_1_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__Group_1_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentAccess().getRightAssignment_1_1_1()); }
(rule__Assignment__RightAssignment_1_1_1)
{ after(grammarAccess.getAssignmentAccess().getRightAssignment_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Assignment__Group_1_1_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Assignment__Group_1_1_0__0__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__Group_1_1_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentAccess().getGroup_1_1_0_0()); }
(rule__Assignment__Group_1_1_0_0__0)
{ after(grammarAccess.getAssignmentAccess().getGroup_1_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__Assignment__Group_1_1_0_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Assignment__Group_1_1_0_0__0__Impl
	rule__Assignment__Group_1_1_0_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__Group_1_1_0_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentAccess().getOperationLeftAction_1_1_0_0_0()); }
(

)
{ after(grammarAccess.getAssignmentAccess().getOperationLeftAction_1_1_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Assignment__Group_1_1_0_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Assignment__Group_1_1_0_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__Group_1_1_0_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentAccess().getFeatureAssignment_1_1_0_0_1()); }
(rule__Assignment__FeatureAssignment_1_1_0_0_1)
{ after(grammarAccess.getAssignmentAccess().getFeatureAssignment_1_1_0_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__OrExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OrExpression__Group__0__Impl
	rule__OrExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrExpressionAccess().getAndExpressionParserRuleCall_0()); }
	ruleAndExpression
{ after(grammarAccess.getOrExpressionAccess().getAndExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OrExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OrExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrExpressionAccess().getGroup_1()); }
(rule__OrExpression__Group_1__0)*
{ after(grammarAccess.getOrExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__OrExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OrExpression__Group_1__0__Impl
	rule__OrExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrExpressionAccess().getGroup_1_0()); }
(rule__OrExpression__Group_1_0__0)
{ after(grammarAccess.getOrExpressionAccess().getGroup_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OrExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OrExpression__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrExpressionAccess().getRightAssignment_1_1()); }
(rule__OrExpression__RightAssignment_1_1)
{ after(grammarAccess.getOrExpressionAccess().getRightAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__OrExpression__Group_1_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OrExpression__Group_1_0__0__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__Group_1_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrExpressionAccess().getGroup_1_0_0()); }
(rule__OrExpression__Group_1_0_0__0)
{ after(grammarAccess.getOrExpressionAccess().getGroup_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__OrExpression__Group_1_0_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OrExpression__Group_1_0_0__0__Impl
	rule__OrExpression__Group_1_0_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__Group_1_0_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrExpressionAccess().getOperationLeftAction_1_0_0_0()); }
(

)
{ after(grammarAccess.getOrExpressionAccess().getOperationLeftAction_1_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OrExpression__Group_1_0_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OrExpression__Group_1_0_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__Group_1_0_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrExpressionAccess().getFeatureAssignment_1_0_0_1()); }
(rule__OrExpression__FeatureAssignment_1_0_0_1)
{ after(grammarAccess.getOrExpressionAccess().getFeatureAssignment_1_0_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AndExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AndExpression__Group__0__Impl
	rule__AndExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndExpressionAccess().getOtherOperatorExpressionParserRuleCall_0()); }
	ruleOtherOperatorExpression
{ after(grammarAccess.getAndExpressionAccess().getOtherOperatorExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AndExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AndExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndExpressionAccess().getGroup_1()); }
(rule__AndExpression__Group_1__0)*
{ after(grammarAccess.getAndExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AndExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AndExpression__Group_1__0__Impl
	rule__AndExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndExpressionAccess().getGroup_1_0()); }
(rule__AndExpression__Group_1_0__0)
{ after(grammarAccess.getAndExpressionAccess().getGroup_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AndExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AndExpression__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndExpressionAccess().getRightAssignment_1_1()); }
(rule__AndExpression__RightAssignment_1_1)
{ after(grammarAccess.getAndExpressionAccess().getRightAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AndExpression__Group_1_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AndExpression__Group_1_0__0__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group_1_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndExpressionAccess().getGroup_1_0_0()); }
(rule__AndExpression__Group_1_0_0__0)
{ after(grammarAccess.getAndExpressionAccess().getGroup_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__AndExpression__Group_1_0_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AndExpression__Group_1_0_0__0__Impl
	rule__AndExpression__Group_1_0_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group_1_0_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndExpressionAccess().getOperationLeftAction_1_0_0_0()); }
(

)
{ after(grammarAccess.getAndExpressionAccess().getOperationLeftAction_1_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AndExpression__Group_1_0_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AndExpression__Group_1_0_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group_1_0_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndExpressionAccess().getFeatureAssignment_1_0_0_1()); }
(rule__AndExpression__FeatureAssignment_1_0_0_1)
{ after(grammarAccess.getAndExpressionAccess().getFeatureAssignment_1_0_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__OtherOperatorExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OtherOperatorExpression__Group__0__Impl
	rule__OtherOperatorExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OtherOperatorExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOtherOperatorExpressionAccess().getCompareExpressionParserRuleCall_0()); }
	ruleCompareExpression
{ after(grammarAccess.getOtherOperatorExpressionAccess().getCompareExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OtherOperatorExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OtherOperatorExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OtherOperatorExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOtherOperatorExpressionAccess().getGroup_1()); }
(rule__OtherOperatorExpression__Group_1__0)*
{ after(grammarAccess.getOtherOperatorExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__OtherOperatorExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OtherOperatorExpression__Group_1__0__Impl
	rule__OtherOperatorExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OtherOperatorExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOtherOperatorExpressionAccess().getGroup_1_0()); }
(rule__OtherOperatorExpression__Group_1_0__0)
{ after(grammarAccess.getOtherOperatorExpressionAccess().getGroup_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OtherOperatorExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OtherOperatorExpression__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OtherOperatorExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOtherOperatorExpressionAccess().getRightAssignment_1_1()); }
(rule__OtherOperatorExpression__RightAssignment_1_1)
{ after(grammarAccess.getOtherOperatorExpressionAccess().getRightAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__OtherOperatorExpression__Group_1_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OtherOperatorExpression__Group_1_0__0__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OtherOperatorExpression__Group_1_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOtherOperatorExpressionAccess().getGroup_1_0_0()); }
(rule__OtherOperatorExpression__Group_1_0_0__0)
{ after(grammarAccess.getOtherOperatorExpressionAccess().getGroup_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__OtherOperatorExpression__Group_1_0_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OtherOperatorExpression__Group_1_0_0__0__Impl
	rule__OtherOperatorExpression__Group_1_0_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OtherOperatorExpression__Group_1_0_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOtherOperatorExpressionAccess().getOperationLeftAction_1_0_0_0()); }
(

)
{ after(grammarAccess.getOtherOperatorExpressionAccess().getOperationLeftAction_1_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OtherOperatorExpression__Group_1_0_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OtherOperatorExpression__Group_1_0_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OtherOperatorExpression__Group_1_0_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOtherOperatorExpressionAccess().getFeatureAssignment_1_0_0_1()); }
(rule__OtherOperatorExpression__FeatureAssignment_1_0_0_1)
{ after(grammarAccess.getOtherOperatorExpressionAccess().getFeatureAssignment_1_0_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__CompareExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CompareExpression__Group__0__Impl
	rule__CompareExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CompareExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompareExpressionAccess().getBitwiseExpressionParserRuleCall_0()); }
	ruleBitwiseExpression
{ after(grammarAccess.getCompareExpressionAccess().getBitwiseExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CompareExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CompareExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CompareExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompareExpressionAccess().getGroup_1()); }
(rule__CompareExpression__Group_1__0)*
{ after(grammarAccess.getCompareExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__CompareExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CompareExpression__Group_1__0__Impl
	rule__CompareExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CompareExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompareExpressionAccess().getGroup_1_0()); }
(rule__CompareExpression__Group_1_0__0)
{ after(grammarAccess.getCompareExpressionAccess().getGroup_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CompareExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CompareExpression__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CompareExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompareExpressionAccess().getRightAssignment_1_1()); }
(rule__CompareExpression__RightAssignment_1_1)
{ after(grammarAccess.getCompareExpressionAccess().getRightAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__CompareExpression__Group_1_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CompareExpression__Group_1_0__0__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CompareExpression__Group_1_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompareExpressionAccess().getGroup_1_0_0()); }
(rule__CompareExpression__Group_1_0_0__0)
{ after(grammarAccess.getCompareExpressionAccess().getGroup_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__CompareExpression__Group_1_0_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CompareExpression__Group_1_0_0__0__Impl
	rule__CompareExpression__Group_1_0_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CompareExpression__Group_1_0_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompareExpressionAccess().getOperationLeftAction_1_0_0_0()); }
(

)
{ after(grammarAccess.getCompareExpressionAccess().getOperationLeftAction_1_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CompareExpression__Group_1_0_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CompareExpression__Group_1_0_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CompareExpression__Group_1_0_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompareExpressionAccess().getFeatureAssignment_1_0_0_1()); }
(rule__CompareExpression__FeatureAssignment_1_0_0_1)
{ after(grammarAccess.getCompareExpressionAccess().getFeatureAssignment_1_0_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__BitwiseExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BitwiseExpression__Group__0__Impl
	rule__BitwiseExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BitwiseExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBitwiseExpressionAccess().getBitshiftExpressionParserRuleCall_0()); }
	ruleBitshiftExpression
{ after(grammarAccess.getBitwiseExpressionAccess().getBitshiftExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BitwiseExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BitwiseExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BitwiseExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBitwiseExpressionAccess().getGroup_1()); }
(rule__BitwiseExpression__Group_1__0)*
{ after(grammarAccess.getBitwiseExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__BitwiseExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BitwiseExpression__Group_1__0__Impl
	rule__BitwiseExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BitwiseExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBitwiseExpressionAccess().getGroup_1_0()); }
(rule__BitwiseExpression__Group_1_0__0)
{ after(grammarAccess.getBitwiseExpressionAccess().getGroup_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BitwiseExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BitwiseExpression__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BitwiseExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBitwiseExpressionAccess().getRightAssignment_1_1()); }
(rule__BitwiseExpression__RightAssignment_1_1)
{ after(grammarAccess.getBitwiseExpressionAccess().getRightAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__BitwiseExpression__Group_1_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BitwiseExpression__Group_1_0__0__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BitwiseExpression__Group_1_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBitwiseExpressionAccess().getGroup_1_0_0()); }
(rule__BitwiseExpression__Group_1_0_0__0)
{ after(grammarAccess.getBitwiseExpressionAccess().getGroup_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__BitwiseExpression__Group_1_0_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BitwiseExpression__Group_1_0_0__0__Impl
	rule__BitwiseExpression__Group_1_0_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BitwiseExpression__Group_1_0_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBitwiseExpressionAccess().getOperationLeftAction_1_0_0_0()); }
(

)
{ after(grammarAccess.getBitwiseExpressionAccess().getOperationLeftAction_1_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BitwiseExpression__Group_1_0_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BitwiseExpression__Group_1_0_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BitwiseExpression__Group_1_0_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBitwiseExpressionAccess().getFeatureAssignment_1_0_0_1()); }
(rule__BitwiseExpression__FeatureAssignment_1_0_0_1)
{ after(grammarAccess.getBitwiseExpressionAccess().getFeatureAssignment_1_0_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__BitshiftExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BitshiftExpression__Group__0__Impl
	rule__BitshiftExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BitshiftExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBitshiftExpressionAccess().getAddExpressionParserRuleCall_0()); }
	ruleAddExpression
{ after(grammarAccess.getBitshiftExpressionAccess().getAddExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BitshiftExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BitshiftExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BitshiftExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBitshiftExpressionAccess().getGroup_1()); }
(rule__BitshiftExpression__Group_1__0)*
{ after(grammarAccess.getBitshiftExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__BitshiftExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BitshiftExpression__Group_1__0__Impl
	rule__BitshiftExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BitshiftExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBitshiftExpressionAccess().getGroup_1_0()); }
(rule__BitshiftExpression__Group_1_0__0)
{ after(grammarAccess.getBitshiftExpressionAccess().getGroup_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BitshiftExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BitshiftExpression__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BitshiftExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBitshiftExpressionAccess().getRightAssignment_1_1()); }
(rule__BitshiftExpression__RightAssignment_1_1)
{ after(grammarAccess.getBitshiftExpressionAccess().getRightAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__BitshiftExpression__Group_1_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BitshiftExpression__Group_1_0__0__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BitshiftExpression__Group_1_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBitshiftExpressionAccess().getGroup_1_0_0()); }
(rule__BitshiftExpression__Group_1_0_0__0)
{ after(grammarAccess.getBitshiftExpressionAccess().getGroup_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__BitshiftExpression__Group_1_0_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BitshiftExpression__Group_1_0_0__0__Impl
	rule__BitshiftExpression__Group_1_0_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BitshiftExpression__Group_1_0_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBitshiftExpressionAccess().getOperationLeftAction_1_0_0_0()); }
(

)
{ after(grammarAccess.getBitshiftExpressionAccess().getOperationLeftAction_1_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BitshiftExpression__Group_1_0_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BitshiftExpression__Group_1_0_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BitshiftExpression__Group_1_0_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBitshiftExpressionAccess().getFeatureAssignment_1_0_0_1()); }
(rule__BitshiftExpression__FeatureAssignment_1_0_0_1)
{ after(grammarAccess.getBitshiftExpressionAccess().getFeatureAssignment_1_0_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AddExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AddExpression__Group__0__Impl
	rule__AddExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AddExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAddExpressionAccess().getSubtractExpressionParserRuleCall_0()); }
	ruleSubtractExpression
{ after(grammarAccess.getAddExpressionAccess().getSubtractExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AddExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AddExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AddExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAddExpressionAccess().getGroup_1()); }
(rule__AddExpression__Group_1__0)*
{ after(grammarAccess.getAddExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AddExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AddExpression__Group_1__0__Impl
	rule__AddExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AddExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAddExpressionAccess().getGroup_1_0()); }
(rule__AddExpression__Group_1_0__0)
{ after(grammarAccess.getAddExpressionAccess().getGroup_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AddExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AddExpression__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AddExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAddExpressionAccess().getRightAssignment_1_1()); }
(rule__AddExpression__RightAssignment_1_1)
{ after(grammarAccess.getAddExpressionAccess().getRightAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AddExpression__Group_1_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AddExpression__Group_1_0__0__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AddExpression__Group_1_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAddExpressionAccess().getGroup_1_0_0()); }
(rule__AddExpression__Group_1_0_0__0)
{ after(grammarAccess.getAddExpressionAccess().getGroup_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__AddExpression__Group_1_0_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AddExpression__Group_1_0_0__0__Impl
	rule__AddExpression__Group_1_0_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AddExpression__Group_1_0_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAddExpressionAccess().getOperationLeftAction_1_0_0_0()); }
(

)
{ after(grammarAccess.getAddExpressionAccess().getOperationLeftAction_1_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AddExpression__Group_1_0_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AddExpression__Group_1_0_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AddExpression__Group_1_0_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAddExpressionAccess().getFeatureAssignment_1_0_0_1()); }
(rule__AddExpression__FeatureAssignment_1_0_0_1)
{ after(grammarAccess.getAddExpressionAccess().getFeatureAssignment_1_0_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__SubtractExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SubtractExpression__Group__0__Impl
	rule__SubtractExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SubtractExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubtractExpressionAccess().getMultiplyExpressionParserRuleCall_0()); }
	ruleMultiplyExpression
{ after(grammarAccess.getSubtractExpressionAccess().getMultiplyExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SubtractExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SubtractExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SubtractExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubtractExpressionAccess().getGroup_1()); }
(rule__SubtractExpression__Group_1__0)*
{ after(grammarAccess.getSubtractExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__SubtractExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SubtractExpression__Group_1__0__Impl
	rule__SubtractExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SubtractExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubtractExpressionAccess().getGroup_1_0()); }
(rule__SubtractExpression__Group_1_0__0)
{ after(grammarAccess.getSubtractExpressionAccess().getGroup_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SubtractExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SubtractExpression__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SubtractExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubtractExpressionAccess().getRightAssignment_1_1()); }
(rule__SubtractExpression__RightAssignment_1_1)
{ after(grammarAccess.getSubtractExpressionAccess().getRightAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__SubtractExpression__Group_1_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SubtractExpression__Group_1_0__0__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SubtractExpression__Group_1_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubtractExpressionAccess().getGroup_1_0_0()); }
(rule__SubtractExpression__Group_1_0_0__0)
{ after(grammarAccess.getSubtractExpressionAccess().getGroup_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__SubtractExpression__Group_1_0_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SubtractExpression__Group_1_0_0__0__Impl
	rule__SubtractExpression__Group_1_0_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SubtractExpression__Group_1_0_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubtractExpressionAccess().getOperationLeftAction_1_0_0_0()); }
(

)
{ after(grammarAccess.getSubtractExpressionAccess().getOperationLeftAction_1_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SubtractExpression__Group_1_0_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SubtractExpression__Group_1_0_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SubtractExpression__Group_1_0_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubtractExpressionAccess().getFeatureAssignment_1_0_0_1()); }
(rule__SubtractExpression__FeatureAssignment_1_0_0_1)
{ after(grammarAccess.getSubtractExpressionAccess().getFeatureAssignment_1_0_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__MultiplyExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultiplyExpression__Group__0__Impl
	rule__MultiplyExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplyExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplyExpressionAccess().getDivideExpressionParserRuleCall_0()); }
	ruleDivideExpression
{ after(grammarAccess.getMultiplyExpressionAccess().getDivideExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MultiplyExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultiplyExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplyExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplyExpressionAccess().getGroup_1()); }
(rule__MultiplyExpression__Group_1__0)*
{ after(grammarAccess.getMultiplyExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__MultiplyExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultiplyExpression__Group_1__0__Impl
	rule__MultiplyExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplyExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplyExpressionAccess().getGroup_1_0()); }
(rule__MultiplyExpression__Group_1_0__0)
{ after(grammarAccess.getMultiplyExpressionAccess().getGroup_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MultiplyExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultiplyExpression__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplyExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplyExpressionAccess().getRightAssignment_1_1()); }
(rule__MultiplyExpression__RightAssignment_1_1)
{ after(grammarAccess.getMultiplyExpressionAccess().getRightAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__MultiplyExpression__Group_1_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultiplyExpression__Group_1_0__0__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplyExpression__Group_1_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplyExpressionAccess().getGroup_1_0_0()); }
(rule__MultiplyExpression__Group_1_0_0__0)
{ after(grammarAccess.getMultiplyExpressionAccess().getGroup_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__MultiplyExpression__Group_1_0_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultiplyExpression__Group_1_0_0__0__Impl
	rule__MultiplyExpression__Group_1_0_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplyExpression__Group_1_0_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplyExpressionAccess().getOperationLeftAction_1_0_0_0()); }
(

)
{ after(grammarAccess.getMultiplyExpressionAccess().getOperationLeftAction_1_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MultiplyExpression__Group_1_0_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultiplyExpression__Group_1_0_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplyExpression__Group_1_0_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplyExpressionAccess().getFeatureAssignment_1_0_0_1()); }
(rule__MultiplyExpression__FeatureAssignment_1_0_0_1)
{ after(grammarAccess.getMultiplyExpressionAccess().getFeatureAssignment_1_0_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__DivideExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DivideExpression__Group__0__Impl
	rule__DivideExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DivideExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDivideExpressionAccess().getModuloExpressionParserRuleCall_0()); }
	ruleModuloExpression
{ after(grammarAccess.getDivideExpressionAccess().getModuloExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DivideExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DivideExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DivideExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDivideExpressionAccess().getGroup_1()); }
(rule__DivideExpression__Group_1__0)*
{ after(grammarAccess.getDivideExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__DivideExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DivideExpression__Group_1__0__Impl
	rule__DivideExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DivideExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDivideExpressionAccess().getGroup_1_0()); }
(rule__DivideExpression__Group_1_0__0)
{ after(grammarAccess.getDivideExpressionAccess().getGroup_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DivideExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DivideExpression__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DivideExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDivideExpressionAccess().getRightAssignment_1_1()); }
(rule__DivideExpression__RightAssignment_1_1)
{ after(grammarAccess.getDivideExpressionAccess().getRightAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__DivideExpression__Group_1_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DivideExpression__Group_1_0__0__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DivideExpression__Group_1_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDivideExpressionAccess().getGroup_1_0_0()); }
(rule__DivideExpression__Group_1_0_0__0)
{ after(grammarAccess.getDivideExpressionAccess().getGroup_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__DivideExpression__Group_1_0_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DivideExpression__Group_1_0_0__0__Impl
	rule__DivideExpression__Group_1_0_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DivideExpression__Group_1_0_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDivideExpressionAccess().getOperationLeftAction_1_0_0_0()); }
(

)
{ after(grammarAccess.getDivideExpressionAccess().getOperationLeftAction_1_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DivideExpression__Group_1_0_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DivideExpression__Group_1_0_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DivideExpression__Group_1_0_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDivideExpressionAccess().getFeatureAssignment_1_0_0_1()); }
(rule__DivideExpression__FeatureAssignment_1_0_0_1)
{ after(grammarAccess.getDivideExpressionAccess().getFeatureAssignment_1_0_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ModuloExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ModuloExpression__Group__0__Impl
	rule__ModuloExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ModuloExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModuloExpressionAccess().getUnaryOperationParserRuleCall_0()); }
	ruleUnaryOperation
{ after(grammarAccess.getModuloExpressionAccess().getUnaryOperationParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ModuloExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ModuloExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ModuloExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModuloExpressionAccess().getGroup_1()); }
(rule__ModuloExpression__Group_1__0)*
{ after(grammarAccess.getModuloExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ModuloExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ModuloExpression__Group_1__0__Impl
	rule__ModuloExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ModuloExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModuloExpressionAccess().getGroup_1_0()); }
(rule__ModuloExpression__Group_1_0__0)
{ after(grammarAccess.getModuloExpressionAccess().getGroup_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ModuloExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ModuloExpression__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ModuloExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModuloExpressionAccess().getRightAssignment_1_1()); }
(rule__ModuloExpression__RightAssignment_1_1)
{ after(grammarAccess.getModuloExpressionAccess().getRightAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ModuloExpression__Group_1_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ModuloExpression__Group_1_0__0__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ModuloExpression__Group_1_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModuloExpressionAccess().getGroup_1_0_0()); }
(rule__ModuloExpression__Group_1_0_0__0)
{ after(grammarAccess.getModuloExpressionAccess().getGroup_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__ModuloExpression__Group_1_0_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ModuloExpression__Group_1_0_0__0__Impl
	rule__ModuloExpression__Group_1_0_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ModuloExpression__Group_1_0_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModuloExpressionAccess().getOperationLeftAction_1_0_0_0()); }
(

)
{ after(grammarAccess.getModuloExpressionAccess().getOperationLeftAction_1_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ModuloExpression__Group_1_0_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ModuloExpression__Group_1_0_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ModuloExpression__Group_1_0_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModuloExpressionAccess().getFeatureAssignment_1_0_0_1()); }
(rule__ModuloExpression__FeatureAssignment_1_0_0_1)
{ after(grammarAccess.getModuloExpressionAccess().getFeatureAssignment_1_0_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__UnaryOperation__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnaryOperation__Group_0__0__Impl
	rule__UnaryOperation__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryOperation__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryOperationAccess().getUnaryOperationAction_0_0()); }
(

)
{ after(grammarAccess.getUnaryOperationAccess().getUnaryOperationAction_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UnaryOperation__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnaryOperation__Group_0__1__Impl
	rule__UnaryOperation__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryOperation__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryOperationAccess().getFeatureAssignment_0_1()); }
(rule__UnaryOperation__FeatureAssignment_0_1)
{ after(grammarAccess.getUnaryOperationAccess().getFeatureAssignment_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UnaryOperation__Group_0__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnaryOperation__Group_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryOperation__Group_0__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryOperationAccess().getOperandAssignment_0_2()); }
(rule__UnaryOperation__OperandAssignment_0_2)
{ after(grammarAccess.getUnaryOperationAccess().getOperandAssignment_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__PreIncrementOperation__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PreIncrementOperation__Group_0__0__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PreIncrementOperation__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPreIncrementOperationAccess().getGroup_0_0()); }
(rule__PreIncrementOperation__Group_0_0__0)
{ after(grammarAccess.getPreIncrementOperationAccess().getGroup_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__PreIncrementOperation__Group_0_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PreIncrementOperation__Group_0_0__0__Impl
	rule__PreIncrementOperation__Group_0_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PreIncrementOperation__Group_0_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPreIncrementOperationAccess().getPreIncrementOperationAction_0_0_0()); }
(

)
{ after(grammarAccess.getPreIncrementOperationAccess().getPreIncrementOperationAction_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PreIncrementOperation__Group_0_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PreIncrementOperation__Group_0_0__1__Impl
	rule__PreIncrementOperation__Group_0_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PreIncrementOperation__Group_0_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPreIncrementOperationAccess().getFeatureAssignment_0_0_1()); }
(rule__PreIncrementOperation__FeatureAssignment_0_0_1)
{ after(grammarAccess.getPreIncrementOperationAccess().getFeatureAssignment_0_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PreIncrementOperation__Group_0_0__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PreIncrementOperation__Group_0_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PreIncrementOperation__Group_0_0__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPreIncrementOperationAccess().getOperandAssignment_0_0_2()); }
(rule__PreIncrementOperation__OperandAssignment_0_0_2)
{ after(grammarAccess.getPreIncrementOperationAccess().getOperandAssignment_0_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__PostIncrementOperation__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PostIncrementOperation__Group_0__0__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PostIncrementOperation__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPostIncrementOperationAccess().getGroup_0_0()); }
(rule__PostIncrementOperation__Group_0_0__0)
{ after(grammarAccess.getPostIncrementOperationAccess().getGroup_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__PostIncrementOperation__Group_0_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PostIncrementOperation__Group_0_0__0__Impl
	rule__PostIncrementOperation__Group_0_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PostIncrementOperation__Group_0_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPostIncrementOperationAccess().getPostIncrementOperationAction_0_0_0()); }
(

)
{ after(grammarAccess.getPostIncrementOperationAccess().getPostIncrementOperationAction_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PostIncrementOperation__Group_0_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PostIncrementOperation__Group_0_0__1__Impl
	rule__PostIncrementOperation__Group_0_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PostIncrementOperation__Group_0_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPostIncrementOperationAccess().getOperandAssignment_0_0_1()); }
(rule__PostIncrementOperation__OperandAssignment_0_0_1)
{ after(grammarAccess.getPostIncrementOperationAccess().getOperandAssignment_0_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PostIncrementOperation__Group_0_0__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PostIncrementOperation__Group_0_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PostIncrementOperation__Group_0_0__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPostIncrementOperationAccess().getFeatureAssignment_0_0_2()); }
(rule__PostIncrementOperation__FeatureAssignment_0_0_2)
{ after(grammarAccess.getPostIncrementOperationAccess().getFeatureAssignment_0_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__MemberFeatureCall__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MemberFeatureCall__Group__0__Impl
	rule__MemberFeatureCall__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MemberFeatureCall__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMemberFeatureCallAccess().getPrimaryExpressionParserRuleCall_0()); }
	rulePrimaryExpression
{ after(grammarAccess.getMemberFeatureCallAccess().getPrimaryExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MemberFeatureCall__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MemberFeatureCall__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MemberFeatureCall__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMemberFeatureCallAccess().getAlternatives_1()); }
(rule__MemberFeatureCall__Alternatives_1)*
{ after(grammarAccess.getMemberFeatureCallAccess().getAlternatives_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__MemberFeatureCall__Group_1_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MemberFeatureCall__Group_1_0__0__Impl
	rule__MemberFeatureCall__Group_1_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MemberFeatureCall__Group_1_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMemberFeatureCallAccess().getGroup_1_0_0()); }
(rule__MemberFeatureCall__Group_1_0_0__0)
{ after(grammarAccess.getMemberFeatureCallAccess().getGroup_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MemberFeatureCall__Group_1_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MemberFeatureCall__Group_1_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MemberFeatureCall__Group_1_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMemberFeatureCallAccess().getValueAssignment_1_0_1()); }
(rule__MemberFeatureCall__ValueAssignment_1_0_1)
{ after(grammarAccess.getMemberFeatureCallAccess().getValueAssignment_1_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__MemberFeatureCall__Group_1_0_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MemberFeatureCall__Group_1_0_0__0__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MemberFeatureCall__Group_1_0_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMemberFeatureCallAccess().getGroup_1_0_0_0()); }
(rule__MemberFeatureCall__Group_1_0_0_0__0)
{ after(grammarAccess.getMemberFeatureCallAccess().getGroup_1_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__MemberFeatureCall__Group_1_0_0_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MemberFeatureCall__Group_1_0_0_0__0__Impl
	rule__MemberFeatureCall__Group_1_0_0_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MemberFeatureCall__Group_1_0_0_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMemberFeatureCallAccess().getAssignmentAssignableAction_1_0_0_0_0()); }
(

)
{ after(grammarAccess.getMemberFeatureCallAccess().getAssignmentAssignableAction_1_0_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MemberFeatureCall__Group_1_0_0_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MemberFeatureCall__Group_1_0_0_0__1__Impl
	rule__MemberFeatureCall__Group_1_0_0_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__MemberFeatureCall__Group_1_0_0_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMemberFeatureCallAccess().getFullStopKeyword_1_0_0_0_1()); }

	'.' 

{ after(grammarAccess.getMemberFeatureCallAccess().getFullStopKeyword_1_0_0_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MemberFeatureCall__Group_1_0_0_0__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MemberFeatureCall__Group_1_0_0_0__2__Impl
	rule__MemberFeatureCall__Group_1_0_0_0__3
;
finally {
	restoreStackSize(stackSize);
}

rule__MemberFeatureCall__Group_1_0_0_0__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMemberFeatureCallAccess().getFeatureAssignment_1_0_0_0_2()); }
(rule__MemberFeatureCall__FeatureAssignment_1_0_0_0_2)
{ after(grammarAccess.getMemberFeatureCallAccess().getFeatureAssignment_1_0_0_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MemberFeatureCall__Group_1_0_0_0__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MemberFeatureCall__Group_1_0_0_0__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MemberFeatureCall__Group_1_0_0_0__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMemberFeatureCallAccess().getOpSingleAssignParserRuleCall_1_0_0_0_3()); }
	ruleOpSingleAssign
{ after(grammarAccess.getMemberFeatureCallAccess().getOpSingleAssignParserRuleCall_1_0_0_0_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__MemberFeatureCall__Group_1_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MemberFeatureCall__Group_1_1__0__Impl
	rule__MemberFeatureCall__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MemberFeatureCall__Group_1_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMemberFeatureCallAccess().getGroup_1_1_0()); }
(rule__MemberFeatureCall__Group_1_1_0__0)
{ after(grammarAccess.getMemberFeatureCallAccess().getGroup_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MemberFeatureCall__Group_1_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MemberFeatureCall__Group_1_1__1__Impl
	rule__MemberFeatureCall__Group_1_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__MemberFeatureCall__Group_1_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMemberFeatureCallAccess().getFeatureAssignment_1_1_1()); }
(rule__MemberFeatureCall__FeatureAssignment_1_1_1)
{ after(grammarAccess.getMemberFeatureCallAccess().getFeatureAssignment_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MemberFeatureCall__Group_1_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MemberFeatureCall__Group_1_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MemberFeatureCall__Group_1_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMemberFeatureCallAccess().getGroup_1_1_2()); }
(rule__MemberFeatureCall__Group_1_1_2__0)?
{ after(grammarAccess.getMemberFeatureCallAccess().getGroup_1_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__MemberFeatureCall__Group_1_1_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MemberFeatureCall__Group_1_1_0__0__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MemberFeatureCall__Group_1_1_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMemberFeatureCallAccess().getGroup_1_1_0_0()); }
(rule__MemberFeatureCall__Group_1_1_0_0__0)
{ after(grammarAccess.getMemberFeatureCallAccess().getGroup_1_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__MemberFeatureCall__Group_1_1_0_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MemberFeatureCall__Group_1_1_0_0__0__Impl
	rule__MemberFeatureCall__Group_1_1_0_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MemberFeatureCall__Group_1_1_0_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMemberFeatureCallAccess().getMemberFeatureCallTargetAction_1_1_0_0_0()); }
(

)
{ after(grammarAccess.getMemberFeatureCallAccess().getMemberFeatureCallTargetAction_1_1_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MemberFeatureCall__Group_1_1_0_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MemberFeatureCall__Group_1_1_0_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MemberFeatureCall__Group_1_1_0_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMemberFeatureCallAccess().getFullStopKeyword_1_1_0_0_1()); }

	'.' 

{ after(grammarAccess.getMemberFeatureCallAccess().getFullStopKeyword_1_1_0_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__MemberFeatureCall__Group_1_1_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MemberFeatureCall__Group_1_1_2__0__Impl
	rule__MemberFeatureCall__Group_1_1_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MemberFeatureCall__Group_1_1_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMemberFeatureCallAccess().getExplicitOperationCallAssignment_1_1_2_0()); }
(rule__MemberFeatureCall__ExplicitOperationCallAssignment_1_1_2_0)
{ after(grammarAccess.getMemberFeatureCallAccess().getExplicitOperationCallAssignment_1_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MemberFeatureCall__Group_1_1_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MemberFeatureCall__Group_1_1_2__1__Impl
	rule__MemberFeatureCall__Group_1_1_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__MemberFeatureCall__Group_1_1_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMemberFeatureCallAccess().getGroup_1_1_2_1()); }
(rule__MemberFeatureCall__Group_1_1_2_1__0)?
{ after(grammarAccess.getMemberFeatureCallAccess().getGroup_1_1_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MemberFeatureCall__Group_1_1_2__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MemberFeatureCall__Group_1_1_2__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MemberFeatureCall__Group_1_1_2__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMemberFeatureCallAccess().getRightParenthesisKeyword_1_1_2_2()); }

	')' 

{ after(grammarAccess.getMemberFeatureCallAccess().getRightParenthesisKeyword_1_1_2_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__MemberFeatureCall__Group_1_1_2_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MemberFeatureCall__Group_1_1_2_1__0__Impl
	rule__MemberFeatureCall__Group_1_1_2_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MemberFeatureCall__Group_1_1_2_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMemberFeatureCallAccess().getArgumentsAssignment_1_1_2_1_0()); }
(rule__MemberFeatureCall__ArgumentsAssignment_1_1_2_1_0)
{ after(grammarAccess.getMemberFeatureCallAccess().getArgumentsAssignment_1_1_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MemberFeatureCall__Group_1_1_2_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MemberFeatureCall__Group_1_1_2_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MemberFeatureCall__Group_1_1_2_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMemberFeatureCallAccess().getGroup_1_1_2_1_1()); }
(rule__MemberFeatureCall__Group_1_1_2_1_1__0)*
{ after(grammarAccess.getMemberFeatureCallAccess().getGroup_1_1_2_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__MemberFeatureCall__Group_1_1_2_1_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MemberFeatureCall__Group_1_1_2_1_1__0__Impl
	rule__MemberFeatureCall__Group_1_1_2_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MemberFeatureCall__Group_1_1_2_1_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMemberFeatureCallAccess().getCommaKeyword_1_1_2_1_1_0()); }

	',' 

{ after(grammarAccess.getMemberFeatureCallAccess().getCommaKeyword_1_1_2_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MemberFeatureCall__Group_1_1_2_1_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MemberFeatureCall__Group_1_1_2_1_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MemberFeatureCall__Group_1_1_2_1_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMemberFeatureCallAccess().getArgumentsAssignment_1_1_2_1_1_1()); }
(rule__MemberFeatureCall__ArgumentsAssignment_1_1_2_1_1_1)
{ after(grammarAccess.getMemberFeatureCallAccess().getArgumentsAssignment_1_1_2_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__BlockExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BlockExpression__Group__0__Impl
	rule__BlockExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BlockExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBlockExpressionAccess().getBlockExpressionAction_0()); }
(

)
{ after(grammarAccess.getBlockExpressionAccess().getBlockExpressionAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BlockExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BlockExpression__Group__1__Impl
	rule__BlockExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__BlockExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBlockExpressionAccess().getLeftCurlyBracketKeyword_1()); }

	'{' 

{ after(grammarAccess.getBlockExpressionAccess().getLeftCurlyBracketKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BlockExpression__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BlockExpression__Group__2__Impl
	rule__BlockExpression__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__BlockExpression__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBlockExpressionAccess().getGroup_2()); }
(rule__BlockExpression__Group_2__0)*
{ after(grammarAccess.getBlockExpressionAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BlockExpression__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BlockExpression__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BlockExpression__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBlockExpressionAccess().getRightCurlyBracketKeyword_3()); }

	'}' 

{ after(grammarAccess.getBlockExpressionAccess().getRightCurlyBracketKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__BlockExpression__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BlockExpression__Group_2__0__Impl
	rule__BlockExpression__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BlockExpression__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBlockExpressionAccess().getExpressionsAssignment_2_0()); }
(rule__BlockExpression__ExpressionsAssignment_2_0)
{ after(grammarAccess.getBlockExpressionAccess().getExpressionsAssignment_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BlockExpression__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BlockExpression__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BlockExpression__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBlockExpressionAccess().getSemicolonKeyword_2_1()); }
(
	';' 
)?
{ after(grammarAccess.getBlockExpressionAccess().getSemicolonKeyword_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__VariableDeclarations__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableDeclarations__Group__0__Impl
	rule__VariableDeclarations__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclarations__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableDeclarationsAccess().getVariableDeclarationsAction_0()); }
(

)
{ after(grammarAccess.getVariableDeclarationsAccess().getVariableDeclarationsAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VariableDeclarations__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableDeclarations__Group__1__Impl
	rule__VariableDeclarations__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclarations__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableDeclarationsAccess().getVarKeyword_1()); }

	'var' 

{ after(grammarAccess.getVariableDeclarationsAccess().getVarKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VariableDeclarations__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableDeclarations__Group__2__Impl
	rule__VariableDeclarations__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclarations__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableDeclarationsAccess().getDeclarationsAssignment_2()); }
(rule__VariableDeclarations__DeclarationsAssignment_2)
{ after(grammarAccess.getVariableDeclarationsAccess().getDeclarationsAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VariableDeclarations__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableDeclarations__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclarations__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableDeclarationsAccess().getGroup_3()); }
(rule__VariableDeclarations__Group_3__0)*
{ after(grammarAccess.getVariableDeclarationsAccess().getGroup_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__VariableDeclarations__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableDeclarations__Group_3__0__Impl
	rule__VariableDeclarations__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclarations__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableDeclarationsAccess().getCommaKeyword_3_0()); }

	',' 

{ after(grammarAccess.getVariableDeclarationsAccess().getCommaKeyword_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VariableDeclarations__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableDeclarations__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclarations__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableDeclarationsAccess().getDeclarationsAssignment_3_1()); }
(rule__VariableDeclarations__DeclarationsAssignment_3_1)
{ after(grammarAccess.getVariableDeclarationsAccess().getDeclarationsAssignment_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__VariableDeclaration__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableDeclaration__Group__0__Impl
	rule__VariableDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableDeclarationAccess().getVariableDeclarationAction_0()); }
(

)
{ after(grammarAccess.getVariableDeclarationAccess().getVariableDeclarationAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VariableDeclaration__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableDeclaration__Group__1__Impl
	rule__VariableDeclaration__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableDeclarationAccess().getNameAssignment_1()); }
(rule__VariableDeclaration__NameAssignment_1)
{ after(grammarAccess.getVariableDeclarationAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VariableDeclaration__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableDeclaration__Group__2__Impl
	rule__VariableDeclaration__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableDeclarationAccess().getGroup_2()); }
(rule__VariableDeclaration__Group_2__0)?
{ after(grammarAccess.getVariableDeclarationAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VariableDeclaration__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableDeclaration__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableDeclarationAccess().getGroup_3()); }
(rule__VariableDeclaration__Group_3__0)?
{ after(grammarAccess.getVariableDeclarationAccess().getGroup_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__VariableDeclaration__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableDeclaration__Group_2__0__Impl
	rule__VariableDeclaration__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableDeclarationAccess().getColonKeyword_2_0()); }

	':' 

{ after(grammarAccess.getVariableDeclarationAccess().getColonKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VariableDeclaration__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableDeclaration__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableDeclarationAccess().getTypeAssignment_2_1()); }
(rule__VariableDeclaration__TypeAssignment_2_1)
{ after(grammarAccess.getVariableDeclarationAccess().getTypeAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__VariableDeclaration__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableDeclaration__Group_3__0__Impl
	rule__VariableDeclaration__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableDeclarationAccess().getEqualsSignKeyword_3_0()); }

	'=' 

{ after(grammarAccess.getVariableDeclarationAccess().getEqualsSignKeyword_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VariableDeclaration__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableDeclaration__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableDeclarationAccess().getExpressionAssignment_3_1()); }
(rule__VariableDeclaration__ExpressionAssignment_3_1)
{ after(grammarAccess.getVariableDeclarationAccess().getExpressionAssignment_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ParenthesizedExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParenthesizedExpression__Group__0__Impl
	rule__ParenthesizedExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ParenthesizedExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParenthesizedExpressionAccess().getLeftParenthesisKeyword_0()); }

	'(' 

{ after(grammarAccess.getParenthesizedExpressionAccess().getLeftParenthesisKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ParenthesizedExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParenthesizedExpression__Group__1__Impl
	rule__ParenthesizedExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ParenthesizedExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParenthesizedExpressionAccess().getExpressionParserRuleCall_1()); }
	ruleExpression
{ after(grammarAccess.getParenthesizedExpressionAccess().getExpressionParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ParenthesizedExpression__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParenthesizedExpression__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ParenthesizedExpression__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParenthesizedExpressionAccess().getRightParenthesisKeyword_2()); }

	')' 

{ after(grammarAccess.getParenthesizedExpressionAccess().getRightParenthesisKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__FeatureCall__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FeatureCall__Group__0__Impl
	rule__FeatureCall__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FeatureCall__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFeatureCallAccess().getFeatureCallAction_0()); }
(

)
{ after(grammarAccess.getFeatureCallAccess().getFeatureCallAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FeatureCall__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FeatureCall__Group__1__Impl
	rule__FeatureCall__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__FeatureCall__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFeatureCallAccess().getFeatureAssignment_1()); }
(rule__FeatureCall__FeatureAssignment_1)
{ after(grammarAccess.getFeatureCallAccess().getFeatureAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FeatureCall__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FeatureCall__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FeatureCall__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFeatureCallAccess().getGroup_2()); }
(rule__FeatureCall__Group_2__0)?
{ after(grammarAccess.getFeatureCallAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__FeatureCall__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FeatureCall__Group_2__0__Impl
	rule__FeatureCall__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FeatureCall__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFeatureCallAccess().getExplicitOperationCallAssignment_2_0()); }
(rule__FeatureCall__ExplicitOperationCallAssignment_2_0)
{ after(grammarAccess.getFeatureCallAccess().getExplicitOperationCallAssignment_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FeatureCall__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FeatureCall__Group_2__1__Impl
	rule__FeatureCall__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__FeatureCall__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFeatureCallAccess().getGroup_2_1()); }
(rule__FeatureCall__Group_2_1__0)?
{ after(grammarAccess.getFeatureCallAccess().getGroup_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FeatureCall__Group_2__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FeatureCall__Group_2__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FeatureCall__Group_2__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFeatureCallAccess().getRightParenthesisKeyword_2_2()); }

	')' 

{ after(grammarAccess.getFeatureCallAccess().getRightParenthesisKeyword_2_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__FeatureCall__Group_2_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FeatureCall__Group_2_1__0__Impl
	rule__FeatureCall__Group_2_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FeatureCall__Group_2_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFeatureCallAccess().getArgumentsAssignment_2_1_0()); }
(rule__FeatureCall__ArgumentsAssignment_2_1_0)
{ after(grammarAccess.getFeatureCallAccess().getArgumentsAssignment_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FeatureCall__Group_2_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FeatureCall__Group_2_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FeatureCall__Group_2_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFeatureCallAccess().getGroup_2_1_1()); }
(rule__FeatureCall__Group_2_1_1__0)*
{ after(grammarAccess.getFeatureCallAccess().getGroup_2_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__FeatureCall__Group_2_1_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FeatureCall__Group_2_1_1__0__Impl
	rule__FeatureCall__Group_2_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FeatureCall__Group_2_1_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFeatureCallAccess().getCommaKeyword_2_1_1_0()); }

	',' 

{ after(grammarAccess.getFeatureCallAccess().getCommaKeyword_2_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FeatureCall__Group_2_1_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FeatureCall__Group_2_1_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FeatureCall__Group_2_1_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFeatureCallAccess().getArgumentsAssignment_2_1_1_1()); }
(rule__FeatureCall__ArgumentsAssignment_2_1_1_1)
{ after(grammarAccess.getFeatureCallAccess().getArgumentsAssignment_2_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ConstructorCall__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConstructorCall__Group__0__Impl
	rule__ConstructorCall__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstructorCall__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstructorCallAccess().getConstructorCallAction_0()); }
(

)
{ after(grammarAccess.getConstructorCallAccess().getConstructorCallAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ConstructorCall__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConstructorCall__Group__1__Impl
	rule__ConstructorCall__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstructorCall__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstructorCallAccess().getNewKeyword_1()); }

	'new' 

{ after(grammarAccess.getConstructorCallAccess().getNewKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ConstructorCall__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConstructorCall__Group__2__Impl
	rule__ConstructorCall__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstructorCall__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstructorCallAccess().getConstructorAssignment_2()); }
(rule__ConstructorCall__ConstructorAssignment_2)
{ after(grammarAccess.getConstructorCallAccess().getConstructorAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ConstructorCall__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConstructorCall__Group__3__Impl
	rule__ConstructorCall__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstructorCall__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstructorCallAccess().getLeftParenthesisKeyword_3()); }

	'(' 

{ after(grammarAccess.getConstructorCallAccess().getLeftParenthesisKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ConstructorCall__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConstructorCall__Group__4__Impl
	rule__ConstructorCall__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstructorCall__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstructorCallAccess().getGroup_4()); }
(rule__ConstructorCall__Group_4__0)?
{ after(grammarAccess.getConstructorCallAccess().getGroup_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ConstructorCall__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConstructorCall__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstructorCall__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstructorCallAccess().getRightParenthesisKeyword_5()); }

	')' 

{ after(grammarAccess.getConstructorCallAccess().getRightParenthesisKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}














rule__ConstructorCall__Group_4__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConstructorCall__Group_4__0__Impl
	rule__ConstructorCall__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstructorCall__Group_4__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstructorCallAccess().getArgumentsAssignment_4_0()); }
(rule__ConstructorCall__ArgumentsAssignment_4_0)
{ after(grammarAccess.getConstructorCallAccess().getArgumentsAssignment_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ConstructorCall__Group_4__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConstructorCall__Group_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstructorCall__Group_4__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstructorCallAccess().getGroup_4_1()); }
(rule__ConstructorCall__Group_4_1__0)*
{ after(grammarAccess.getConstructorCallAccess().getGroup_4_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ConstructorCall__Group_4_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConstructorCall__Group_4_1__0__Impl
	rule__ConstructorCall__Group_4_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstructorCall__Group_4_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstructorCallAccess().getCommaKeyword_4_1_0()); }

	',' 

{ after(grammarAccess.getConstructorCallAccess().getCommaKeyword_4_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ConstructorCall__Group_4_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConstructorCall__Group_4_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstructorCall__Group_4_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstructorCallAccess().getArgumentsAssignment_4_1_1()); }
(rule__ConstructorCall__ArgumentsAssignment_4_1_1)
{ after(grammarAccess.getConstructorCallAccess().getArgumentsAssignment_4_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__BooleanLiteral__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BooleanLiteral__Group__0__Impl
	rule__BooleanLiteral__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanLiteral__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBooleanLiteralAccess().getBooleanLiteralAction_0()); }
(

)
{ after(grammarAccess.getBooleanLiteralAccess().getBooleanLiteralAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BooleanLiteral__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BooleanLiteral__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanLiteral__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBooleanLiteralAccess().getAlternatives_1()); }
(rule__BooleanLiteral__Alternatives_1)
{ after(grammarAccess.getBooleanLiteralAccess().getAlternatives_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__NullLiteral__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NullLiteral__Group__0__Impl
	rule__NullLiteral__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NullLiteral__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNullLiteralAccess().getNullLiteralAction_0()); }
(

)
{ after(grammarAccess.getNullLiteralAccess().getNullLiteralAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NullLiteral__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NullLiteral__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NullLiteral__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNullLiteralAccess().getNullKeyword_1()); }

	'null' 

{ after(grammarAccess.getNullLiteralAccess().getNullKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__IntLiteral__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IntLiteral__Group__0__Impl
	rule__IntLiteral__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IntLiteral__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntLiteralAccess().getIntLiteralAction_0()); }
(

)
{ after(grammarAccess.getIntLiteralAccess().getIntLiteralAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IntLiteral__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IntLiteral__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IntLiteral__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntLiteralAccess().getAlternatives_1()); }
(rule__IntLiteral__Alternatives_1)
{ after(grammarAccess.getIntLiteralAccess().getAlternatives_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__FloatLiteral__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FloatLiteral__Group__0__Impl
	rule__FloatLiteral__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FloatLiteral__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFloatLiteralAccess().getFloatLiteralAction_0()); }
(

)
{ after(grammarAccess.getFloatLiteralAccess().getFloatLiteralAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FloatLiteral__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FloatLiteral__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FloatLiteral__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFloatLiteralAccess().getValueAssignment_1()); }
(rule__FloatLiteral__ValueAssignment_1)
{ after(grammarAccess.getFloatLiteralAccess().getValueAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__StringLiteral__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StringLiteral__Group__0__Impl
	rule__StringLiteral__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__StringLiteral__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStringLiteralAccess().getStringLiteralAction_0()); }
(

)
{ after(grammarAccess.getStringLiteralAccess().getStringLiteralAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__StringLiteral__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StringLiteral__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__StringLiteral__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStringLiteralAccess().getValueAssignment_1()); }
(rule__StringLiteral__ValueAssignment_1)
{ after(grammarAccess.getStringLiteralAccess().getValueAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__RegularExpressionLiteral__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RegularExpressionLiteral__Group__0__Impl
	rule__RegularExpressionLiteral__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RegularExpressionLiteral__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRegularExpressionLiteralAccess().getRegularExpressionLiteralAction_0()); }
(

)
{ after(grammarAccess.getRegularExpressionLiteralAccess().getRegularExpressionLiteralAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RegularExpressionLiteral__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RegularExpressionLiteral__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RegularExpressionLiteral__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRegularExpressionLiteralAccess().getValueAssignment_1()); }
(rule__RegularExpressionLiteral__ValueAssignment_1)
{ after(grammarAccess.getRegularExpressionLiteralAccess().getValueAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ArrayLiteral__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArrayLiteral__Group__0__Impl
	rule__ArrayLiteral__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayLiteral__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayLiteralAccess().getArrayLiteralAction_0()); }
(

)
{ after(grammarAccess.getArrayLiteralAccess().getArrayLiteralAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ArrayLiteral__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArrayLiteral__Group__1__Impl
	rule__ArrayLiteral__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayLiteral__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayLiteralAccess().getLeftSquareBracketKeyword_1()); }

	'[' 

{ after(grammarAccess.getArrayLiteralAccess().getLeftSquareBracketKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ArrayLiteral__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArrayLiteral__Group__2__Impl
	rule__ArrayLiteral__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayLiteral__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayLiteralAccess().getElementsAssignment_2()); }
(rule__ArrayLiteral__ElementsAssignment_2)?
{ after(grammarAccess.getArrayLiteralAccess().getElementsAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ArrayLiteral__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArrayLiteral__Group__3__Impl
	rule__ArrayLiteral__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayLiteral__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayLiteralAccess().getGroup_3()); }
(rule__ArrayLiteral__Group_3__0)*
{ after(grammarAccess.getArrayLiteralAccess().getGroup_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ArrayLiteral__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArrayLiteral__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayLiteral__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayLiteralAccess().getRightSquareBracketKeyword_4()); }

	']' 

{ after(grammarAccess.getArrayLiteralAccess().getRightSquareBracketKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__ArrayLiteral__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArrayLiteral__Group_3__0__Impl
	rule__ArrayLiteral__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayLiteral__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayLiteralAccess().getCommaKeyword_3_0()); }

	',' 

{ after(grammarAccess.getArrayLiteralAccess().getCommaKeyword_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ArrayLiteral__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArrayLiteral__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayLiteral__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayLiteralAccess().getElementsAssignment_3_1()); }
(rule__ArrayLiteral__ElementsAssignment_3_1)
{ after(grammarAccess.getArrayLiteralAccess().getElementsAssignment_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__QualifiedName__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedName__Group__0__Impl
	rule__QualifiedName__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedNameAccess().getValidIDParserRuleCall_0()); }
	ruleValidID
{ after(grammarAccess.getQualifiedNameAccess().getValidIDParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__QualifiedName__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedName__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedNameAccess().getGroup_1()); }
(rule__QualifiedName__Group_1__0)*
{ after(grammarAccess.getQualifiedNameAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__QualifiedName__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedName__Group_1__0__Impl
	rule__QualifiedName__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedNameAccess().getFullStopKeyword_1_0()); }

	'.' 

{ after(grammarAccess.getQualifiedNameAccess().getFullStopKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__QualifiedName__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedName__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedNameAccess().getValidIDParserRuleCall_1_1()); }
	ruleValidID
{ after(grammarAccess.getQualifiedNameAccess().getValidIDParserRuleCall_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}







rule__File__BlockExpressionAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFileAccess().getBlockExpressionBlockExpressionParserRuleCall_0()); }
	ruleBlockExpression{ after(grammarAccess.getFileAccess().getBlockExpressionBlockExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TypeReference__TypeAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeReferenceAccess().getTypeQualifiedNameParserRuleCall_0_0()); }
	ruleQualifiedName{ after(grammarAccess.getTypeReferenceAccess().getTypeQualifiedNameParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TypeReference__ArgumentsAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeReferenceAccess().getArgumentsTypeReferenceParserRuleCall_1_1_0()); }
	ruleTypeReference{ after(grammarAccess.getTypeReferenceAccess().getArgumentsTypeReferenceParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TypeReference__ArgumentsAssignment_1_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeReferenceAccess().getArgumentsTypeReferenceParserRuleCall_1_2_1_0()); }
	ruleTypeReference{ after(grammarAccess.getTypeReferenceAccess().getArgumentsTypeReferenceParserRuleCall_1_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__FeatureAssignment_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentAccess().getFeatureFeatureCrossReference_0_1_0()); }
(
{ before(grammarAccess.getAssignmentAccess().getFeatureFeatureIdOrSuperParserRuleCall_0_1_0_1()); }
	ruleIdOrSuper{ after(grammarAccess.getAssignmentAccess().getFeatureFeatureIdOrSuperParserRuleCall_0_1_0_1()); }
)
{ after(grammarAccess.getAssignmentAccess().getFeatureFeatureCrossReference_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__ValueAssignment_0_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentAccess().getValueAssignmentParserRuleCall_0_3_0()); }
	ruleAssignment{ after(grammarAccess.getAssignmentAccess().getValueAssignmentParserRuleCall_0_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__FeatureAssignment_1_1_0_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentAccess().getFeatureOpMultiAssignParserRuleCall_1_1_0_0_1_0()); }
	ruleOpMultiAssign{ after(grammarAccess.getAssignmentAccess().getFeatureOpMultiAssignParserRuleCall_1_1_0_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__RightAssignment_1_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentAccess().getRightAssignmentParserRuleCall_1_1_1_0()); }
	ruleAssignment{ after(grammarAccess.getAssignmentAccess().getRightAssignmentParserRuleCall_1_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__FeatureAssignment_1_0_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrExpressionAccess().getFeatureOpOrParserRuleCall_1_0_0_1_0()); }
	ruleOpOr{ after(grammarAccess.getOrExpressionAccess().getFeatureOpOrParserRuleCall_1_0_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__RightAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrExpressionAccess().getRightAndExpressionParserRuleCall_1_1_0()); }
	ruleAndExpression{ after(grammarAccess.getOrExpressionAccess().getRightAndExpressionParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__FeatureAssignment_1_0_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndExpressionAccess().getFeatureOpAndParserRuleCall_1_0_0_1_0()); }
	ruleOpAnd{ after(grammarAccess.getAndExpressionAccess().getFeatureOpAndParserRuleCall_1_0_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__RightAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndExpressionAccess().getRightOtherOperatorExpressionParserRuleCall_1_1_0()); }
	ruleOtherOperatorExpression{ after(grammarAccess.getAndExpressionAccess().getRightOtherOperatorExpressionParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__OtherOperatorExpression__FeatureAssignment_1_0_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOtherOperatorExpressionAccess().getFeatureOpOtherParserRuleCall_1_0_0_1_0()); }
	ruleOpOther{ after(grammarAccess.getOtherOperatorExpressionAccess().getFeatureOpOtherParserRuleCall_1_0_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__OtherOperatorExpression__RightAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOtherOperatorExpressionAccess().getRightCompareExpressionParserRuleCall_1_1_0()); }
	ruleCompareExpression{ after(grammarAccess.getOtherOperatorExpressionAccess().getRightCompareExpressionParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CompareExpression__FeatureAssignment_1_0_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompareExpressionAccess().getFeatureOpCompareParserRuleCall_1_0_0_1_0()); }
	ruleOpCompare{ after(grammarAccess.getCompareExpressionAccess().getFeatureOpCompareParserRuleCall_1_0_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CompareExpression__RightAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompareExpressionAccess().getRightBitwiseExpressionParserRuleCall_1_1_0()); }
	ruleBitwiseExpression{ after(grammarAccess.getCompareExpressionAccess().getRightBitwiseExpressionParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BitwiseExpression__FeatureAssignment_1_0_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBitwiseExpressionAccess().getFeatureOpBitwiseParserRuleCall_1_0_0_1_0()); }
	ruleOpBitwise{ after(grammarAccess.getBitwiseExpressionAccess().getFeatureOpBitwiseParserRuleCall_1_0_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BitwiseExpression__RightAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBitwiseExpressionAccess().getRightBitshiftExpressionParserRuleCall_1_1_0()); }
	ruleBitshiftExpression{ after(grammarAccess.getBitwiseExpressionAccess().getRightBitshiftExpressionParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BitshiftExpression__FeatureAssignment_1_0_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBitshiftExpressionAccess().getFeatureOpBitshiftParserRuleCall_1_0_0_1_0()); }
	ruleOpBitshift{ after(grammarAccess.getBitshiftExpressionAccess().getFeatureOpBitshiftParserRuleCall_1_0_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BitshiftExpression__RightAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBitshiftExpressionAccess().getRightAddExpressionParserRuleCall_1_1_0()); }
	ruleAddExpression{ after(grammarAccess.getBitshiftExpressionAccess().getRightAddExpressionParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AddExpression__FeatureAssignment_1_0_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAddExpressionAccess().getFeatureOpAddParserRuleCall_1_0_0_1_0()); }
	ruleOpAdd{ after(grammarAccess.getAddExpressionAccess().getFeatureOpAddParserRuleCall_1_0_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AddExpression__RightAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAddExpressionAccess().getRightSubtractExpressionParserRuleCall_1_1_0()); }
	ruleSubtractExpression{ after(grammarAccess.getAddExpressionAccess().getRightSubtractExpressionParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SubtractExpression__FeatureAssignment_1_0_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubtractExpressionAccess().getFeatureOpSubtractParserRuleCall_1_0_0_1_0()); }
	ruleOpSubtract{ after(grammarAccess.getSubtractExpressionAccess().getFeatureOpSubtractParserRuleCall_1_0_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SubtractExpression__RightAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubtractExpressionAccess().getRightMultiplyExpressionParserRuleCall_1_1_0()); }
	ruleMultiplyExpression{ after(grammarAccess.getSubtractExpressionAccess().getRightMultiplyExpressionParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplyExpression__FeatureAssignment_1_0_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplyExpressionAccess().getFeatureOpMultiplyParserRuleCall_1_0_0_1_0()); }
	ruleOpMultiply{ after(grammarAccess.getMultiplyExpressionAccess().getFeatureOpMultiplyParserRuleCall_1_0_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplyExpression__RightAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplyExpressionAccess().getRightDivideExpressionParserRuleCall_1_1_0()); }
	ruleDivideExpression{ after(grammarAccess.getMultiplyExpressionAccess().getRightDivideExpressionParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DivideExpression__FeatureAssignment_1_0_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDivideExpressionAccess().getFeatureOpDivideParserRuleCall_1_0_0_1_0()); }
	ruleOpDivide{ after(grammarAccess.getDivideExpressionAccess().getFeatureOpDivideParserRuleCall_1_0_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DivideExpression__RightAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDivideExpressionAccess().getRightModuloExpressionParserRuleCall_1_1_0()); }
	ruleModuloExpression{ after(grammarAccess.getDivideExpressionAccess().getRightModuloExpressionParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ModuloExpression__FeatureAssignment_1_0_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModuloExpressionAccess().getFeatureOpModuloParserRuleCall_1_0_0_1_0()); }
	ruleOpModulo{ after(grammarAccess.getModuloExpressionAccess().getFeatureOpModuloParserRuleCall_1_0_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ModuloExpression__RightAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModuloExpressionAccess().getRightUnaryOperationParserRuleCall_1_1_0()); }
	ruleUnaryOperation{ after(grammarAccess.getModuloExpressionAccess().getRightUnaryOperationParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryOperation__FeatureAssignment_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryOperationAccess().getFeatureOpUnaryParserRuleCall_0_1_0()); }
	ruleOpUnary{ after(grammarAccess.getUnaryOperationAccess().getFeatureOpUnaryParserRuleCall_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryOperation__OperandAssignment_0_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryOperationAccess().getOperandPreIncrementOperationParserRuleCall_0_2_0()); }
	rulePreIncrementOperation{ after(grammarAccess.getUnaryOperationAccess().getOperandPreIncrementOperationParserRuleCall_0_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PreIncrementOperation__FeatureAssignment_0_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPreIncrementOperationAccess().getFeatureOpIncrementParserRuleCall_0_0_1_0()); }
	ruleOpIncrement{ after(grammarAccess.getPreIncrementOperationAccess().getFeatureOpIncrementParserRuleCall_0_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PreIncrementOperation__OperandAssignment_0_0_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPreIncrementOperationAccess().getOperandPostIncrementOperationParserRuleCall_0_0_2_0()); }
	rulePostIncrementOperation{ after(grammarAccess.getPreIncrementOperationAccess().getOperandPostIncrementOperationParserRuleCall_0_0_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PostIncrementOperation__OperandAssignment_0_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPostIncrementOperationAccess().getOperandMemberFeatureCallParserRuleCall_0_0_1_0()); }
	ruleMemberFeatureCall{ after(grammarAccess.getPostIncrementOperationAccess().getOperandMemberFeatureCallParserRuleCall_0_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PostIncrementOperation__FeatureAssignment_0_0_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPostIncrementOperationAccess().getFeatureOpIncrementParserRuleCall_0_0_2_0()); }
	ruleOpIncrement{ after(grammarAccess.getPostIncrementOperationAccess().getFeatureOpIncrementParserRuleCall_0_0_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MemberFeatureCall__FeatureAssignment_1_0_0_0_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMemberFeatureCallAccess().getFeatureFeatureCrossReference_1_0_0_0_2_0()); }
(
{ before(grammarAccess.getMemberFeatureCallAccess().getFeatureFeatureValidIDParserRuleCall_1_0_0_0_2_0_1()); }
	ruleValidID{ after(grammarAccess.getMemberFeatureCallAccess().getFeatureFeatureValidIDParserRuleCall_1_0_0_0_2_0_1()); }
)
{ after(grammarAccess.getMemberFeatureCallAccess().getFeatureFeatureCrossReference_1_0_0_0_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MemberFeatureCall__ValueAssignment_1_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMemberFeatureCallAccess().getValueAssignmentParserRuleCall_1_0_1_0()); }
	ruleAssignment{ after(grammarAccess.getMemberFeatureCallAccess().getValueAssignmentParserRuleCall_1_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MemberFeatureCall__FeatureAssignment_1_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMemberFeatureCallAccess().getFeatureValidIDParserRuleCall_1_1_1_0()); }
	ruleValidID{ after(grammarAccess.getMemberFeatureCallAccess().getFeatureValidIDParserRuleCall_1_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MemberFeatureCall__ExplicitOperationCallAssignment_1_1_2_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMemberFeatureCallAccess().getExplicitOperationCallLeftParenthesisKeyword_1_1_2_0_0()); }
(
{ before(grammarAccess.getMemberFeatureCallAccess().getExplicitOperationCallLeftParenthesisKeyword_1_1_2_0_0()); }

	'(' 

{ after(grammarAccess.getMemberFeatureCallAccess().getExplicitOperationCallLeftParenthesisKeyword_1_1_2_0_0()); }
)

{ after(grammarAccess.getMemberFeatureCallAccess().getExplicitOperationCallLeftParenthesisKeyword_1_1_2_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MemberFeatureCall__ArgumentsAssignment_1_1_2_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMemberFeatureCallAccess().getArgumentsExpressionParserRuleCall_1_1_2_1_0_0()); }
	ruleExpression{ after(grammarAccess.getMemberFeatureCallAccess().getArgumentsExpressionParserRuleCall_1_1_2_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MemberFeatureCall__ArgumentsAssignment_1_1_2_1_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMemberFeatureCallAccess().getArgumentsExpressionParserRuleCall_1_1_2_1_1_1_0()); }
	ruleExpression{ after(grammarAccess.getMemberFeatureCallAccess().getArgumentsExpressionParserRuleCall_1_1_2_1_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BlockExpression__ExpressionsAssignment_2_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBlockExpressionAccess().getExpressionsExpressionInsideBlockParserRuleCall_2_0_0()); }
	ruleExpressionInsideBlock{ after(grammarAccess.getBlockExpressionAccess().getExpressionsExpressionInsideBlockParserRuleCall_2_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclarations__DeclarationsAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableDeclarationsAccess().getDeclarationsVariableDeclarationParserRuleCall_2_0()); }
	ruleVariableDeclaration{ after(grammarAccess.getVariableDeclarationsAccess().getDeclarationsVariableDeclarationParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclarations__DeclarationsAssignment_3_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableDeclarationsAccess().getDeclarationsVariableDeclarationParserRuleCall_3_1_0()); }
	ruleVariableDeclaration{ after(grammarAccess.getVariableDeclarationsAccess().getDeclarationsVariableDeclarationParserRuleCall_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableDeclarationAccess().getNameValidIDParserRuleCall_1_0()); }
	ruleValidID{ after(grammarAccess.getVariableDeclarationAccess().getNameValidIDParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__TypeAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableDeclarationAccess().getTypeTypeReferenceParserRuleCall_2_1_0()); }
	ruleTypeReference{ after(grammarAccess.getVariableDeclarationAccess().getTypeTypeReferenceParserRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__ExpressionAssignment_3_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableDeclarationAccess().getExpressionExpressionParserRuleCall_3_1_0()); }
	ruleExpression{ after(grammarAccess.getVariableDeclarationAccess().getExpressionExpressionParserRuleCall_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FeatureCall__FeatureAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFeatureCallAccess().getFeatureFeatureCrossReference_1_0()); }
(
{ before(grammarAccess.getFeatureCallAccess().getFeatureFeatureIdOrSuperParserRuleCall_1_0_1()); }
	ruleIdOrSuper{ after(grammarAccess.getFeatureCallAccess().getFeatureFeatureIdOrSuperParserRuleCall_1_0_1()); }
)
{ after(grammarAccess.getFeatureCallAccess().getFeatureFeatureCrossReference_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FeatureCall__ExplicitOperationCallAssignment_2_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFeatureCallAccess().getExplicitOperationCallLeftParenthesisKeyword_2_0_0()); }
(
{ before(grammarAccess.getFeatureCallAccess().getExplicitOperationCallLeftParenthesisKeyword_2_0_0()); }

	'(' 

{ after(grammarAccess.getFeatureCallAccess().getExplicitOperationCallLeftParenthesisKeyword_2_0_0()); }
)

{ after(grammarAccess.getFeatureCallAccess().getExplicitOperationCallLeftParenthesisKeyword_2_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FeatureCall__ArgumentsAssignment_2_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFeatureCallAccess().getArgumentsExpressionParserRuleCall_2_1_0_0()); }
	ruleExpression{ after(grammarAccess.getFeatureCallAccess().getArgumentsExpressionParserRuleCall_2_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FeatureCall__ArgumentsAssignment_2_1_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFeatureCallAccess().getArgumentsExpressionParserRuleCall_2_1_1_1_0()); }
	ruleExpression{ after(grammarAccess.getFeatureCallAccess().getArgumentsExpressionParserRuleCall_2_1_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ConstructorCall__ConstructorAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstructorCallAccess().getConstructorQualifiedNameParserRuleCall_2_0()); }
	ruleQualifiedName{ after(grammarAccess.getConstructorCallAccess().getConstructorQualifiedNameParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ConstructorCall__ArgumentsAssignment_4_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstructorCallAccess().getArgumentsExpressionParserRuleCall_4_0_0()); }
	ruleExpression{ after(grammarAccess.getConstructorCallAccess().getArgumentsExpressionParserRuleCall_4_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ConstructorCall__ArgumentsAssignment_4_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstructorCallAccess().getArgumentsExpressionParserRuleCall_4_1_1_0()); }
	ruleExpression{ after(grammarAccess.getConstructorCallAccess().getArgumentsExpressionParserRuleCall_4_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanLiteral__IsTrueAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBooleanLiteralAccess().getIsTrueTrueKeyword_1_1_0()); }
(
{ before(grammarAccess.getBooleanLiteralAccess().getIsTrueTrueKeyword_1_1_0()); }

	'true' 

{ after(grammarAccess.getBooleanLiteralAccess().getIsTrueTrueKeyword_1_1_0()); }
)

{ after(grammarAccess.getBooleanLiteralAccess().getIsTrueTrueKeyword_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IntLiteral__ValueAssignment_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntLiteralAccess().getValueINTTerminalRuleCall_1_0_0()); }
	RULE_INT{ after(grammarAccess.getIntLiteralAccess().getValueINTTerminalRuleCall_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FloatLiteral__ValueAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFloatLiteralAccess().getValueFLOATTerminalRuleCall_1_0()); }
	RULE_FLOAT{ after(grammarAccess.getFloatLiteralAccess().getValueFLOATTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__StringLiteral__ValueAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStringLiteralAccess().getValueSTRINGTerminalRuleCall_1_0()); }
	RULE_STRING{ after(grammarAccess.getStringLiteralAccess().getValueSTRINGTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RegularExpressionLiteral__ValueAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRegularExpressionLiteralAccess().getValueREGULAR_EXPRESSIONTerminalRuleCall_1_0()); }
	RULE_REGULAR_EXPRESSION{ after(grammarAccess.getRegularExpressionLiteralAccess().getValueREGULAR_EXPRESSIONTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayLiteral__ElementsAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayLiteralAccess().getElementsExpressionParserRuleCall_2_0()); }
	ruleExpression{ after(grammarAccess.getArrayLiteralAccess().getElementsExpressionParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayLiteral__ElementsAssignment_3_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayLiteralAccess().getElementsExpressionParserRuleCall_3_1_0()); }
	ruleExpression{ after(grammarAccess.getArrayLiteralAccess().getElementsExpressionParserRuleCall_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_ID : ('a'..'z'|'A'..'Z'|'$'|'_') ('a'..'z'|'A'..'Z'|'$'|'_'|'0'..'9')*;

RULE_FLOAT : (RULE_INT 'e' RULE_INT|RULE_INT? '.' RULE_INT);

RULE_HEX : '0x' ('0'..'9'|'A'..'F')+;

RULE_INT : '-'? ('0'..'9')+;

RULE_REGULAR_EXPRESSION : '~/' ('\\/'|~('/'))+ '/' ('i'|'g'|'m'|'s'|'u')*;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


