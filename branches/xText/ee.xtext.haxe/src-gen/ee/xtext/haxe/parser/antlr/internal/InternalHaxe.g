/*
* generated by Xtext
*/
grammar InternalHaxe;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package ee.xtext.haxe.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package ee.xtext.haxe.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import ee.xtext.haxe.services.HaxeGrammarAccess;

}

@parser::members {

 	private HaxeGrammarAccess grammarAccess;
 	
    public InternalHaxeParser(TokenStream input, HaxeGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "File";	
   	}
   	
   	@Override
   	protected HaxeGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleFile
entryRuleFile returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFileRule()); }
	 iv_ruleFile=ruleFile 
	 { $current=$iv_ruleFile.current; } 
	 EOF 
;

// Rule File
ruleFile returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getFileAccess().getBlockExpressionBlockExpressionParserRuleCall_0()); 
	    }
		lv_blockExpression_0_0=ruleBlockExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFileRule());
	        }
       		add(
       			$current, 
       			"blockExpression",
        		lv_blockExpression_0_0, 
        		"BlockExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)*
;





// Entry rule entryRuleTypeReference
entryRuleTypeReference returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTypeReferenceRule()); }
	 iv_ruleTypeReference=ruleTypeReference 
	 { $current=$iv_ruleTypeReference.current; } 
	 EOF 
;

// Rule TypeReference
ruleTypeReference returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getTypeReferenceAccess().getTypeQualifiedNameParserRuleCall_0_0()); 
	    }
		lv_type_0_0=ruleQualifiedName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypeReferenceRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_0_0, 
        		"QualifiedName");
	        afterParserOrEnumRuleCall();
	    }

)
)(((	'<' 
)=>	otherlv_1='<' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getTypeReferenceAccess().getLessThanSignKeyword_1_0());
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getTypeReferenceAccess().getArgumentsTypeReferenceParserRuleCall_1_1_0()); 
	    }
		lv_arguments_2_0=ruleTypeReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypeReferenceRule());
	        }
       		add(
       			$current, 
       			"arguments",
        		lv_arguments_2_0, 
        		"TypeReference");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getTypeReferenceAccess().getCommaKeyword_1_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTypeReferenceAccess().getArgumentsTypeReferenceParserRuleCall_1_2_1_0()); 
	    }
		lv_arguments_4_0=ruleTypeReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypeReferenceRule());
	        }
       		add(
       			$current, 
       			"arguments",
        		lv_arguments_4_0, 
        		"TypeReference");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_5='>' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getTypeReferenceAccess().getGreaterThanSignKeyword_1_3());
    }
)?)
;





// Entry rule entryRuleExpression
entryRuleExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExpressionRule()); }
	 iv_ruleExpression=ruleExpression 
	 { $current=$iv_ruleExpression.current; } 
	 EOF 
;

// Rule Expression
ruleExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getExpressionAccess().getAssignmentParserRuleCall()); 
    }
    this_Assignment_0=ruleAssignment
    { 
        $current = $this_Assignment_0.current; 
        afterParserOrEnumRuleCall();
    }

;





// Entry rule entryRuleAssignment
entryRuleAssignment returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAssignmentRule()); }
	 iv_ruleAssignment=ruleAssignment 
	 { $current=$iv_ruleAssignment.current; } 
	 EOF 
;

// Rule Assignment
ruleAssignment returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
    {
        $current = forceCreateModelElement(
            grammarAccess.getAssignmentAccess().getAssignmentAction_0_0(),
            $current);
    }
)(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getAssignmentRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getAssignmentAccess().getFeatureFeatureCrossReference_0_1_0()); 
	    }
		ruleIdOrSuper		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)
    { 
        newCompositeNode(grammarAccess.getAssignmentAccess().getOpSingleAssignParserRuleCall_0_2()); 
    }
ruleOpSingleAssign
    { 
        afterParserOrEnumRuleCall();
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAssignmentAccess().getValueAssignmentParserRuleCall_0_3_0()); 
	    }
		lv_value_3_0=ruleAssignment		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAssignmentRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_3_0, 
        		"Assignment");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |(
    { 
        newCompositeNode(grammarAccess.getAssignmentAccess().getOrExpressionParserRuleCall_1_0()); 
    }
    this_OrExpression_4=ruleOrExpression
    { 
        $current = $this_OrExpression_4.current; 
        afterParserOrEnumRuleCall();
    }
(((((
)(
(
ruleOpMultiAssign
)
)))=>((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getAssignmentAccess().getOperationLeftAction_1_1_0_0_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getAssignmentAccess().getFeatureOpMultiAssignParserRuleCall_1_1_0_0_1_0()); 
	    }
		lv_feature_6_0=ruleOpMultiAssign		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAssignmentRule());
	        }
       		set(
       			$current, 
       			"feature",
        		lv_feature_6_0, 
        		"OpMultiAssign");
	        afterParserOrEnumRuleCall();
	    }

)
)))(
(
		{ 
	        newCompositeNode(grammarAccess.getAssignmentAccess().getRightAssignmentParserRuleCall_1_1_1_0()); 
	    }
		lv_right_7_0=ruleAssignment		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAssignmentRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_7_0, 
        		"Assignment");
	        afterParserOrEnumRuleCall();
	    }

)
))?))
;





// Entry rule entryRuleOpSingleAssign
entryRuleOpSingleAssign returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getOpSingleAssignRule()); } 
	 iv_ruleOpSingleAssign=ruleOpSingleAssign 
	 { $current=$iv_ruleOpSingleAssign.current.getText(); }  
	 EOF 
;

// Rule OpSingleAssign
ruleOpSingleAssign returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpSingleAssignAccess().getEqualsSignKeyword()); 
    }

    ;





// Entry rule entryRuleOpMultiAssign
entryRuleOpMultiAssign returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getOpMultiAssignRule()); } 
	 iv_ruleOpMultiAssign=ruleOpMultiAssign 
	 { $current=$iv_ruleOpMultiAssign.current.getText(); }  
	 EOF 
;

// Rule OpMultiAssign
ruleOpMultiAssign returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='+=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpMultiAssignAccess().getPlusSignEqualsSignKeyword_0()); 
    }

    |
	kw='-=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpMultiAssignAccess().getHyphenMinusEqualsSignKeyword_1()); 
    }

    |
	kw='*=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpMultiAssignAccess().getAsteriskEqualsSignKeyword_2()); 
    }

    |
	kw='/=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpMultiAssignAccess().getSolidusEqualsSignKeyword_3()); 
    }

    |
	kw='%=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpMultiAssignAccess().getPercentSignEqualsSignKeyword_4()); 
    }

    |
	kw='&=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpMultiAssignAccess().getAmpersandEqualsSignKeyword_5()); 
    }

    |
	kw='|=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpMultiAssignAccess().getVerticalLineEqualsSignKeyword_6()); 
    }

    |
	kw='^=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpMultiAssignAccess().getCircumflexAccentEqualsSignKeyword_7()); 
    }

    |
	kw='<<=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpMultiAssignAccess().getLessThanSignLessThanSignEqualsSignKeyword_8()); 
    }

    |
	kw='>>=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpMultiAssignAccess().getGreaterThanSignGreaterThanSignEqualsSignKeyword_9()); 
    }

    |
	kw='>>>=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpMultiAssignAccess().getGreaterThanSignGreaterThanSignGreaterThanSignEqualsSignKeyword_10()); 
    }
)
    ;





// Entry rule entryRuleOrExpression
entryRuleOrExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getOrExpressionRule()); }
	 iv_ruleOrExpression=ruleOrExpression 
	 { $current=$iv_ruleOrExpression.current; } 
	 EOF 
;

// Rule OrExpression
ruleOrExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getOrExpressionAccess().getAndExpressionParserRuleCall_0()); 
    }
    this_AndExpression_0=ruleAndExpression
    { 
        $current = $this_AndExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
(((((
)(
(
ruleOpOr
)
)))=>((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getOrExpressionAccess().getOperationLeftAction_1_0_0_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getOrExpressionAccess().getFeatureOpOrParserRuleCall_1_0_0_1_0()); 
	    }
		lv_feature_2_0=ruleOpOr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOrExpressionRule());
	        }
       		set(
       			$current, 
       			"feature",
        		lv_feature_2_0, 
        		"OpOr");
	        afterParserOrEnumRuleCall();
	    }

)
)))(
(
		{ 
	        newCompositeNode(grammarAccess.getOrExpressionAccess().getRightAndExpressionParserRuleCall_1_1_0()); 
	    }
		lv_right_3_0=ruleAndExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOrExpressionRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"AndExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleOpOr
entryRuleOpOr returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getOpOrRule()); } 
	 iv_ruleOpOr=ruleOpOr 
	 { $current=$iv_ruleOpOr.current.getText(); }  
	 EOF 
;

// Rule OpOr
ruleOpOr returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='||' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpOrAccess().getVerticalLineVerticalLineKeyword()); 
    }

    ;





// Entry rule entryRuleAndExpression
entryRuleAndExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAndExpressionRule()); }
	 iv_ruleAndExpression=ruleAndExpression 
	 { $current=$iv_ruleAndExpression.current; } 
	 EOF 
;

// Rule AndExpression
ruleAndExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getAndExpressionAccess().getOtherOperatorExpressionParserRuleCall_0()); 
    }
    this_OtherOperatorExpression_0=ruleOtherOperatorExpression
    { 
        $current = $this_OtherOperatorExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
(((((
)(
(
ruleOpAnd
)
)))=>((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getAndExpressionAccess().getOperationLeftAction_1_0_0_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getAndExpressionAccess().getFeatureOpAndParserRuleCall_1_0_0_1_0()); 
	    }
		lv_feature_2_0=ruleOpAnd		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAndExpressionRule());
	        }
       		set(
       			$current, 
       			"feature",
        		lv_feature_2_0, 
        		"OpAnd");
	        afterParserOrEnumRuleCall();
	    }

)
)))(
(
		{ 
	        newCompositeNode(grammarAccess.getAndExpressionAccess().getRightOtherOperatorExpressionParserRuleCall_1_1_0()); 
	    }
		lv_right_3_0=ruleOtherOperatorExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAndExpressionRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"OtherOperatorExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleOpAnd
entryRuleOpAnd returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getOpAndRule()); } 
	 iv_ruleOpAnd=ruleOpAnd 
	 { $current=$iv_ruleOpAnd.current.getText(); }  
	 EOF 
;

// Rule OpAnd
ruleOpAnd returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='&&' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpAndAccess().getAmpersandAmpersandKeyword()); 
    }

    ;





// Entry rule entryRuleOtherOperatorExpression
entryRuleOtherOperatorExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getOtherOperatorExpressionRule()); }
	 iv_ruleOtherOperatorExpression=ruleOtherOperatorExpression 
	 { $current=$iv_ruleOtherOperatorExpression.current; } 
	 EOF 
;

// Rule OtherOperatorExpression
ruleOtherOperatorExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getOtherOperatorExpressionAccess().getCompareExpressionParserRuleCall_0()); 
    }
    this_CompareExpression_0=ruleCompareExpression
    { 
        $current = $this_CompareExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
(((((
)(
(
ruleOpOther
)
)))=>((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getOtherOperatorExpressionAccess().getOperationLeftAction_1_0_0_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getOtherOperatorExpressionAccess().getFeatureOpOtherParserRuleCall_1_0_0_1_0()); 
	    }
		lv_feature_2_0=ruleOpOther		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOtherOperatorExpressionRule());
	        }
       		set(
       			$current, 
       			"feature",
        		lv_feature_2_0, 
        		"OpOther");
	        afterParserOrEnumRuleCall();
	    }

)
)))(
(
		{ 
	        newCompositeNode(grammarAccess.getOtherOperatorExpressionAccess().getRightCompareExpressionParserRuleCall_1_1_0()); 
	    }
		lv_right_3_0=ruleCompareExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOtherOperatorExpressionRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"CompareExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleOpOther
entryRuleOpOther returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getOpOtherRule()); } 
	 iv_ruleOpOther=ruleOpOther 
	 { $current=$iv_ruleOpOther.current.getText(); }  
	 EOF 
;

// Rule OpOther
ruleOpOther returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='...' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpOtherAccess().getFullStopFullStopFullStopKeyword()); 
    }

    ;





// Entry rule entryRuleCompareExpression
entryRuleCompareExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCompareExpressionRule()); }
	 iv_ruleCompareExpression=ruleCompareExpression 
	 { $current=$iv_ruleCompareExpression.current; } 
	 EOF 
;

// Rule CompareExpression
ruleCompareExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getCompareExpressionAccess().getBitwiseExpressionParserRuleCall_0()); 
    }
    this_BitwiseExpression_0=ruleBitwiseExpression
    { 
        $current = $this_BitwiseExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
(((((
)(
(
ruleOpCompare
)
)))=>((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getCompareExpressionAccess().getOperationLeftAction_1_0_0_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getCompareExpressionAccess().getFeatureOpCompareParserRuleCall_1_0_0_1_0()); 
	    }
		lv_feature_2_0=ruleOpCompare		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCompareExpressionRule());
	        }
       		set(
       			$current, 
       			"feature",
        		lv_feature_2_0, 
        		"OpCompare");
	        afterParserOrEnumRuleCall();
	    }

)
)))(
(
		{ 
	        newCompositeNode(grammarAccess.getCompareExpressionAccess().getRightBitwiseExpressionParserRuleCall_1_1_0()); 
	    }
		lv_right_3_0=ruleBitwiseExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCompareExpressionRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"BitwiseExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleOpCompare
entryRuleOpCompare returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getOpCompareRule()); } 
	 iv_ruleOpCompare=ruleOpCompare 
	 { $current=$iv_ruleOpCompare.current.getText(); }  
	 EOF 
;

// Rule OpCompare
ruleOpCompare returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='==' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpCompareAccess().getEqualsSignEqualsSignKeyword_0()); 
    }

    |
	kw='!=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpCompareAccess().getExclamationMarkEqualsSignKeyword_1()); 
    }

    |
	kw='>=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpCompareAccess().getGreaterThanSignEqualsSignKeyword_2()); 
    }

    |
	kw='<=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpCompareAccess().getLessThanSignEqualsSignKeyword_3()); 
    }

    |
	kw='>' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpCompareAccess().getGreaterThanSignKeyword_4()); 
    }

    |
	kw='<' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpCompareAccess().getLessThanSignKeyword_5()); 
    }
)
    ;





// Entry rule entryRuleBitwiseExpression
entryRuleBitwiseExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBitwiseExpressionRule()); }
	 iv_ruleBitwiseExpression=ruleBitwiseExpression 
	 { $current=$iv_ruleBitwiseExpression.current; } 
	 EOF 
;

// Rule BitwiseExpression
ruleBitwiseExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getBitwiseExpressionAccess().getBitshiftExpressionParserRuleCall_0()); 
    }
    this_BitshiftExpression_0=ruleBitshiftExpression
    { 
        $current = $this_BitshiftExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
(((((
)(
(
ruleOpBitwise
)
)))=>((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getBitwiseExpressionAccess().getOperationLeftAction_1_0_0_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getBitwiseExpressionAccess().getFeatureOpBitwiseParserRuleCall_1_0_0_1_0()); 
	    }
		lv_feature_2_0=ruleOpBitwise		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBitwiseExpressionRule());
	        }
       		set(
       			$current, 
       			"feature",
        		lv_feature_2_0, 
        		"OpBitwise");
	        afterParserOrEnumRuleCall();
	    }

)
)))(
(
		{ 
	        newCompositeNode(grammarAccess.getBitwiseExpressionAccess().getRightBitshiftExpressionParserRuleCall_1_1_0()); 
	    }
		lv_right_3_0=ruleBitshiftExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBitwiseExpressionRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"BitshiftExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleOpBitwise
entryRuleOpBitwise returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getOpBitwiseRule()); } 
	 iv_ruleOpBitwise=ruleOpBitwise 
	 { $current=$iv_ruleOpBitwise.current.getText(); }  
	 EOF 
;

// Rule OpBitwise
ruleOpBitwise returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='|' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpBitwiseAccess().getVerticalLineKeyword_0()); 
    }

    |
	kw='&' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpBitwiseAccess().getAmpersandKeyword_1()); 
    }

    |
	kw='^' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpBitwiseAccess().getCircumflexAccentKeyword_2()); 
    }
)
    ;





// Entry rule entryRuleBitshiftExpression
entryRuleBitshiftExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBitshiftExpressionRule()); }
	 iv_ruleBitshiftExpression=ruleBitshiftExpression 
	 { $current=$iv_ruleBitshiftExpression.current; } 
	 EOF 
;

// Rule BitshiftExpression
ruleBitshiftExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getBitshiftExpressionAccess().getAddExpressionParserRuleCall_0()); 
    }
    this_AddExpression_0=ruleAddExpression
    { 
        $current = $this_AddExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
(((((
)(
(
ruleOpBitshift
)
)))=>((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getBitshiftExpressionAccess().getOperationLeftAction_1_0_0_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getBitshiftExpressionAccess().getFeatureOpBitshiftParserRuleCall_1_0_0_1_0()); 
	    }
		lv_feature_2_0=ruleOpBitshift		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBitshiftExpressionRule());
	        }
       		set(
       			$current, 
       			"feature",
        		lv_feature_2_0, 
        		"OpBitshift");
	        afterParserOrEnumRuleCall();
	    }

)
)))(
(
		{ 
	        newCompositeNode(grammarAccess.getBitshiftExpressionAccess().getRightAddExpressionParserRuleCall_1_1_0()); 
	    }
		lv_right_3_0=ruleAddExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBitshiftExpressionRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"AddExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleOpBitshift
entryRuleOpBitshift returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getOpBitshiftRule()); } 
	 iv_ruleOpBitshift=ruleOpBitshift 
	 { $current=$iv_ruleOpBitshift.current.getText(); }  
	 EOF 
;

// Rule OpBitshift
ruleOpBitshift returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='<<' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpBitshiftAccess().getLessThanSignLessThanSignKeyword_0()); 
    }

    |
	kw='>>' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpBitshiftAccess().getGreaterThanSignGreaterThanSignKeyword_1()); 
    }

    |
	kw='>>>' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpBitshiftAccess().getGreaterThanSignGreaterThanSignGreaterThanSignKeyword_2()); 
    }
)
    ;





// Entry rule entryRuleAddExpression
entryRuleAddExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAddExpressionRule()); }
	 iv_ruleAddExpression=ruleAddExpression 
	 { $current=$iv_ruleAddExpression.current; } 
	 EOF 
;

// Rule AddExpression
ruleAddExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getAddExpressionAccess().getSubtractExpressionParserRuleCall_0()); 
    }
    this_SubtractExpression_0=ruleSubtractExpression
    { 
        $current = $this_SubtractExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
(((((
)(
(
ruleOpAdd
)
)))=>((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getAddExpressionAccess().getOperationLeftAction_1_0_0_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getAddExpressionAccess().getFeatureOpAddParserRuleCall_1_0_0_1_0()); 
	    }
		lv_feature_2_0=ruleOpAdd		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAddExpressionRule());
	        }
       		set(
       			$current, 
       			"feature",
        		lv_feature_2_0, 
        		"OpAdd");
	        afterParserOrEnumRuleCall();
	    }

)
)))(
(
		{ 
	        newCompositeNode(grammarAccess.getAddExpressionAccess().getRightSubtractExpressionParserRuleCall_1_1_0()); 
	    }
		lv_right_3_0=ruleSubtractExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAddExpressionRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"SubtractExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleOpAdd
entryRuleOpAdd returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getOpAddRule()); } 
	 iv_ruleOpAdd=ruleOpAdd 
	 { $current=$iv_ruleOpAdd.current.getText(); }  
	 EOF 
;

// Rule OpAdd
ruleOpAdd returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='+' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpAddAccess().getPlusSignKeyword()); 
    }

    ;





// Entry rule entryRuleSubtractExpression
entryRuleSubtractExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSubtractExpressionRule()); }
	 iv_ruleSubtractExpression=ruleSubtractExpression 
	 { $current=$iv_ruleSubtractExpression.current; } 
	 EOF 
;

// Rule SubtractExpression
ruleSubtractExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getSubtractExpressionAccess().getMultiplyExpressionParserRuleCall_0()); 
    }
    this_MultiplyExpression_0=ruleMultiplyExpression
    { 
        $current = $this_MultiplyExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
(((((
)(
(
ruleOpSubtract
)
)))=>((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getSubtractExpressionAccess().getOperationLeftAction_1_0_0_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getSubtractExpressionAccess().getFeatureOpSubtractParserRuleCall_1_0_0_1_0()); 
	    }
		lv_feature_2_0=ruleOpSubtract		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSubtractExpressionRule());
	        }
       		set(
       			$current, 
       			"feature",
        		lv_feature_2_0, 
        		"OpSubtract");
	        afterParserOrEnumRuleCall();
	    }

)
)))(
(
		{ 
	        newCompositeNode(grammarAccess.getSubtractExpressionAccess().getRightMultiplyExpressionParserRuleCall_1_1_0()); 
	    }
		lv_right_3_0=ruleMultiplyExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSubtractExpressionRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"MultiplyExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleOpSubtract
entryRuleOpSubtract returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getOpSubtractRule()); } 
	 iv_ruleOpSubtract=ruleOpSubtract 
	 { $current=$iv_ruleOpSubtract.current.getText(); }  
	 EOF 
;

// Rule OpSubtract
ruleOpSubtract returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='-' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpSubtractAccess().getHyphenMinusKeyword()); 
    }

    ;





// Entry rule entryRuleMultiplyExpression
entryRuleMultiplyExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMultiplyExpressionRule()); }
	 iv_ruleMultiplyExpression=ruleMultiplyExpression 
	 { $current=$iv_ruleMultiplyExpression.current; } 
	 EOF 
;

// Rule MultiplyExpression
ruleMultiplyExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getMultiplyExpressionAccess().getDivideExpressionParserRuleCall_0()); 
    }
    this_DivideExpression_0=ruleDivideExpression
    { 
        $current = $this_DivideExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
(((((
)(
(
ruleOpMultiply
)
)))=>((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getMultiplyExpressionAccess().getOperationLeftAction_1_0_0_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getMultiplyExpressionAccess().getFeatureOpMultiplyParserRuleCall_1_0_0_1_0()); 
	    }
		lv_feature_2_0=ruleOpMultiply		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMultiplyExpressionRule());
	        }
       		set(
       			$current, 
       			"feature",
        		lv_feature_2_0, 
        		"OpMultiply");
	        afterParserOrEnumRuleCall();
	    }

)
)))(
(
		{ 
	        newCompositeNode(grammarAccess.getMultiplyExpressionAccess().getRightDivideExpressionParserRuleCall_1_1_0()); 
	    }
		lv_right_3_0=ruleDivideExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMultiplyExpressionRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"DivideExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleOpMultiply
entryRuleOpMultiply returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getOpMultiplyRule()); } 
	 iv_ruleOpMultiply=ruleOpMultiply 
	 { $current=$iv_ruleOpMultiply.current.getText(); }  
	 EOF 
;

// Rule OpMultiply
ruleOpMultiply returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='*' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpMultiplyAccess().getAsteriskKeyword()); 
    }

    ;





// Entry rule entryRuleDivideExpression
entryRuleDivideExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDivideExpressionRule()); }
	 iv_ruleDivideExpression=ruleDivideExpression 
	 { $current=$iv_ruleDivideExpression.current; } 
	 EOF 
;

// Rule DivideExpression
ruleDivideExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getDivideExpressionAccess().getModuloExpressionParserRuleCall_0()); 
    }
    this_ModuloExpression_0=ruleModuloExpression
    { 
        $current = $this_ModuloExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
(((((
)(
(
ruleOpDivide
)
)))=>((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getDivideExpressionAccess().getOperationLeftAction_1_0_0_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getDivideExpressionAccess().getFeatureOpDivideParserRuleCall_1_0_0_1_0()); 
	    }
		lv_feature_2_0=ruleOpDivide		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDivideExpressionRule());
	        }
       		set(
       			$current, 
       			"feature",
        		lv_feature_2_0, 
        		"OpDivide");
	        afterParserOrEnumRuleCall();
	    }

)
)))(
(
		{ 
	        newCompositeNode(grammarAccess.getDivideExpressionAccess().getRightModuloExpressionParserRuleCall_1_1_0()); 
	    }
		lv_right_3_0=ruleModuloExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDivideExpressionRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"ModuloExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleOpDivide
entryRuleOpDivide returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getOpDivideRule()); } 
	 iv_ruleOpDivide=ruleOpDivide 
	 { $current=$iv_ruleOpDivide.current.getText(); }  
	 EOF 
;

// Rule OpDivide
ruleOpDivide returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='/' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpDivideAccess().getSolidusKeyword()); 
    }

    ;





// Entry rule entryRuleModuloExpression
entryRuleModuloExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getModuloExpressionRule()); }
	 iv_ruleModuloExpression=ruleModuloExpression 
	 { $current=$iv_ruleModuloExpression.current; } 
	 EOF 
;

// Rule ModuloExpression
ruleModuloExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getModuloExpressionAccess().getUnaryOperationParserRuleCall_0()); 
    }
    this_UnaryOperation_0=ruleUnaryOperation
    { 
        $current = $this_UnaryOperation_0.current; 
        afterParserOrEnumRuleCall();
    }
(((((
)(
(
ruleOpModulo
)
)))=>((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getModuloExpressionAccess().getOperationLeftAction_1_0_0_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getModuloExpressionAccess().getFeatureOpModuloParserRuleCall_1_0_0_1_0()); 
	    }
		lv_feature_2_0=ruleOpModulo		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModuloExpressionRule());
	        }
       		set(
       			$current, 
       			"feature",
        		lv_feature_2_0, 
        		"OpModulo");
	        afterParserOrEnumRuleCall();
	    }

)
)))(
(
		{ 
	        newCompositeNode(grammarAccess.getModuloExpressionAccess().getRightUnaryOperationParserRuleCall_1_1_0()); 
	    }
		lv_right_3_0=ruleUnaryOperation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModuloExpressionRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"UnaryOperation");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleOpModulo
entryRuleOpModulo returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getOpModuloRule()); } 
	 iv_ruleOpModulo=ruleOpModulo 
	 { $current=$iv_ruleOpModulo.current.getText(); }  
	 EOF 
;

// Rule OpModulo
ruleOpModulo returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='%' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpModuloAccess().getPercentSignKeyword()); 
    }

    ;





// Entry rule entryRuleUnaryOperation
entryRuleUnaryOperation returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getUnaryOperationRule()); }
	 iv_ruleUnaryOperation=ruleUnaryOperation 
	 { $current=$iv_ruleUnaryOperation.current; } 
	 EOF 
;

// Rule UnaryOperation
ruleUnaryOperation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
    {
        $current = forceCreateModelElement(
            grammarAccess.getUnaryOperationAccess().getUnaryOperationAction_0_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getUnaryOperationAccess().getFeatureOpUnaryParserRuleCall_0_1_0()); 
	    }
		lv_feature_1_0=ruleOpUnary		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUnaryOperationRule());
	        }
       		set(
       			$current, 
       			"feature",
        		lv_feature_1_0, 
        		"OpUnary");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getUnaryOperationAccess().getOperandPreIncrementOperationParserRuleCall_0_2_0()); 
	    }
		lv_operand_2_0=rulePreIncrementOperation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUnaryOperationRule());
	        }
       		set(
       			$current, 
       			"operand",
        		lv_operand_2_0, 
        		"PreIncrementOperation");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |
    { 
        newCompositeNode(grammarAccess.getUnaryOperationAccess().getPreIncrementOperationParserRuleCall_1()); 
    }
    this_PreIncrementOperation_3=rulePreIncrementOperation
    { 
        $current = $this_PreIncrementOperation_3.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleOpUnary
entryRuleOpUnary returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getOpUnaryRule()); } 
	 iv_ruleOpUnary=ruleOpUnary 
	 { $current=$iv_ruleOpUnary.current.getText(); }  
	 EOF 
;

// Rule OpUnary
ruleOpUnary returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='!' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpUnaryAccess().getExclamationMarkKeyword_0()); 
    }

    |
	kw='-' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpUnaryAccess().getHyphenMinusKeyword_1()); 
    }

    |
	kw='~' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpUnaryAccess().getTildeKeyword_2()); 
    }
)
    ;





// Entry rule entryRulePreIncrementOperation
entryRulePreIncrementOperation returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPreIncrementOperationRule()); }
	 iv_rulePreIncrementOperation=rulePreIncrementOperation 
	 { $current=$iv_rulePreIncrementOperation.current; } 
	 EOF 
;

// Rule PreIncrementOperation
rulePreIncrementOperation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((((
)(
(
ruleOpIncrement
)
)(
(
rulePostIncrementOperation
)
)))=>((
    {
        $current = forceCreateModelElement(
            grammarAccess.getPreIncrementOperationAccess().getPreIncrementOperationAction_0_0_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getPreIncrementOperationAccess().getFeatureOpIncrementParserRuleCall_0_0_1_0()); 
	    }
		lv_feature_1_0=ruleOpIncrement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPreIncrementOperationRule());
	        }
       		set(
       			$current, 
       			"feature",
        		lv_feature_1_0, 
        		"OpIncrement");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getPreIncrementOperationAccess().getOperandPostIncrementOperationParserRuleCall_0_0_2_0()); 
	    }
		lv_operand_2_0=rulePostIncrementOperation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPreIncrementOperationRule());
	        }
       		set(
       			$current, 
       			"operand",
        		lv_operand_2_0, 
        		"PostIncrementOperation");
	        afterParserOrEnumRuleCall();
	    }

)
)))
    |
    { 
        newCompositeNode(grammarAccess.getPreIncrementOperationAccess().getPostIncrementOperationParserRuleCall_1()); 
    }
    this_PostIncrementOperation_3=rulePostIncrementOperation
    { 
        $current = $this_PostIncrementOperation_3.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRulePostIncrementOperation
entryRulePostIncrementOperation returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPostIncrementOperationRule()); }
	 iv_rulePostIncrementOperation=rulePostIncrementOperation 
	 { $current=$iv_rulePostIncrementOperation.current; } 
	 EOF 
;

// Rule PostIncrementOperation
rulePostIncrementOperation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((((
)(
(
ruleMemberFeatureCall
)
)(
(
ruleOpIncrement
)
)))=>((
    {
        $current = forceCreateModelElement(
            grammarAccess.getPostIncrementOperationAccess().getPostIncrementOperationAction_0_0_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getPostIncrementOperationAccess().getOperandMemberFeatureCallParserRuleCall_0_0_1_0()); 
	    }
		lv_operand_1_0=ruleMemberFeatureCall		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPostIncrementOperationRule());
	        }
       		set(
       			$current, 
       			"operand",
        		lv_operand_1_0, 
        		"MemberFeatureCall");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getPostIncrementOperationAccess().getFeatureOpIncrementParserRuleCall_0_0_2_0()); 
	    }
		lv_feature_2_0=ruleOpIncrement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPostIncrementOperationRule());
	        }
       		set(
       			$current, 
       			"feature",
        		lv_feature_2_0, 
        		"OpIncrement");
	        afterParserOrEnumRuleCall();
	    }

)
)))
    |
    { 
        newCompositeNode(grammarAccess.getPostIncrementOperationAccess().getMemberFeatureCallParserRuleCall_1()); 
    }
    this_MemberFeatureCall_3=ruleMemberFeatureCall
    { 
        $current = $this_MemberFeatureCall_3.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleOpIncrement
entryRuleOpIncrement returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getOpIncrementRule()); } 
	 iv_ruleOpIncrement=ruleOpIncrement 
	 { $current=$iv_ruleOpIncrement.current.getText(); }  
	 EOF 
;

// Rule OpIncrement
ruleOpIncrement returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='++' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpIncrementAccess().getPlusSignPlusSignKeyword_0()); 
    }

    |
	kw='--' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpIncrementAccess().getHyphenMinusHyphenMinusKeyword_1()); 
    }
)
    ;





// Entry rule entryRuleMemberFeatureCall
entryRuleMemberFeatureCall returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMemberFeatureCallRule()); }
	 iv_ruleMemberFeatureCall=ruleMemberFeatureCall 
	 { $current=$iv_ruleMemberFeatureCall.current; } 
	 EOF 
;

// Rule MemberFeatureCall
ruleMemberFeatureCall returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getMemberFeatureCallAccess().getPrimaryExpressionParserRuleCall_0()); 
    }
    this_PrimaryExpression_0=rulePrimaryExpression
    { 
        $current = $this_PrimaryExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
((((((
)	'.' 
(
(
		ruleValidID
)
)	ruleOpSingleAssign))=>((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getMemberFeatureCallAccess().getAssignmentAssignableAction_1_0_0_0_0(),
            $current);
    }
)	otherlv_2='.' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getMemberFeatureCallAccess().getFullStopKeyword_1_0_0_0_1());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getMemberFeatureCallRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getMemberFeatureCallAccess().getFeatureFeatureCrossReference_1_0_0_0_2_0()); 
	    }
		ruleValidID		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)
    { 
        newCompositeNode(grammarAccess.getMemberFeatureCallAccess().getOpSingleAssignParserRuleCall_1_0_0_0_3()); 
    }
ruleOpSingleAssign
    { 
        afterParserOrEnumRuleCall();
    }
))(
(
		{ 
	        newCompositeNode(grammarAccess.getMemberFeatureCallAccess().getValueAssignmentParserRuleCall_1_0_1_0()); 
	    }
		lv_value_5_0=ruleAssignment		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMemberFeatureCallRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_5_0, 
        		"Assignment");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |(((((
)	'.' 
))=>((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getMemberFeatureCallAccess().getMemberFeatureCallTargetAction_1_1_0_0_0(),
            $current);
    }
)	otherlv_7='.' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getMemberFeatureCallAccess().getFullStopKeyword_1_1_0_0_1());
    }
))(
(
		{ 
	        newCompositeNode(grammarAccess.getMemberFeatureCallAccess().getFeatureValidIDParserRuleCall_1_1_1_0()); 
	    }
		lv_feature_8_0=ruleValidID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMemberFeatureCallRule());
	        }
       		set(
       			$current, 
       			"feature",
        		lv_feature_8_0, 
        		"ValidID");
	        afterParserOrEnumRuleCall();
	    }

)
)(((
(
	'(' 
 

)
)=>
(
		lv_explicitOperationCall_9_0=	'(' 
    {
        newLeafNode(lv_explicitOperationCall_9_0, grammarAccess.getMemberFeatureCallAccess().getExplicitOperationCallLeftParenthesisKeyword_1_1_2_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMemberFeatureCallRule());
	        }
       		setWithLastConsumed($current, "explicitOperationCall", true, "(");
	    }

)
)((
(
		{ 
	        newCompositeNode(grammarAccess.getMemberFeatureCallAccess().getArgumentsExpressionParserRuleCall_1_1_2_1_0_0()); 
	    }
		lv_arguments_10_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMemberFeatureCallRule());
	        }
       		add(
       			$current, 
       			"arguments",
        		lv_arguments_10_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_11=',' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getMemberFeatureCallAccess().getCommaKeyword_1_1_2_1_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMemberFeatureCallAccess().getArgumentsExpressionParserRuleCall_1_1_2_1_1_1_0()); 
	    }
		lv_arguments_12_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMemberFeatureCallRule());
	        }
       		add(
       			$current, 
       			"arguments",
        		lv_arguments_12_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_13=')' 
    {
    	newLeafNode(otherlv_13, grammarAccess.getMemberFeatureCallAccess().getRightParenthesisKeyword_1_1_2_2());
    }
)?))*)
;





// Entry rule entryRulePrimaryExpression
entryRulePrimaryExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPrimaryExpressionRule()); }
	 iv_rulePrimaryExpression=rulePrimaryExpression 
	 { $current=$iv_rulePrimaryExpression.current; } 
	 EOF 
;

// Rule PrimaryExpression
rulePrimaryExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getLiteralParserRuleCall_0()); 
    }
    this_Literal_0=ruleLiteral
    { 
        $current = $this_Literal_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getBlockExpressionParserRuleCall_1()); 
    }
    this_BlockExpression_1=ruleBlockExpression
    { 
        $current = $this_BlockExpression_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getParenthesizedExpressionParserRuleCall_2()); 
    }
    this_ParenthesizedExpression_2=ruleParenthesizedExpression
    { 
        $current = $this_ParenthesizedExpression_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getFeatureCallParserRuleCall_3()); 
    }
    this_FeatureCall_3=ruleFeatureCall
    { 
        $current = $this_FeatureCall_3.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getConstructorCallParserRuleCall_4()); 
    }
    this_ConstructorCall_4=ruleConstructorCall
    { 
        $current = $this_ConstructorCall_4.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleLiteral
entryRuleLiteral returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLiteralRule()); }
	 iv_ruleLiteral=ruleLiteral 
	 { $current=$iv_ruleLiteral.current; } 
	 EOF 
;

// Rule Literal
ruleLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getLiteralAccess().getBooleanLiteralParserRuleCall_0()); 
    }
    this_BooleanLiteral_0=ruleBooleanLiteral
    { 
        $current = $this_BooleanLiteral_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getLiteralAccess().getIntLiteralParserRuleCall_1()); 
    }
    this_IntLiteral_1=ruleIntLiteral
    { 
        $current = $this_IntLiteral_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getLiteralAccess().getNullLiteralParserRuleCall_2()); 
    }
    this_NullLiteral_2=ruleNullLiteral
    { 
        $current = $this_NullLiteral_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getLiteralAccess().getStringLiteralParserRuleCall_3()); 
    }
    this_StringLiteral_3=ruleStringLiteral
    { 
        $current = $this_StringLiteral_3.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getLiteralAccess().getFloatLiteralParserRuleCall_4()); 
    }
    this_FloatLiteral_4=ruleFloatLiteral
    { 
        $current = $this_FloatLiteral_4.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getLiteralAccess().getRegularExpressionLiteralParserRuleCall_5()); 
    }
    this_RegularExpressionLiteral_5=ruleRegularExpressionLiteral
    { 
        $current = $this_RegularExpressionLiteral_5.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getLiteralAccess().getArrayLiteralParserRuleCall_6()); 
    }
    this_ArrayLiteral_6=ruleArrayLiteral
    { 
        $current = $this_ArrayLiteral_6.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleBlockExpression
entryRuleBlockExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBlockExpressionRule()); }
	 iv_ruleBlockExpression=ruleBlockExpression 
	 { $current=$iv_ruleBlockExpression.current; } 
	 EOF 
;

// Rule BlockExpression
ruleBlockExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getBlockExpressionAccess().getBlockExpressionAction_0(),
            $current);
    }
)	otherlv_1='{' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getBlockExpressionAccess().getLeftCurlyBracketKeyword_1());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getBlockExpressionAccess().getExpressionsExpressionInsideBlockParserRuleCall_2_0_0()); 
	    }
		lv_expressions_2_0=ruleExpressionInsideBlock		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBlockExpressionRule());
	        }
       		add(
       			$current, 
       			"expressions",
        		lv_expressions_2_0, 
        		"ExpressionInsideBlock");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3=';' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getBlockExpressionAccess().getSemicolonKeyword_2_1());
    }
)?)*	otherlv_4='}' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getBlockExpressionAccess().getRightCurlyBracketKeyword_3());
    }
)
;





// Entry rule entryRuleExpressionInsideBlock
entryRuleExpressionInsideBlock returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExpressionInsideBlockRule()); }
	 iv_ruleExpressionInsideBlock=ruleExpressionInsideBlock 
	 { $current=$iv_ruleExpressionInsideBlock.current; } 
	 EOF 
;

// Rule ExpressionInsideBlock
ruleExpressionInsideBlock returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getExpressionInsideBlockAccess().getVariableDeclarationsParserRuleCall_0()); 
    }
    this_VariableDeclarations_0=ruleVariableDeclarations
    { 
        $current = $this_VariableDeclarations_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getExpressionInsideBlockAccess().getExpressionParserRuleCall_1()); 
    }
    this_Expression_1=ruleExpression
    { 
        $current = $this_Expression_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleVariableDeclarations
entryRuleVariableDeclarations returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getVariableDeclarationsRule()); }
	 iv_ruleVariableDeclarations=ruleVariableDeclarations 
	 { $current=$iv_ruleVariableDeclarations.current; } 
	 EOF 
;

// Rule VariableDeclarations
ruleVariableDeclarations returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getVariableDeclarationsAccess().getVariableDeclarationsAction_0(),
            $current);
    }
)	otherlv_1='var' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getVariableDeclarationsAccess().getVarKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getVariableDeclarationsAccess().getDeclarationsVariableDeclarationParserRuleCall_2_0()); 
	    }
		lv_declarations_2_0=ruleVariableDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVariableDeclarationsRule());
	        }
       		add(
       			$current, 
       			"declarations",
        		lv_declarations_2_0, 
        		"VariableDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getVariableDeclarationsAccess().getCommaKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getVariableDeclarationsAccess().getDeclarationsVariableDeclarationParserRuleCall_3_1_0()); 
	    }
		lv_declarations_4_0=ruleVariableDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVariableDeclarationsRule());
	        }
       		add(
       			$current, 
       			"declarations",
        		lv_declarations_4_0, 
        		"VariableDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleVariableDeclaration
entryRuleVariableDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getVariableDeclarationRule()); }
	 iv_ruleVariableDeclaration=ruleVariableDeclaration 
	 { $current=$iv_ruleVariableDeclaration.current; } 
	 EOF 
;

// Rule VariableDeclaration
ruleVariableDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getVariableDeclarationAccess().getVariableDeclarationAction_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getVariableDeclarationAccess().getNameValidIDParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleValidID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVariableDeclarationRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ValidID");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_2=':' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getVariableDeclarationAccess().getColonKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getVariableDeclarationAccess().getTypeTypeReferenceParserRuleCall_2_1_0()); 
	    }
		lv_type_3_0=ruleTypeReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVariableDeclarationRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_3_0, 
        		"TypeReference");
	        afterParserOrEnumRuleCall();
	    }

)
))?(	otherlv_4='=' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getVariableDeclarationAccess().getEqualsSignKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getVariableDeclarationAccess().getExpressionExpressionParserRuleCall_3_1_0()); 
	    }
		lv_expression_5_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVariableDeclarationRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_5_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleParenthesizedExpression
entryRuleParenthesizedExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getParenthesizedExpressionRule()); }
	 iv_ruleParenthesizedExpression=ruleParenthesizedExpression 
	 { $current=$iv_ruleParenthesizedExpression.current; } 
	 EOF 
;

// Rule ParenthesizedExpression
ruleParenthesizedExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='(' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getParenthesizedExpressionAccess().getLeftParenthesisKeyword_0());
    }

    { 
        newCompositeNode(grammarAccess.getParenthesizedExpressionAccess().getExpressionParserRuleCall_1()); 
    }
    this_Expression_1=ruleExpression
    { 
        $current = $this_Expression_1.current; 
        afterParserOrEnumRuleCall();
    }
	otherlv_2=')' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getParenthesizedExpressionAccess().getRightParenthesisKeyword_2());
    }
)
;





// Entry rule entryRuleFeatureCall
entryRuleFeatureCall returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFeatureCallRule()); }
	 iv_ruleFeatureCall=ruleFeatureCall 
	 { $current=$iv_ruleFeatureCall.current; } 
	 EOF 
;

// Rule FeatureCall
ruleFeatureCall returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getFeatureCallAccess().getFeatureCallAction_0(),
            $current);
    }
)(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getFeatureCallRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getFeatureCallAccess().getFeatureFeatureCrossReference_1_0()); 
	    }
		ruleIdOrSuper		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)(((
(
	'(' 
 

)
)=>
(
		lv_explicitOperationCall_2_0=	'(' 
    {
        newLeafNode(lv_explicitOperationCall_2_0, grammarAccess.getFeatureCallAccess().getExplicitOperationCallLeftParenthesisKeyword_2_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFeatureCallRule());
	        }
       		setWithLastConsumed($current, "explicitOperationCall", true, "(");
	    }

)
)((
(
		{ 
	        newCompositeNode(grammarAccess.getFeatureCallAccess().getArgumentsExpressionParserRuleCall_2_1_0_0()); 
	    }
		lv_arguments_3_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFeatureCallRule());
	        }
       		add(
       			$current, 
       			"arguments",
        		lv_arguments_3_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_4=',' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getFeatureCallAccess().getCommaKeyword_2_1_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFeatureCallAccess().getArgumentsExpressionParserRuleCall_2_1_1_1_0()); 
	    }
		lv_arguments_5_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFeatureCallRule());
	        }
       		add(
       			$current, 
       			"arguments",
        		lv_arguments_5_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_6=')' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getFeatureCallAccess().getRightParenthesisKeyword_2_2());
    }
)?)
;







// Entry rule entryRuleConstructorCall
entryRuleConstructorCall returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getConstructorCallRule()); }
	 iv_ruleConstructorCall=ruleConstructorCall 
	 { $current=$iv_ruleConstructorCall.current; } 
	 EOF 
;

// Rule ConstructorCall
ruleConstructorCall returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getConstructorCallAccess().getConstructorCallAction_0(),
            $current);
    }
)	otherlv_1='new' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getConstructorCallAccess().getNewKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getConstructorCallAccess().getConstructorQualifiedNameParserRuleCall_2_0()); 
	    }
		lv_constructor_2_0=ruleQualifiedName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConstructorCallRule());
	        }
       		set(
       			$current, 
       			"constructor",
        		lv_constructor_2_0, 
        		"QualifiedName");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3='(' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getConstructorCallAccess().getLeftParenthesisKeyword_3());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getConstructorCallAccess().getArgumentsExpressionParserRuleCall_4_0_0()); 
	    }
		lv_arguments_4_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConstructorCallRule());
	        }
       		add(
       			$current, 
       			"arguments",
        		lv_arguments_4_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_5=',' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getConstructorCallAccess().getCommaKeyword_4_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getConstructorCallAccess().getArgumentsExpressionParserRuleCall_4_1_1_0()); 
	    }
		lv_arguments_6_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConstructorCallRule());
	        }
       		add(
       			$current, 
       			"arguments",
        		lv_arguments_6_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_7=')' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getConstructorCallAccess().getRightParenthesisKeyword_5());
    }
)
;





// Entry rule entryRuleIdOrSuper
entryRuleIdOrSuper returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getIdOrSuperRule()); } 
	 iv_ruleIdOrSuper=ruleIdOrSuper 
	 { $current=$iv_ruleIdOrSuper.current.getText(); }  
	 EOF 
;

// Rule IdOrSuper
ruleIdOrSuper returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getIdOrSuperAccess().getValidIDParserRuleCall_0()); 
    }
    this_ValidID_0=ruleValidID    {
		$current.merge(this_ValidID_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
	kw='super' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getIdOrSuperAccess().getSuperKeyword_1()); 
    }
)
    ;





// Entry rule entryRuleBooleanLiteral
entryRuleBooleanLiteral returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBooleanLiteralRule()); }
	 iv_ruleBooleanLiteral=ruleBooleanLiteral 
	 { $current=$iv_ruleBooleanLiteral.current; } 
	 EOF 
;

// Rule BooleanLiteral
ruleBooleanLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getBooleanLiteralAccess().getBooleanLiteralAction_0(),
            $current);
    }
)(	otherlv_1='false' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getBooleanLiteralAccess().getFalseKeyword_1_0());
    }

    |(
(
		lv_isTrue_2_0=	'true' 
    {
        newLeafNode(lv_isTrue_2_0, grammarAccess.getBooleanLiteralAccess().getIsTrueTrueKeyword_1_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBooleanLiteralRule());
	        }
       		setWithLastConsumed($current, "isTrue", true, "true");
	    }

)
)))
;





// Entry rule entryRuleNullLiteral
entryRuleNullLiteral returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNullLiteralRule()); }
	 iv_ruleNullLiteral=ruleNullLiteral 
	 { $current=$iv_ruleNullLiteral.current; } 
	 EOF 
;

// Rule NullLiteral
ruleNullLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getNullLiteralAccess().getNullLiteralAction_0(),
            $current);
    }
)	otherlv_1='null' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getNullLiteralAccess().getNullKeyword_1());
    }
)
;





// Entry rule entryRuleIntLiteral
entryRuleIntLiteral returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIntLiteralRule()); }
	 iv_ruleIntLiteral=ruleIntLiteral 
	 { $current=$iv_ruleIntLiteral.current; } 
	 EOF 
;

// Rule IntLiteral
ruleIntLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getIntLiteralAccess().getIntLiteralAction_0(),
            $current);
    }
)((
(
		lv_value_1_0=RULE_INT
		{
			newLeafNode(lv_value_1_0, grammarAccess.getIntLiteralAccess().getValueINTTerminalRuleCall_1_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getIntLiteralRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_1_0, 
        		"INT");
	    }

)
)
    |this_HEX_2=RULE_HEX
    { 
    newLeafNode(this_HEX_2, grammarAccess.getIntLiteralAccess().getHEXTerminalRuleCall_1_1()); 
    }
))
;





// Entry rule entryRuleFloatLiteral
entryRuleFloatLiteral returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFloatLiteralRule()); }
	 iv_ruleFloatLiteral=ruleFloatLiteral 
	 { $current=$iv_ruleFloatLiteral.current; } 
	 EOF 
;

// Rule FloatLiteral
ruleFloatLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getFloatLiteralAccess().getFloatLiteralAction_0(),
            $current);
    }
)(
(
		lv_value_1_0=RULE_FLOAT
		{
			newLeafNode(lv_value_1_0, grammarAccess.getFloatLiteralAccess().getValueFLOATTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFloatLiteralRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_1_0, 
        		"FLOAT");
	    }

)
))
;





// Entry rule entryRuleStringLiteral
entryRuleStringLiteral returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStringLiteralRule()); }
	 iv_ruleStringLiteral=ruleStringLiteral 
	 { $current=$iv_ruleStringLiteral.current; } 
	 EOF 
;

// Rule StringLiteral
ruleStringLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getStringLiteralAccess().getStringLiteralAction_0(),
            $current);
    }
)(
(
		lv_value_1_0=RULE_STRING
		{
			newLeafNode(lv_value_1_0, grammarAccess.getStringLiteralAccess().getValueSTRINGTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getStringLiteralRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_1_0, 
        		"STRING");
	    }

)
))
;





// Entry rule entryRuleRegularExpressionLiteral
entryRuleRegularExpressionLiteral returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRegularExpressionLiteralRule()); }
	 iv_ruleRegularExpressionLiteral=ruleRegularExpressionLiteral 
	 { $current=$iv_ruleRegularExpressionLiteral.current; } 
	 EOF 
;

// Rule RegularExpressionLiteral
ruleRegularExpressionLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getRegularExpressionLiteralAccess().getRegularExpressionLiteralAction_0(),
            $current);
    }
)(
(
		lv_value_1_0=RULE_REGULAR_EXPRESSION
		{
			newLeafNode(lv_value_1_0, grammarAccess.getRegularExpressionLiteralAccess().getValueREGULAR_EXPRESSIONTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getRegularExpressionLiteralRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_1_0, 
        		"REGULAR_EXPRESSION");
	    }

)
))
;





// Entry rule entryRuleArrayLiteral
entryRuleArrayLiteral returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getArrayLiteralRule()); }
	 iv_ruleArrayLiteral=ruleArrayLiteral 
	 { $current=$iv_ruleArrayLiteral.current; } 
	 EOF 
;

// Rule ArrayLiteral
ruleArrayLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getArrayLiteralAccess().getArrayLiteralAction_0(),
            $current);
    }
)	otherlv_1='[' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getArrayLiteralAccess().getLeftSquareBracketKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getArrayLiteralAccess().getElementsExpressionParserRuleCall_2_0()); 
	    }
		lv_elements_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArrayLiteralRule());
	        }
       		add(
       			$current, 
       			"elements",
        		lv_elements_2_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)?(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getArrayLiteralAccess().getCommaKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getArrayLiteralAccess().getElementsExpressionParserRuleCall_3_1_0()); 
	    }
		lv_elements_4_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArrayLiteralRule());
	        }
       		add(
       			$current, 
       			"elements",
        		lv_elements_4_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_5=']' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getArrayLiteralAccess().getRightSquareBracketKeyword_4());
    }
)
;





// Entry rule entryRuleQualifiedName
entryRuleQualifiedName returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getQualifiedNameRule()); } 
	 iv_ruleQualifiedName=ruleQualifiedName 
	 { $current=$iv_ruleQualifiedName.current.getText(); }  
	 EOF 
;

// Rule QualifiedName
ruleQualifiedName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getQualifiedNameAccess().getValidIDParserRuleCall_0()); 
    }
    this_ValidID_0=ruleValidID    {
		$current.merge(this_ValidID_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(
	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getQualifiedNameAccess().getFullStopKeyword_1_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getQualifiedNameAccess().getValidIDParserRuleCall_1_1()); 
    }
    this_ValidID_2=ruleValidID    {
		$current.merge(this_ValidID_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)*)
    ;





// Entry rule entryRuleValidID
entryRuleValidID returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getValidIDRule()); } 
	 iv_ruleValidID=ruleValidID 
	 { $current=$iv_ruleValidID.current.getText(); }  
	 EOF 
;

// Rule ValidID
ruleValidID returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    newLeafNode(this_ID_0, grammarAccess.getValidIDAccess().getIDTerminalRuleCall()); 
    }

    ;





RULE_ID : ('a'..'z'|'A'..'Z'|'$'|'_') ('a'..'z'|'A'..'Z'|'$'|'_'|'0'..'9')*;

RULE_FLOAT : (RULE_INT 'e' RULE_INT|RULE_INT? '.' RULE_INT);

RULE_HEX : '0x' ('0'..'9'|'A'..'F')+;

RULE_INT : '-'? ('0'..'9')+;

RULE_REGULAR_EXPRESSION : '~/' ('\\/'|~('/'))+ '/' ('i'|'g'|'m'|'s'|'u')*;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


