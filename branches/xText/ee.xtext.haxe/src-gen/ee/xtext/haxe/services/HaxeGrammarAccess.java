/*
* generated by Xtext
*/

package ee.xtext.haxe.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;


@Singleton
public class HaxeGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class PackageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Package");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Keyword cPackageKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cNameAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_0_1_0 = (RuleCall)cNameAssignment_0_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cClassesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cClassesClassParserRuleCall_1_0 = (RuleCall)cClassesAssignment_1.eContents().get(0);
		
		////TODO, we might need to implement AbstractFeatureCall (see xbase.ecore)
		//Package:
		//	("package" name=QualifiedName ";")? classes+=Class*;
		public ParserRule getRule() { return rule; }

		//("package" name=QualifiedName ";")? classes+=Class*
		public Group getGroup() { return cGroup; }

		//("package" name=QualifiedName ";")?
		public Group getGroup_0() { return cGroup_0; }

		//"package"
		public Keyword getPackageKeyword_0_0() { return cPackageKeyword_0_0; }

		//name=QualifiedName
		public Assignment getNameAssignment_0_1() { return cNameAssignment_0_1; }

		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_0_1_0() { return cNameQualifiedNameParserRuleCall_0_1_0; }

		//";"
		public Keyword getSemicolonKeyword_0_2() { return cSemicolonKeyword_0_2; }

		//classes+=Class*
		public Assignment getClassesAssignment_1() { return cClassesAssignment_1; }

		//Class
		public RuleCall getClassesClassParserRuleCall_1_0() { return cClassesClassParserRuleCall_1_0; }
	}

	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Type");
		private final RuleCall cClassParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Type:
		//	Class;
		public ParserRule getRule() { return rule; }

		//Class
		public RuleCall getClassParserRuleCall() { return cClassParserRuleCall; }
	}

	public class ClassElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Class");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cClassKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cMembersAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cMembersClassMemberParserRuleCall_3_0 = (RuleCall)cMembersAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Class:
		//	"class" name=QualifiedName "{" members+=ClassMember+ "}";
		public ParserRule getRule() { return rule; }

		//"class" name=QualifiedName "{" members+=ClassMember+ "}"
		public Group getGroup() { return cGroup; }

		//"class"
		public Keyword getClassKeyword_0() { return cClassKeyword_0; }

		//name=QualifiedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_1_0() { return cNameQualifiedNameParserRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//members+=ClassMember+
		public Assignment getMembersAssignment_3() { return cMembersAssignment_3; }

		//ClassMember
		public RuleCall getMembersClassMemberParserRuleCall_3_0() { return cMembersClassMemberParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class ClassMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ClassMember");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cFunctionMemberDeclarationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cVariableMemberDeclarationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ClassMember:
		//	FunctionMemberDeclaration | VariableMemberDeclaration;
		public ParserRule getRule() { return rule; }

		//FunctionMemberDeclaration | VariableMemberDeclaration
		public Alternatives getAlternatives() { return cAlternatives; }

		//FunctionMemberDeclaration
		public RuleCall getFunctionMemberDeclarationParserRuleCall_0() { return cFunctionMemberDeclarationParserRuleCall_0; }

		//VariableMemberDeclaration
		public RuleCall getVariableMemberDeclarationParserRuleCall_1() { return cVariableMemberDeclarationParserRuleCall_1; }
	}

	public class TypeReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TypeReference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cTypeTypeCrossReference_0_0 = (CrossReference)cTypeAssignment_0.eContents().get(0);
		private final RuleCall cTypeTypeQualifiedNameParserRuleCall_0_0_1 = (RuleCall)cTypeTypeCrossReference_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLessThanSignKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cArgumentsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cArgumentsTypeReferenceParserRuleCall_1_1_0 = (RuleCall)cArgumentsAssignment_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cCommaKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cArgumentsAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cArgumentsTypeReferenceParserRuleCall_1_2_1_0 = (RuleCall)cArgumentsAssignment_1_2_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		
		//TypeReference:
		//	type=[Type|QualifiedName] ("<" arguments+=TypeReference ("," arguments+=TypeReference)* ">")?;
		public ParserRule getRule() { return rule; }

		//type=[Type|QualifiedName] ("<" arguments+=TypeReference ("," arguments+=TypeReference)* ">")?
		public Group getGroup() { return cGroup; }

		//type=[Type|QualifiedName]
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//[Type|QualifiedName]
		public CrossReference getTypeTypeCrossReference_0_0() { return cTypeTypeCrossReference_0_0; }

		//QualifiedName
		public RuleCall getTypeTypeQualifiedNameParserRuleCall_0_0_1() { return cTypeTypeQualifiedNameParserRuleCall_0_0_1; }

		//(=> "<" arguments+=TypeReference ("," arguments+=TypeReference)* ">")?
		public Group getGroup_1() { return cGroup_1; }

		//=> "<"
		public Keyword getLessThanSignKeyword_1_0() { return cLessThanSignKeyword_1_0; }

		//arguments+=TypeReference
		public Assignment getArgumentsAssignment_1_1() { return cArgumentsAssignment_1_1; }

		//TypeReference
		public RuleCall getArgumentsTypeReferenceParserRuleCall_1_1_0() { return cArgumentsTypeReferenceParserRuleCall_1_1_0; }

		//("," arguments+=TypeReference)*
		public Group getGroup_1_2() { return cGroup_1_2; }

		//","
		public Keyword getCommaKeyword_1_2_0() { return cCommaKeyword_1_2_0; }

		//arguments+=TypeReference
		public Assignment getArgumentsAssignment_1_2_1() { return cArgumentsAssignment_1_2_1; }

		//TypeReference
		public RuleCall getArgumentsTypeReferenceParserRuleCall_1_2_1_0() { return cArgumentsTypeReferenceParserRuleCall_1_2_1_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_1_3() { return cGreaterThanSignKeyword_1_3; }
	}

	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cValidIDParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cValidIDParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QualifiedName:
		//	ValidID ("." ValidID)*;
		public ParserRule getRule() { return rule; }

		//ValidID ("." ValidID)*
		public Group getGroup() { return cGroup; }

		//ValidID
		public RuleCall getValidIDParserRuleCall_0() { return cValidIDParserRuleCall_0; }

		//("." ValidID)*
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//ValidID
		public RuleCall getValidIDParserRuleCall_1_1() { return cValidIDParserRuleCall_1_1; }
	}

	public class ValidIDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ValidID");
		private final RuleCall cIDTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//ValidID:
		//	ID;
		public ParserRule getRule() { return rule; }

		//ID
		public RuleCall getIDTerminalRuleCall() { return cIDTerminalRuleCall; }
	}

	public class FeatureIDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FeatureID");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cValidIDParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Keyword cSuperKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cThisKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		//FeatureID:
		//	ValidID | "super" | "this";
		public ParserRule getRule() { return rule; }

		//ValidID | "super" | "this"
		public Alternatives getAlternatives() { return cAlternatives; }

		//ValidID
		public RuleCall getValidIDParserRuleCall_0() { return cValidIDParserRuleCall_0; }

		//"super"
		public Keyword getSuperKeyword_1() { return cSuperKeyword_1; }

		//"this"
		public Keyword getThisKeyword_2() { return cThisKeyword_2; }
	}

	public class FeatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Feature");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cVariableDeclarationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFormalParameterParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cFunctionMemberDeclarationParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cVariableMemberDeclarationParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Feature:
		//	VariableDeclaration | FormalParameter | FunctionMemberDeclaration | VariableMemberDeclaration;
		public ParserRule getRule() { return rule; }

		//VariableDeclaration | FormalParameter | FunctionMemberDeclaration | VariableMemberDeclaration
		public Alternatives getAlternatives() { return cAlternatives; }

		//VariableDeclaration
		public RuleCall getVariableDeclarationParserRuleCall_0() { return cVariableDeclarationParserRuleCall_0; }

		//FormalParameter
		public RuleCall getFormalParameterParserRuleCall_1() { return cFormalParameterParserRuleCall_1; }

		//FunctionMemberDeclaration
		public RuleCall getFunctionMemberDeclarationParserRuleCall_2() { return cFunctionMemberDeclarationParserRuleCall_2; }

		//VariableMemberDeclaration
		public RuleCall getVariableMemberDeclarationParserRuleCall_3() { return cVariableMemberDeclarationParserRuleCall_3; }
	}

	public class FormalParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FormalParameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameValidIDParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cColonKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cTypeAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cTypeTypeReferenceParserRuleCall_1_1_0 = (RuleCall)cTypeAssignment_1_1.eContents().get(0);
		
		//FormalParameter:
		//	name=ValidID (":" type=TypeReference)?;
		public ParserRule getRule() { return rule; }

		//name=ValidID (":" type=TypeReference)?
		public Group getGroup() { return cGroup; }

		//name=ValidID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ValidID
		public RuleCall getNameValidIDParserRuleCall_0_0() { return cNameValidIDParserRuleCall_0_0; }

		//(":" type=TypeReference)?
		public Group getGroup_1() { return cGroup_1; }

		//":"
		public Keyword getColonKeyword_1_0() { return cColonKeyword_1_0; }

		//type=TypeReference
		public Assignment getTypeAssignment_1_1() { return cTypeAssignment_1_1; }

		//TypeReference
		public RuleCall getTypeTypeReferenceParserRuleCall_1_1_0() { return cTypeTypeReferenceParserRuleCall_1_1_0; }
	}

	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Expression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAssignmentParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cSemicolonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Expression:
		//	Assignment ";"?;
		public ParserRule getRule() { return rule; }

		//Assignment ";"?
		public Group getGroup() { return cGroup; }

		//Assignment
		public RuleCall getAssignmentParserRuleCall_0() { return cAssignmentParserRuleCall_0; }

		//";"?
		public Keyword getSemicolonKeyword_1() { return cSemicolonKeyword_1; }
	}

	public class AssignmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Assignment");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cAssignmentAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cFeatureAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final CrossReference cFeatureFeatureCrossReference_0_1_0 = (CrossReference)cFeatureAssignment_0_1.eContents().get(0);
		private final RuleCall cFeatureFeatureFeatureIDParserRuleCall_0_1_0_1 = (RuleCall)cFeatureFeatureCrossReference_0_1_0.eContents().get(1);
		private final RuleCall cOpSingleAssignParserRuleCall_0_2 = (RuleCall)cGroup_0.eContents().get(2);
		private final Assignment cValueAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cValueAssignmentParserRuleCall_0_3_0 = (RuleCall)cValueAssignment_0_3.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cOrExpressionParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Group cGroup_1_1_0 = (Group)cGroup_1_1.eContents().get(0);
		private final Group cGroup_1_1_0_0 = (Group)cGroup_1_1_0.eContents().get(0);
		private final Action cOperationLeftAction_1_1_0_0_0 = (Action)cGroup_1_1_0_0.eContents().get(0);
		private final Assignment cFeatureAssignment_1_1_0_0_1 = (Assignment)cGroup_1_1_0_0.eContents().get(1);
		private final RuleCall cFeatureOpMultiAssignParserRuleCall_1_1_0_0_1_0 = (RuleCall)cFeatureAssignment_1_1_0_0_1.eContents().get(0);
		private final Assignment cRightAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cRightAssignmentParserRuleCall_1_1_1_0 = (RuleCall)cRightAssignment_1_1_1.eContents().get(0);
		
		//Assignment returns Expression:
		//	{Assignment} feature=[Feature|FeatureID] OpSingleAssign value=Assignment | OrExpression (=> ({Operation.left=current}
		//	feature=OpMultiAssign) right=Assignment)?;
		public ParserRule getRule() { return rule; }

		//{Assignment} feature=[Feature|FeatureID] OpSingleAssign value=Assignment | OrExpression (=> ({Operation.left=current}
		//feature=OpMultiAssign) right=Assignment)?
		public Alternatives getAlternatives() { return cAlternatives; }

		//{Assignment} feature=[Feature|FeatureID] OpSingleAssign value=Assignment
		public Group getGroup_0() { return cGroup_0; }

		//{Assignment}
		public Action getAssignmentAction_0_0() { return cAssignmentAction_0_0; }

		//feature=[Feature|FeatureID]
		public Assignment getFeatureAssignment_0_1() { return cFeatureAssignment_0_1; }

		//[Feature|FeatureID]
		public CrossReference getFeatureFeatureCrossReference_0_1_0() { return cFeatureFeatureCrossReference_0_1_0; }

		//FeatureID
		public RuleCall getFeatureFeatureFeatureIDParserRuleCall_0_1_0_1() { return cFeatureFeatureFeatureIDParserRuleCall_0_1_0_1; }

		//OpSingleAssign
		public RuleCall getOpSingleAssignParserRuleCall_0_2() { return cOpSingleAssignParserRuleCall_0_2; }

		//value=Assignment
		public Assignment getValueAssignment_0_3() { return cValueAssignment_0_3; }

		//Assignment
		public RuleCall getValueAssignmentParserRuleCall_0_3_0() { return cValueAssignmentParserRuleCall_0_3_0; }

		//OrExpression (=> ({Operation.left=current} feature=OpMultiAssign) right=Assignment)?
		public Group getGroup_1() { return cGroup_1; }

		//OrExpression
		public RuleCall getOrExpressionParserRuleCall_1_0() { return cOrExpressionParserRuleCall_1_0; }

		//(=> ({Operation.left=current} feature=OpMultiAssign) right=Assignment)?
		public Group getGroup_1_1() { return cGroup_1_1; }

		//=> ({Operation.left=current} feature=OpMultiAssign)
		public Group getGroup_1_1_0() { return cGroup_1_1_0; }

		//{Operation.left=current} feature=OpMultiAssign
		public Group getGroup_1_1_0_0() { return cGroup_1_1_0_0; }

		//{Operation.left=current}
		public Action getOperationLeftAction_1_1_0_0_0() { return cOperationLeftAction_1_1_0_0_0; }

		//feature=OpMultiAssign
		public Assignment getFeatureAssignment_1_1_0_0_1() { return cFeatureAssignment_1_1_0_0_1; }

		//OpMultiAssign
		public RuleCall getFeatureOpMultiAssignParserRuleCall_1_1_0_0_1_0() { return cFeatureOpMultiAssignParserRuleCall_1_1_0_0_1_0; }

		//right=Assignment
		public Assignment getRightAssignment_1_1_1() { return cRightAssignment_1_1_1; }

		//Assignment
		public RuleCall getRightAssignmentParserRuleCall_1_1_1_0() { return cRightAssignmentParserRuleCall_1_1_1_0; }
	}

	public class OpSingleAssignElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OpSingleAssign");
		private final Keyword cEqualsSignKeyword = (Keyword)rule.eContents().get(1);
		
		//OpSingleAssign:
		//	"=";
		public ParserRule getRule() { return rule; }

		//"="
		public Keyword getEqualsSignKeyword() { return cEqualsSignKeyword; }
	}

	public class OpMultiAssignElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OpMultiAssign");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cPlusSignEqualsSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cHyphenMinusEqualsSignKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cAsteriskEqualsSignKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cSolidusEqualsSignKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cPercentSignEqualsSignKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cAmpersandEqualsSignKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cVerticalLineEqualsSignKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cCircumflexAccentEqualsSignKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final Keyword cLessThanSignLessThanSignEqualsSignKeyword_8 = (Keyword)cAlternatives.eContents().get(8);
		private final Keyword cGreaterThanSignGreaterThanSignEqualsSignKeyword_9 = (Keyword)cAlternatives.eContents().get(9);
		private final Keyword cGreaterThanSignGreaterThanSignGreaterThanSignEqualsSignKeyword_10 = (Keyword)cAlternatives.eContents().get(10);
		
		//OpMultiAssign:
		//	"+=" | "-=" | "*=" | "/=" | "%=" | "&=" | "|=" | "^=" | "<<=" | ">>=" | ">>>=";
		public ParserRule getRule() { return rule; }

		//"+=" | "-=" | "*=" | "/=" | "%=" | "&=" | "|=" | "^=" | "<<=" | ">>=" | ">>>="
		public Alternatives getAlternatives() { return cAlternatives; }

		//"+="
		public Keyword getPlusSignEqualsSignKeyword_0() { return cPlusSignEqualsSignKeyword_0; }

		//"-="
		public Keyword getHyphenMinusEqualsSignKeyword_1() { return cHyphenMinusEqualsSignKeyword_1; }

		//"*="
		public Keyword getAsteriskEqualsSignKeyword_2() { return cAsteriskEqualsSignKeyword_2; }

		//"/="
		public Keyword getSolidusEqualsSignKeyword_3() { return cSolidusEqualsSignKeyword_3; }

		//"%="
		public Keyword getPercentSignEqualsSignKeyword_4() { return cPercentSignEqualsSignKeyword_4; }

		//"&="
		public Keyword getAmpersandEqualsSignKeyword_5() { return cAmpersandEqualsSignKeyword_5; }

		//"|="
		public Keyword getVerticalLineEqualsSignKeyword_6() { return cVerticalLineEqualsSignKeyword_6; }

		//"^="
		public Keyword getCircumflexAccentEqualsSignKeyword_7() { return cCircumflexAccentEqualsSignKeyword_7; }

		//"<<="
		public Keyword getLessThanSignLessThanSignEqualsSignKeyword_8() { return cLessThanSignLessThanSignEqualsSignKeyword_8; }

		//">>="
		public Keyword getGreaterThanSignGreaterThanSignEqualsSignKeyword_9() { return cGreaterThanSignGreaterThanSignEqualsSignKeyword_9; }

		//">>>="
		public Keyword getGreaterThanSignGreaterThanSignGreaterThanSignEqualsSignKeyword_10() { return cGreaterThanSignGreaterThanSignGreaterThanSignEqualsSignKeyword_10; }
	}

	public class OrExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OrExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAndExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cOperationLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Assignment cFeatureAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final RuleCall cFeatureOpOrParserRuleCall_1_0_0_1_0 = (RuleCall)cFeatureAssignment_1_0_0_1.eContents().get(0);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightAndExpressionParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//OrExpression returns Expression:
		//	AndExpression (=> ({Operation.left=current} feature=OpOr) right=AndExpression)*;
		public ParserRule getRule() { return rule; }

		//AndExpression (=> ({Operation.left=current} feature=OpOr) right=AndExpression)*
		public Group getGroup() { return cGroup; }

		//AndExpression
		public RuleCall getAndExpressionParserRuleCall_0() { return cAndExpressionParserRuleCall_0; }

		//(=> ({Operation.left=current} feature=OpOr) right=AndExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//=> ({Operation.left=current} feature=OpOr)
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{Operation.left=current} feature=OpOr
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{Operation.left=current}
		public Action getOperationLeftAction_1_0_0_0() { return cOperationLeftAction_1_0_0_0; }

		//feature=OpOr
		public Assignment getFeatureAssignment_1_0_0_1() { return cFeatureAssignment_1_0_0_1; }

		//OpOr
		public RuleCall getFeatureOpOrParserRuleCall_1_0_0_1_0() { return cFeatureOpOrParserRuleCall_1_0_0_1_0; }

		//right=AndExpression
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//AndExpression
		public RuleCall getRightAndExpressionParserRuleCall_1_1_0() { return cRightAndExpressionParserRuleCall_1_1_0; }
	}

	public class OpOrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OpOr");
		private final Keyword cVerticalLineVerticalLineKeyword = (Keyword)rule.eContents().get(1);
		
		//OpOr:
		//	"||";
		public ParserRule getRule() { return rule; }

		//"||"
		public Keyword getVerticalLineVerticalLineKeyword() { return cVerticalLineVerticalLineKeyword; }
	}

	public class AndExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AndExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cOtherOperatorExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cOperationLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Assignment cFeatureAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final RuleCall cFeatureOpAndParserRuleCall_1_0_0_1_0 = (RuleCall)cFeatureAssignment_1_0_0_1.eContents().get(0);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightOtherOperatorExpressionParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//AndExpression returns Expression:
		//	OtherOperatorExpression (=> ({Operation.left=current} feature=OpAnd) right=OtherOperatorExpression)*;
		public ParserRule getRule() { return rule; }

		//OtherOperatorExpression (=> ({Operation.left=current} feature=OpAnd) right=OtherOperatorExpression)*
		public Group getGroup() { return cGroup; }

		//OtherOperatorExpression
		public RuleCall getOtherOperatorExpressionParserRuleCall_0() { return cOtherOperatorExpressionParserRuleCall_0; }

		//(=> ({Operation.left=current} feature=OpAnd) right=OtherOperatorExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//=> ({Operation.left=current} feature=OpAnd)
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{Operation.left=current} feature=OpAnd
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{Operation.left=current}
		public Action getOperationLeftAction_1_0_0_0() { return cOperationLeftAction_1_0_0_0; }

		//feature=OpAnd
		public Assignment getFeatureAssignment_1_0_0_1() { return cFeatureAssignment_1_0_0_1; }

		//OpAnd
		public RuleCall getFeatureOpAndParserRuleCall_1_0_0_1_0() { return cFeatureOpAndParserRuleCall_1_0_0_1_0; }

		//right=OtherOperatorExpression
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//OtherOperatorExpression
		public RuleCall getRightOtherOperatorExpressionParserRuleCall_1_1_0() { return cRightOtherOperatorExpressionParserRuleCall_1_1_0; }
	}

	public class OpAndElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OpAnd");
		private final Keyword cAmpersandAmpersandKeyword = (Keyword)rule.eContents().get(1);
		
		//OpAnd:
		//	"&&";
		public ParserRule getRule() { return rule; }

		//"&&"
		public Keyword getAmpersandAmpersandKeyword() { return cAmpersandAmpersandKeyword; }
	}

	public class OtherOperatorExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OtherOperatorExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cCompareExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cOperationLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Assignment cFeatureAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final RuleCall cFeatureOpOtherParserRuleCall_1_0_0_1_0 = (RuleCall)cFeatureAssignment_1_0_0_1.eContents().get(0);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightCompareExpressionParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//OtherOperatorExpression returns Expression:
		//	CompareExpression (=> ({Operation.left=current} feature=OpOther) right=CompareExpression)*;
		public ParserRule getRule() { return rule; }

		//CompareExpression (=> ({Operation.left=current} feature=OpOther) right=CompareExpression)*
		public Group getGroup() { return cGroup; }

		//CompareExpression
		public RuleCall getCompareExpressionParserRuleCall_0() { return cCompareExpressionParserRuleCall_0; }

		//(=> ({Operation.left=current} feature=OpOther) right=CompareExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//=> ({Operation.left=current} feature=OpOther)
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{Operation.left=current} feature=OpOther
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{Operation.left=current}
		public Action getOperationLeftAction_1_0_0_0() { return cOperationLeftAction_1_0_0_0; }

		//feature=OpOther
		public Assignment getFeatureAssignment_1_0_0_1() { return cFeatureAssignment_1_0_0_1; }

		//OpOther
		public RuleCall getFeatureOpOtherParserRuleCall_1_0_0_1_0() { return cFeatureOpOtherParserRuleCall_1_0_0_1_0; }

		//right=CompareExpression
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//CompareExpression
		public RuleCall getRightCompareExpressionParserRuleCall_1_1_0() { return cRightCompareExpressionParserRuleCall_1_1_0; }
	}

	public class OpOtherElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OpOther");
		private final Keyword cFullStopFullStopFullStopKeyword = (Keyword)rule.eContents().get(1);
		
		//OpOther:
		//	"...";
		public ParserRule getRule() { return rule; }

		//"..."
		public Keyword getFullStopFullStopFullStopKeyword() { return cFullStopFullStopFullStopKeyword; }
	}

	public class CompareExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CompareExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cBitwiseExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cOperationLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Assignment cFeatureAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final RuleCall cFeatureOpCompareParserRuleCall_1_0_0_1_0 = (RuleCall)cFeatureAssignment_1_0_0_1.eContents().get(0);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightBitwiseExpressionParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//CompareExpression returns Expression:
		//	BitwiseExpression (=> ({Operation.left=current} feature=OpCompare) right=BitwiseExpression)*;
		public ParserRule getRule() { return rule; }

		//BitwiseExpression (=> ({Operation.left=current} feature=OpCompare) right=BitwiseExpression)*
		public Group getGroup() { return cGroup; }

		//BitwiseExpression
		public RuleCall getBitwiseExpressionParserRuleCall_0() { return cBitwiseExpressionParserRuleCall_0; }

		//(=> ({Operation.left=current} feature=OpCompare) right=BitwiseExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//=> ({Operation.left=current} feature=OpCompare)
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{Operation.left=current} feature=OpCompare
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{Operation.left=current}
		public Action getOperationLeftAction_1_0_0_0() { return cOperationLeftAction_1_0_0_0; }

		//feature=OpCompare
		public Assignment getFeatureAssignment_1_0_0_1() { return cFeatureAssignment_1_0_0_1; }

		//OpCompare
		public RuleCall getFeatureOpCompareParserRuleCall_1_0_0_1_0() { return cFeatureOpCompareParserRuleCall_1_0_0_1_0; }

		//right=BitwiseExpression
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//BitwiseExpression
		public RuleCall getRightBitwiseExpressionParserRuleCall_1_1_0() { return cRightBitwiseExpressionParserRuleCall_1_1_0; }
	}

	public class OpCompareElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OpCompare");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cEqualsSignEqualsSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cExclamationMarkEqualsSignKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cGreaterThanSignEqualsSignKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cLessThanSignEqualsSignKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cGreaterThanSignKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cLessThanSignKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		
		//OpCompare:
		//	"==" | "!=" | ">=" | "<=" | ">" | "<";
		public ParserRule getRule() { return rule; }

		//"==" | "!=" | ">=" | "<=" | ">" | "<"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"=="
		public Keyword getEqualsSignEqualsSignKeyword_0() { return cEqualsSignEqualsSignKeyword_0; }

		//"!="
		public Keyword getExclamationMarkEqualsSignKeyword_1() { return cExclamationMarkEqualsSignKeyword_1; }

		//">="
		public Keyword getGreaterThanSignEqualsSignKeyword_2() { return cGreaterThanSignEqualsSignKeyword_2; }

		//"<="
		public Keyword getLessThanSignEqualsSignKeyword_3() { return cLessThanSignEqualsSignKeyword_3; }

		//">"
		public Keyword getGreaterThanSignKeyword_4() { return cGreaterThanSignKeyword_4; }

		//"<"
		public Keyword getLessThanSignKeyword_5() { return cLessThanSignKeyword_5; }
	}

	public class BitwiseExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BitwiseExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cBitshiftExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cOperationLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Assignment cFeatureAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final RuleCall cFeatureOpBitwiseParserRuleCall_1_0_0_1_0 = (RuleCall)cFeatureAssignment_1_0_0_1.eContents().get(0);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightBitshiftExpressionParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//BitwiseExpression returns Expression:
		//	BitshiftExpression (=> ({Operation.left=current} feature=OpBitwise) right=BitshiftExpression)*;
		public ParserRule getRule() { return rule; }

		//BitshiftExpression (=> ({Operation.left=current} feature=OpBitwise) right=BitshiftExpression)*
		public Group getGroup() { return cGroup; }

		//BitshiftExpression
		public RuleCall getBitshiftExpressionParserRuleCall_0() { return cBitshiftExpressionParserRuleCall_0; }

		//(=> ({Operation.left=current} feature=OpBitwise) right=BitshiftExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//=> ({Operation.left=current} feature=OpBitwise)
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{Operation.left=current} feature=OpBitwise
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{Operation.left=current}
		public Action getOperationLeftAction_1_0_0_0() { return cOperationLeftAction_1_0_0_0; }

		//feature=OpBitwise
		public Assignment getFeatureAssignment_1_0_0_1() { return cFeatureAssignment_1_0_0_1; }

		//OpBitwise
		public RuleCall getFeatureOpBitwiseParserRuleCall_1_0_0_1_0() { return cFeatureOpBitwiseParserRuleCall_1_0_0_1_0; }

		//right=BitshiftExpression
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//BitshiftExpression
		public RuleCall getRightBitshiftExpressionParserRuleCall_1_1_0() { return cRightBitshiftExpressionParserRuleCall_1_1_0; }
	}

	public class OpBitwiseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OpBitwise");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cVerticalLineKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cAmpersandKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cCircumflexAccentKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		//OpBitwise:
		//	"|" | "&" | "^";
		public ParserRule getRule() { return rule; }

		//"|" | "&" | "^"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"|"
		public Keyword getVerticalLineKeyword_0() { return cVerticalLineKeyword_0; }

		//"&"
		public Keyword getAmpersandKeyword_1() { return cAmpersandKeyword_1; }

		//"^"
		public Keyword getCircumflexAccentKeyword_2() { return cCircumflexAccentKeyword_2; }
	}

	public class BitshiftExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BitshiftExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAddExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cOperationLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Assignment cFeatureAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final RuleCall cFeatureOpBitshiftParserRuleCall_1_0_0_1_0 = (RuleCall)cFeatureAssignment_1_0_0_1.eContents().get(0);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightAddExpressionParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//BitshiftExpression returns Expression:
		//	AddExpression (=> ({Operation.left=current} feature=OpBitshift) right=AddExpression)*;
		public ParserRule getRule() { return rule; }

		//AddExpression (=> ({Operation.left=current} feature=OpBitshift) right=AddExpression)*
		public Group getGroup() { return cGroup; }

		//AddExpression
		public RuleCall getAddExpressionParserRuleCall_0() { return cAddExpressionParserRuleCall_0; }

		//(=> ({Operation.left=current} feature=OpBitshift) right=AddExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//=> ({Operation.left=current} feature=OpBitshift)
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{Operation.left=current} feature=OpBitshift
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{Operation.left=current}
		public Action getOperationLeftAction_1_0_0_0() { return cOperationLeftAction_1_0_0_0; }

		//feature=OpBitshift
		public Assignment getFeatureAssignment_1_0_0_1() { return cFeatureAssignment_1_0_0_1; }

		//OpBitshift
		public RuleCall getFeatureOpBitshiftParserRuleCall_1_0_0_1_0() { return cFeatureOpBitshiftParserRuleCall_1_0_0_1_0; }

		//right=AddExpression
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//AddExpression
		public RuleCall getRightAddExpressionParserRuleCall_1_1_0() { return cRightAddExpressionParserRuleCall_1_1_0; }
	}

	public class OpBitshiftElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OpBitshift");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cLessThanSignLessThanSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cGreaterThanSignGreaterThanSignKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cGreaterThanSignGreaterThanSignGreaterThanSignKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		//OpBitshift:
		//	"<<" | ">>" | ">>>";
		public ParserRule getRule() { return rule; }

		//"<<" | ">>" | ">>>"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"<<"
		public Keyword getLessThanSignLessThanSignKeyword_0() { return cLessThanSignLessThanSignKeyword_0; }

		//">>"
		public Keyword getGreaterThanSignGreaterThanSignKeyword_1() { return cGreaterThanSignGreaterThanSignKeyword_1; }

		//">>>"
		public Keyword getGreaterThanSignGreaterThanSignGreaterThanSignKeyword_2() { return cGreaterThanSignGreaterThanSignGreaterThanSignKeyword_2; }
	}

	public class AddExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AddExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cSubtractExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cOperationLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Assignment cFeatureAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final RuleCall cFeatureOpAddParserRuleCall_1_0_0_1_0 = (RuleCall)cFeatureAssignment_1_0_0_1.eContents().get(0);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightSubtractExpressionParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//AddExpression returns Expression:
		//	SubtractExpression (=> ({Operation.left=current} feature=OpAdd) right=SubtractExpression)*;
		public ParserRule getRule() { return rule; }

		//SubtractExpression (=> ({Operation.left=current} feature=OpAdd) right=SubtractExpression)*
		public Group getGroup() { return cGroup; }

		//SubtractExpression
		public RuleCall getSubtractExpressionParserRuleCall_0() { return cSubtractExpressionParserRuleCall_0; }

		//(=> ({Operation.left=current} feature=OpAdd) right=SubtractExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//=> ({Operation.left=current} feature=OpAdd)
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{Operation.left=current} feature=OpAdd
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{Operation.left=current}
		public Action getOperationLeftAction_1_0_0_0() { return cOperationLeftAction_1_0_0_0; }

		//feature=OpAdd
		public Assignment getFeatureAssignment_1_0_0_1() { return cFeatureAssignment_1_0_0_1; }

		//OpAdd
		public RuleCall getFeatureOpAddParserRuleCall_1_0_0_1_0() { return cFeatureOpAddParserRuleCall_1_0_0_1_0; }

		//right=SubtractExpression
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//SubtractExpression
		public RuleCall getRightSubtractExpressionParserRuleCall_1_1_0() { return cRightSubtractExpressionParserRuleCall_1_1_0; }
	}

	public class OpAddElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OpAdd");
		private final Keyword cPlusSignKeyword = (Keyword)rule.eContents().get(1);
		
		//OpAdd:
		//	"+";
		public ParserRule getRule() { return rule; }

		//"+"
		public Keyword getPlusSignKeyword() { return cPlusSignKeyword; }
	}

	public class SubtractExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SubtractExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMultiplyExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cOperationLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Assignment cFeatureAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final RuleCall cFeatureOpSubtractParserRuleCall_1_0_0_1_0 = (RuleCall)cFeatureAssignment_1_0_0_1.eContents().get(0);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightMultiplyExpressionParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//SubtractExpression returns Expression:
		//	MultiplyExpression (=> ({Operation.left=current} feature=OpSubtract) right=MultiplyExpression)*;
		public ParserRule getRule() { return rule; }

		//MultiplyExpression (=> ({Operation.left=current} feature=OpSubtract) right=MultiplyExpression)*
		public Group getGroup() { return cGroup; }

		//MultiplyExpression
		public RuleCall getMultiplyExpressionParserRuleCall_0() { return cMultiplyExpressionParserRuleCall_0; }

		//(=> ({Operation.left=current} feature=OpSubtract) right=MultiplyExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//=> ({Operation.left=current} feature=OpSubtract)
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{Operation.left=current} feature=OpSubtract
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{Operation.left=current}
		public Action getOperationLeftAction_1_0_0_0() { return cOperationLeftAction_1_0_0_0; }

		//feature=OpSubtract
		public Assignment getFeatureAssignment_1_0_0_1() { return cFeatureAssignment_1_0_0_1; }

		//OpSubtract
		public RuleCall getFeatureOpSubtractParserRuleCall_1_0_0_1_0() { return cFeatureOpSubtractParserRuleCall_1_0_0_1_0; }

		//right=MultiplyExpression
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//MultiplyExpression
		public RuleCall getRightMultiplyExpressionParserRuleCall_1_1_0() { return cRightMultiplyExpressionParserRuleCall_1_1_0; }
	}

	public class OpSubtractElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OpSubtract");
		private final Keyword cHyphenMinusKeyword = (Keyword)rule.eContents().get(1);
		
		//OpSubtract:
		//	"-";
		public ParserRule getRule() { return rule; }

		//"-"
		public Keyword getHyphenMinusKeyword() { return cHyphenMinusKeyword; }
	}

	public class MultiplyExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MultiplyExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cDivideExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cOperationLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Assignment cFeatureAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final RuleCall cFeatureOpMultiplyParserRuleCall_1_0_0_1_0 = (RuleCall)cFeatureAssignment_1_0_0_1.eContents().get(0);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightDivideExpressionParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//MultiplyExpression returns Expression:
		//	DivideExpression (=> ({Operation.left=current} feature=OpMultiply) right=DivideExpression)*;
		public ParserRule getRule() { return rule; }

		//DivideExpression (=> ({Operation.left=current} feature=OpMultiply) right=DivideExpression)*
		public Group getGroup() { return cGroup; }

		//DivideExpression
		public RuleCall getDivideExpressionParserRuleCall_0() { return cDivideExpressionParserRuleCall_0; }

		//(=> ({Operation.left=current} feature=OpMultiply) right=DivideExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//=> ({Operation.left=current} feature=OpMultiply)
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{Operation.left=current} feature=OpMultiply
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{Operation.left=current}
		public Action getOperationLeftAction_1_0_0_0() { return cOperationLeftAction_1_0_0_0; }

		//feature=OpMultiply
		public Assignment getFeatureAssignment_1_0_0_1() { return cFeatureAssignment_1_0_0_1; }

		//OpMultiply
		public RuleCall getFeatureOpMultiplyParserRuleCall_1_0_0_1_0() { return cFeatureOpMultiplyParserRuleCall_1_0_0_1_0; }

		//right=DivideExpression
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//DivideExpression
		public RuleCall getRightDivideExpressionParserRuleCall_1_1_0() { return cRightDivideExpressionParserRuleCall_1_1_0; }
	}

	public class OpMultiplyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OpMultiply");
		private final Keyword cAsteriskKeyword = (Keyword)rule.eContents().get(1);
		
		//OpMultiply:
		//	"*";
		public ParserRule getRule() { return rule; }

		//"*"
		public Keyword getAsteriskKeyword() { return cAsteriskKeyword; }
	}

	public class DivideExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DivideExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cModuloExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cOperationLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Assignment cFeatureAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final RuleCall cFeatureOpDivideParserRuleCall_1_0_0_1_0 = (RuleCall)cFeatureAssignment_1_0_0_1.eContents().get(0);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightModuloExpressionParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//DivideExpression returns Expression:
		//	ModuloExpression (=> ({Operation.left=current} feature=OpDivide) right=ModuloExpression)*;
		public ParserRule getRule() { return rule; }

		//ModuloExpression (=> ({Operation.left=current} feature=OpDivide) right=ModuloExpression)*
		public Group getGroup() { return cGroup; }

		//ModuloExpression
		public RuleCall getModuloExpressionParserRuleCall_0() { return cModuloExpressionParserRuleCall_0; }

		//(=> ({Operation.left=current} feature=OpDivide) right=ModuloExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//=> ({Operation.left=current} feature=OpDivide)
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{Operation.left=current} feature=OpDivide
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{Operation.left=current}
		public Action getOperationLeftAction_1_0_0_0() { return cOperationLeftAction_1_0_0_0; }

		//feature=OpDivide
		public Assignment getFeatureAssignment_1_0_0_1() { return cFeatureAssignment_1_0_0_1; }

		//OpDivide
		public RuleCall getFeatureOpDivideParserRuleCall_1_0_0_1_0() { return cFeatureOpDivideParserRuleCall_1_0_0_1_0; }

		//right=ModuloExpression
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//ModuloExpression
		public RuleCall getRightModuloExpressionParserRuleCall_1_1_0() { return cRightModuloExpressionParserRuleCall_1_1_0; }
	}

	public class OpDivideElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OpDivide");
		private final Keyword cSolidusKeyword = (Keyword)rule.eContents().get(1);
		
		//OpDivide:
		//	"/";
		public ParserRule getRule() { return rule; }

		//"/"
		public Keyword getSolidusKeyword() { return cSolidusKeyword; }
	}

	public class ModuloExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ModuloExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cUnaryOperationParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cOperationLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Assignment cFeatureAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final RuleCall cFeatureOpModuloParserRuleCall_1_0_0_1_0 = (RuleCall)cFeatureAssignment_1_0_0_1.eContents().get(0);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightUnaryOperationParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//ModuloExpression returns Expression:
		//	UnaryOperation (=> ({Operation.left=current} feature=OpModulo) right=UnaryOperation)*;
		public ParserRule getRule() { return rule; }

		//UnaryOperation (=> ({Operation.left=current} feature=OpModulo) right=UnaryOperation)*
		public Group getGroup() { return cGroup; }

		//UnaryOperation
		public RuleCall getUnaryOperationParserRuleCall_0() { return cUnaryOperationParserRuleCall_0; }

		//(=> ({Operation.left=current} feature=OpModulo) right=UnaryOperation)*
		public Group getGroup_1() { return cGroup_1; }

		//=> ({Operation.left=current} feature=OpModulo)
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{Operation.left=current} feature=OpModulo
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{Operation.left=current}
		public Action getOperationLeftAction_1_0_0_0() { return cOperationLeftAction_1_0_0_0; }

		//feature=OpModulo
		public Assignment getFeatureAssignment_1_0_0_1() { return cFeatureAssignment_1_0_0_1; }

		//OpModulo
		public RuleCall getFeatureOpModuloParserRuleCall_1_0_0_1_0() { return cFeatureOpModuloParserRuleCall_1_0_0_1_0; }

		//right=UnaryOperation
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//UnaryOperation
		public RuleCall getRightUnaryOperationParserRuleCall_1_1_0() { return cRightUnaryOperationParserRuleCall_1_1_0; }
	}

	public class OpModuloElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OpModulo");
		private final Keyword cPercentSignKeyword = (Keyword)rule.eContents().get(1);
		
		//OpModulo:
		//	"%";
		public ParserRule getRule() { return rule; }

		//"%"
		public Keyword getPercentSignKeyword() { return cPercentSignKeyword; }
	}

	public class UnaryOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UnaryOperation");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cUnaryOperationAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cFeatureAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cFeatureOpUnaryParserRuleCall_0_1_0 = (RuleCall)cFeatureAssignment_0_1.eContents().get(0);
		private final Assignment cOperandAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cOperandPreIncrementOperationParserRuleCall_0_2_0 = (RuleCall)cOperandAssignment_0_2.eContents().get(0);
		private final RuleCall cPreIncrementOperationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//UnaryOperation returns Expression:
		//	{UnaryOperation} feature=OpUnary operand=PreIncrementOperation | PreIncrementOperation;
		public ParserRule getRule() { return rule; }

		//{UnaryOperation} feature=OpUnary operand=PreIncrementOperation | PreIncrementOperation
		public Alternatives getAlternatives() { return cAlternatives; }

		//{UnaryOperation} feature=OpUnary operand=PreIncrementOperation
		public Group getGroup_0() { return cGroup_0; }

		//{UnaryOperation}
		public Action getUnaryOperationAction_0_0() { return cUnaryOperationAction_0_0; }

		//feature=OpUnary
		public Assignment getFeatureAssignment_0_1() { return cFeatureAssignment_0_1; }

		//OpUnary
		public RuleCall getFeatureOpUnaryParserRuleCall_0_1_0() { return cFeatureOpUnaryParserRuleCall_0_1_0; }

		//operand=PreIncrementOperation
		public Assignment getOperandAssignment_0_2() { return cOperandAssignment_0_2; }

		//PreIncrementOperation
		public RuleCall getOperandPreIncrementOperationParserRuleCall_0_2_0() { return cOperandPreIncrementOperationParserRuleCall_0_2_0; }

		//PreIncrementOperation
		public RuleCall getPreIncrementOperationParserRuleCall_1() { return cPreIncrementOperationParserRuleCall_1; }
	}

	public class OpUnaryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OpUnary");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cExclamationMarkKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cTildeKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		//OpUnary:
		//	"!" | "-" | "~";
		public ParserRule getRule() { return rule; }

		//"!" | "-" | "~"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"!"
		public Keyword getExclamationMarkKeyword_0() { return cExclamationMarkKeyword_0; }

		//"-"
		public Keyword getHyphenMinusKeyword_1() { return cHyphenMinusKeyword_1; }

		//"~"
		public Keyword getTildeKeyword_2() { return cTildeKeyword_2; }
	}

	public class PreIncrementOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PreIncrementOperation");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cGroup_0.eContents().get(0);
		private final Action cPreIncrementOperationAction_0_0_0 = (Action)cGroup_0_0.eContents().get(0);
		private final Assignment cFeatureAssignment_0_0_1 = (Assignment)cGroup_0_0.eContents().get(1);
		private final RuleCall cFeatureOpIncrementParserRuleCall_0_0_1_0 = (RuleCall)cFeatureAssignment_0_0_1.eContents().get(0);
		private final Assignment cOperandAssignment_0_0_2 = (Assignment)cGroup_0_0.eContents().get(2);
		private final RuleCall cOperandPostIncrementOperationParserRuleCall_0_0_2_0 = (RuleCall)cOperandAssignment_0_0_2.eContents().get(0);
		private final RuleCall cPostIncrementOperationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//PreIncrementOperation returns Expression:
		//	=> ({PreIncrementOperation} feature=OpIncrement operand=PostIncrementOperation) | PostIncrementOperation;
		public ParserRule getRule() { return rule; }

		//=> ({PreIncrementOperation} feature=OpIncrement operand=PostIncrementOperation) | PostIncrementOperation
		public Alternatives getAlternatives() { return cAlternatives; }

		//=> ({PreIncrementOperation} feature=OpIncrement operand=PostIncrementOperation)
		public Group getGroup_0() { return cGroup_0; }

		//{PreIncrementOperation} feature=OpIncrement operand=PostIncrementOperation
		public Group getGroup_0_0() { return cGroup_0_0; }

		//{PreIncrementOperation}
		public Action getPreIncrementOperationAction_0_0_0() { return cPreIncrementOperationAction_0_0_0; }

		//feature=OpIncrement
		public Assignment getFeatureAssignment_0_0_1() { return cFeatureAssignment_0_0_1; }

		//OpIncrement
		public RuleCall getFeatureOpIncrementParserRuleCall_0_0_1_0() { return cFeatureOpIncrementParserRuleCall_0_0_1_0; }

		//operand=PostIncrementOperation
		public Assignment getOperandAssignment_0_0_2() { return cOperandAssignment_0_0_2; }

		//PostIncrementOperation
		public RuleCall getOperandPostIncrementOperationParserRuleCall_0_0_2_0() { return cOperandPostIncrementOperationParserRuleCall_0_0_2_0; }

		//PostIncrementOperation
		public RuleCall getPostIncrementOperationParserRuleCall_1() { return cPostIncrementOperationParserRuleCall_1; }
	}

	public class PostIncrementOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PostIncrementOperation");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cGroup_0.eContents().get(0);
		private final Action cPostIncrementOperationAction_0_0_0 = (Action)cGroup_0_0.eContents().get(0);
		private final Assignment cOperandAssignment_0_0_1 = (Assignment)cGroup_0_0.eContents().get(1);
		private final RuleCall cOperandMemberFeatureCallParserRuleCall_0_0_1_0 = (RuleCall)cOperandAssignment_0_0_1.eContents().get(0);
		private final Assignment cFeatureAssignment_0_0_2 = (Assignment)cGroup_0_0.eContents().get(2);
		private final RuleCall cFeatureOpIncrementParserRuleCall_0_0_2_0 = (RuleCall)cFeatureAssignment_0_0_2.eContents().get(0);
		private final RuleCall cMemberFeatureCallParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//PostIncrementOperation returns Expression:
		//	=> ({PostIncrementOperation} operand=MemberFeatureCall feature=OpIncrement) | MemberFeatureCall;
		public ParserRule getRule() { return rule; }

		//=> ({PostIncrementOperation} operand=MemberFeatureCall feature=OpIncrement) | MemberFeatureCall
		public Alternatives getAlternatives() { return cAlternatives; }

		//=> ({PostIncrementOperation} operand=MemberFeatureCall feature=OpIncrement)
		public Group getGroup_0() { return cGroup_0; }

		//{PostIncrementOperation} operand=MemberFeatureCall feature=OpIncrement
		public Group getGroup_0_0() { return cGroup_0_0; }

		//{PostIncrementOperation}
		public Action getPostIncrementOperationAction_0_0_0() { return cPostIncrementOperationAction_0_0_0; }

		//operand=MemberFeatureCall
		public Assignment getOperandAssignment_0_0_1() { return cOperandAssignment_0_0_1; }

		//MemberFeatureCall
		public RuleCall getOperandMemberFeatureCallParserRuleCall_0_0_1_0() { return cOperandMemberFeatureCallParserRuleCall_0_0_1_0; }

		//feature=OpIncrement
		public Assignment getFeatureAssignment_0_0_2() { return cFeatureAssignment_0_0_2; }

		//OpIncrement
		public RuleCall getFeatureOpIncrementParserRuleCall_0_0_2_0() { return cFeatureOpIncrementParserRuleCall_0_0_2_0; }

		//MemberFeatureCall
		public RuleCall getMemberFeatureCallParserRuleCall_1() { return cMemberFeatureCallParserRuleCall_1; }
	}

	public class OpIncrementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OpIncrement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cPlusSignPlusSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cHyphenMinusHyphenMinusKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//OpIncrement:
		//	"++" | "--";
		public ParserRule getRule() { return rule; }

		//"++" | "--"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"++"
		public Keyword getPlusSignPlusSignKeyword_0() { return cPlusSignPlusSignKeyword_0; }

		//"--"
		public Keyword getHyphenMinusHyphenMinusKeyword_1() { return cHyphenMinusHyphenMinusKeyword_1; }
	}

	public class MemberFeatureCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MemberFeatureCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPrimaryExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Group cGroup_1_0_0_0 = (Group)cGroup_1_0_0.eContents().get(0);
		private final Action cAssignmentAssignableAction_1_0_0_0_0 = (Action)cGroup_1_0_0_0.eContents().get(0);
		private final Keyword cFullStopKeyword_1_0_0_0_1 = (Keyword)cGroup_1_0_0_0.eContents().get(1);
		private final Assignment cFeatureAssignment_1_0_0_0_2 = (Assignment)cGroup_1_0_0_0.eContents().get(2);
		private final CrossReference cFeatureFeatureCrossReference_1_0_0_0_2_0 = (CrossReference)cFeatureAssignment_1_0_0_0_2.eContents().get(0);
		private final RuleCall cFeatureFeatureFeatureIDParserRuleCall_1_0_0_0_2_0_1 = (RuleCall)cFeatureFeatureCrossReference_1_0_0_0_2_0.eContents().get(1);
		private final RuleCall cOpSingleAssignParserRuleCall_1_0_0_0_3 = (RuleCall)cGroup_1_0_0_0.eContents().get(3);
		private final Assignment cValueAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cValueAssignmentParserRuleCall_1_0_1_0 = (RuleCall)cValueAssignment_1_0_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Group cGroup_1_1_0 = (Group)cGroup_1_1.eContents().get(0);
		private final Group cGroup_1_1_0_0 = (Group)cGroup_1_1_0.eContents().get(0);
		private final Action cArrayAssignmentAssignameAction_1_1_0_0_0 = (Action)cGroup_1_1_0_0.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1_1_0_0_1 = (Keyword)cGroup_1_1_0_0.eContents().get(1);
		private final Assignment cFeatureAssignment_1_1_0_0_2 = (Assignment)cGroup_1_1_0_0.eContents().get(2);
		private final RuleCall cFeatureExpressionParserRuleCall_1_1_0_0_2_0 = (RuleCall)cFeatureAssignment_1_1_0_0_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_1_0_0_3 = (Keyword)cGroup_1_1_0_0.eContents().get(3);
		private final RuleCall cOpSingleAssignParserRuleCall_1_1_0_0_4 = (RuleCall)cGroup_1_1_0_0.eContents().get(4);
		private final Assignment cValueAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cValueAssignmentParserRuleCall_1_1_1_0 = (RuleCall)cValueAssignment_1_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cAlternatives_1.eContents().get(2);
		private final Group cGroup_1_2_0 = (Group)cGroup_1_2.eContents().get(0);
		private final Group cGroup_1_2_0_0 = (Group)cGroup_1_2_0.eContents().get(0);
		private final Action cMemberFeatureCallTargetAction_1_2_0_0_0 = (Action)cGroup_1_2_0_0.eContents().get(0);
		private final Keyword cFullStopKeyword_1_2_0_0_1 = (Keyword)cGroup_1_2_0_0.eContents().get(1);
		private final Assignment cFeatureAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final CrossReference cFeatureFeatureCrossReference_1_2_1_0 = (CrossReference)cFeatureAssignment_1_2_1.eContents().get(0);
		private final RuleCall cFeatureFeatureFeatureIDParserRuleCall_1_2_1_0_1 = (RuleCall)cFeatureFeatureCrossReference_1_2_1_0.eContents().get(1);
		private final Group cGroup_1_2_2 = (Group)cGroup_1_2.eContents().get(2);
		private final Assignment cExplicitOperationCallAssignment_1_2_2_0 = (Assignment)cGroup_1_2_2.eContents().get(0);
		private final Keyword cExplicitOperationCallLeftParenthesisKeyword_1_2_2_0_0 = (Keyword)cExplicitOperationCallAssignment_1_2_2_0.eContents().get(0);
		private final Group cGroup_1_2_2_1 = (Group)cGroup_1_2_2.eContents().get(1);
		private final Assignment cArgumentsAssignment_1_2_2_1_0 = (Assignment)cGroup_1_2_2_1.eContents().get(0);
		private final RuleCall cArgumentsExpressionParserRuleCall_1_2_2_1_0_0 = (RuleCall)cArgumentsAssignment_1_2_2_1_0.eContents().get(0);
		private final Group cGroup_1_2_2_1_1 = (Group)cGroup_1_2_2_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_2_2_1_1_0 = (Keyword)cGroup_1_2_2_1_1.eContents().get(0);
		private final Assignment cArgumentsAssignment_1_2_2_1_1_1 = (Assignment)cGroup_1_2_2_1_1.eContents().get(1);
		private final RuleCall cArgumentsExpressionParserRuleCall_1_2_2_1_1_1_0 = (RuleCall)cArgumentsAssignment_1_2_2_1_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_2_2_2 = (Keyword)cGroup_1_2_2.eContents().get(2);
		private final Group cGroup_1_3 = (Group)cAlternatives_1.eContents().get(3);
		private final Group cGroup_1_3_0 = (Group)cGroup_1_3.eContents().get(0);
		private final Action cArrayAccessTargetAction_1_3_0_0 = (Action)cGroup_1_3_0.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1_3_1 = (Keyword)cGroup_1_3.eContents().get(1);
		private final Assignment cFeatureAssignment_1_3_2 = (Assignment)cGroup_1_3.eContents().get(2);
		private final RuleCall cFeatureExpressionParserRuleCall_1_3_2_0 = (RuleCall)cFeatureAssignment_1_3_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_3_3 = (Keyword)cGroup_1_3.eContents().get(3);
		private final Group cGroup_1_3_4 = (Group)cGroup_1_3.eContents().get(4);
		private final Assignment cExplicitOperationCallAssignment_1_3_4_0 = (Assignment)cGroup_1_3_4.eContents().get(0);
		private final Keyword cExplicitOperationCallLeftParenthesisKeyword_1_3_4_0_0 = (Keyword)cExplicitOperationCallAssignment_1_3_4_0.eContents().get(0);
		private final Group cGroup_1_3_4_1 = (Group)cGroup_1_3_4.eContents().get(1);
		private final Assignment cArgumentsAssignment_1_3_4_1_0 = (Assignment)cGroup_1_3_4_1.eContents().get(0);
		private final RuleCall cArgumentsExpressionParserRuleCall_1_3_4_1_0_0 = (RuleCall)cArgumentsAssignment_1_3_4_1_0.eContents().get(0);
		private final Group cGroup_1_3_4_1_1 = (Group)cGroup_1_3_4_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_3_4_1_1_0 = (Keyword)cGroup_1_3_4_1_1.eContents().get(0);
		private final Assignment cArgumentsAssignment_1_3_4_1_1_1 = (Assignment)cGroup_1_3_4_1_1.eContents().get(1);
		private final RuleCall cArgumentsExpressionParserRuleCall_1_3_4_1_1_1_0 = (RuleCall)cArgumentsAssignment_1_3_4_1_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_3_4_2 = (Keyword)cGroup_1_3_4.eContents().get(2);
		
		//MemberFeatureCall returns Expression:
		//	PrimaryExpression (=> ({Assignment.assignable=current} "." feature=[Feature|FeatureID] OpSingleAssign)
		//	value=Assignment | => ({ArrayAssignment.assigname=current} "[" feature=Expression "]" OpSingleAssign) value=Assignment
		//	| => ({MemberFeatureCall.target=current} ".") feature=[Feature|FeatureID] (=> explicitOperationCall?="(" //memberCallArguments+=XShortClosure |
		//	(arguments+=Expression ("," arguments+=Expression)*)? ")")? | => ({ArrayAccess.target=current}) "[" feature=Expression
		//	"]" (=> explicitOperationCall?="(" //memberCallArguments+=XShortClosure |
		//	(arguments+=Expression ("," arguments+=Expression)*)? ")")?)*;
		public ParserRule getRule() { return rule; }

		//PrimaryExpression (=> ({Assignment.assignable=current} "." feature=[Feature|FeatureID] OpSingleAssign) value=Assignment
		//| => ({ArrayAssignment.assigname=current} "[" feature=Expression "]" OpSingleAssign) value=Assignment | =>
		//({MemberFeatureCall.target=current} ".") feature=[Feature|FeatureID] (=> explicitOperationCall?="(" //memberCallArguments+=XShortClosure |
		//(arguments+=Expression ("," arguments+=Expression)*)? ")")? | => ({ArrayAccess.target=current}) "[" feature=Expression
		//"]" (=> explicitOperationCall?="(" //memberCallArguments+=XShortClosure |
		//(arguments+=Expression ("," arguments+=Expression)*)? ")")?)*
		public Group getGroup() { return cGroup; }

		//PrimaryExpression
		public RuleCall getPrimaryExpressionParserRuleCall_0() { return cPrimaryExpressionParserRuleCall_0; }

		//(=> ({Assignment.assignable=current} "." feature=[Feature|FeatureID] OpSingleAssign) value=Assignment | =>
		//({ArrayAssignment.assigname=current} "[" feature=Expression "]" OpSingleAssign) value=Assignment | =>
		//({MemberFeatureCall.target=current} ".") feature=[Feature|FeatureID] (=> explicitOperationCall?="(" //memberCallArguments+=XShortClosure |
		//(arguments+=Expression ("," arguments+=Expression)*)? ")")? | => ({ArrayAccess.target=current}) "[" feature=Expression
		//"]" (=> explicitOperationCall?="(" //memberCallArguments+=XShortClosure |
		//(arguments+=Expression ("," arguments+=Expression)*)? ")")?)*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//=> ({Assignment.assignable=current} "." feature=[Feature|FeatureID] OpSingleAssign) value=Assignment
		public Group getGroup_1_0() { return cGroup_1_0; }

		//=> ({Assignment.assignable=current} "." feature=[Feature|FeatureID] OpSingleAssign)
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{Assignment.assignable=current} "." feature=[Feature|FeatureID] OpSingleAssign
		public Group getGroup_1_0_0_0() { return cGroup_1_0_0_0; }

		//{Assignment.assignable=current}
		public Action getAssignmentAssignableAction_1_0_0_0_0() { return cAssignmentAssignableAction_1_0_0_0_0; }

		//"."
		public Keyword getFullStopKeyword_1_0_0_0_1() { return cFullStopKeyword_1_0_0_0_1; }

		//feature=[Feature|FeatureID]
		public Assignment getFeatureAssignment_1_0_0_0_2() { return cFeatureAssignment_1_0_0_0_2; }

		//[Feature|FeatureID]
		public CrossReference getFeatureFeatureCrossReference_1_0_0_0_2_0() { return cFeatureFeatureCrossReference_1_0_0_0_2_0; }

		//FeatureID
		public RuleCall getFeatureFeatureFeatureIDParserRuleCall_1_0_0_0_2_0_1() { return cFeatureFeatureFeatureIDParserRuleCall_1_0_0_0_2_0_1; }

		//OpSingleAssign
		public RuleCall getOpSingleAssignParserRuleCall_1_0_0_0_3() { return cOpSingleAssignParserRuleCall_1_0_0_0_3; }

		//value=Assignment
		public Assignment getValueAssignment_1_0_1() { return cValueAssignment_1_0_1; }

		//Assignment
		public RuleCall getValueAssignmentParserRuleCall_1_0_1_0() { return cValueAssignmentParserRuleCall_1_0_1_0; }

		//=> ({ArrayAssignment.assigname=current} "[" feature=Expression "]" OpSingleAssign) value=Assignment
		public Group getGroup_1_1() { return cGroup_1_1; }

		//=> ({ArrayAssignment.assigname=current} "[" feature=Expression "]" OpSingleAssign)
		public Group getGroup_1_1_0() { return cGroup_1_1_0; }

		//{ArrayAssignment.assigname=current} "[" feature=Expression "]" OpSingleAssign
		public Group getGroup_1_1_0_0() { return cGroup_1_1_0_0; }

		//{ArrayAssignment.assigname=current}
		public Action getArrayAssignmentAssignameAction_1_1_0_0_0() { return cArrayAssignmentAssignameAction_1_1_0_0_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1_1_0_0_1() { return cLeftSquareBracketKeyword_1_1_0_0_1; }

		//feature=Expression
		public Assignment getFeatureAssignment_1_1_0_0_2() { return cFeatureAssignment_1_1_0_0_2; }

		//Expression
		public RuleCall getFeatureExpressionParserRuleCall_1_1_0_0_2_0() { return cFeatureExpressionParserRuleCall_1_1_0_0_2_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_1_1_0_0_3() { return cRightSquareBracketKeyword_1_1_0_0_3; }

		//OpSingleAssign
		public RuleCall getOpSingleAssignParserRuleCall_1_1_0_0_4() { return cOpSingleAssignParserRuleCall_1_1_0_0_4; }

		//value=Assignment
		public Assignment getValueAssignment_1_1_1() { return cValueAssignment_1_1_1; }

		//Assignment
		public RuleCall getValueAssignmentParserRuleCall_1_1_1_0() { return cValueAssignmentParserRuleCall_1_1_1_0; }

		//=> ({MemberFeatureCall.target=current} ".") feature=[Feature|FeatureID] (=> explicitOperationCall?="(" //memberCallArguments+=XShortClosure |
		//(arguments+=Expression ("," arguments+=Expression)*)? ")")?
		public Group getGroup_1_2() { return cGroup_1_2; }

		//=> ({MemberFeatureCall.target=current} ".")
		public Group getGroup_1_2_0() { return cGroup_1_2_0; }

		//{MemberFeatureCall.target=current} "."
		public Group getGroup_1_2_0_0() { return cGroup_1_2_0_0; }

		//{MemberFeatureCall.target=current}
		public Action getMemberFeatureCallTargetAction_1_2_0_0_0() { return cMemberFeatureCallTargetAction_1_2_0_0_0; }

		//"."
		public Keyword getFullStopKeyword_1_2_0_0_1() { return cFullStopKeyword_1_2_0_0_1; }

		//feature=[Feature|FeatureID]
		public Assignment getFeatureAssignment_1_2_1() { return cFeatureAssignment_1_2_1; }

		//[Feature|FeatureID]
		public CrossReference getFeatureFeatureCrossReference_1_2_1_0() { return cFeatureFeatureCrossReference_1_2_1_0; }

		//FeatureID
		public RuleCall getFeatureFeatureFeatureIDParserRuleCall_1_2_1_0_1() { return cFeatureFeatureFeatureIDParserRuleCall_1_2_1_0_1; }

		//(=> explicitOperationCall?="(" //memberCallArguments+=XShortClosure |
		//(arguments+=Expression ("," arguments+=Expression)*)? ")")?
		public Group getGroup_1_2_2() { return cGroup_1_2_2; }

		//=> explicitOperationCall?="("
		public Assignment getExplicitOperationCallAssignment_1_2_2_0() { return cExplicitOperationCallAssignment_1_2_2_0; }

		//"("
		public Keyword getExplicitOperationCallLeftParenthesisKeyword_1_2_2_0_0() { return cExplicitOperationCallLeftParenthesisKeyword_1_2_2_0_0; }

		////memberCallArguments+=XShortClosure |
		//(arguments+=Expression ("," arguments+=Expression)*)?
		public Group getGroup_1_2_2_1() { return cGroup_1_2_2_1; }

		////memberCallArguments+=XShortClosure |
		//arguments+=Expression
		public Assignment getArgumentsAssignment_1_2_2_1_0() { return cArgumentsAssignment_1_2_2_1_0; }

		//Expression
		public RuleCall getArgumentsExpressionParserRuleCall_1_2_2_1_0_0() { return cArgumentsExpressionParserRuleCall_1_2_2_1_0_0; }

		//("," arguments+=Expression)*
		public Group getGroup_1_2_2_1_1() { return cGroup_1_2_2_1_1; }

		//","
		public Keyword getCommaKeyword_1_2_2_1_1_0() { return cCommaKeyword_1_2_2_1_1_0; }

		//arguments+=Expression
		public Assignment getArgumentsAssignment_1_2_2_1_1_1() { return cArgumentsAssignment_1_2_2_1_1_1; }

		//Expression
		public RuleCall getArgumentsExpressionParserRuleCall_1_2_2_1_1_1_0() { return cArgumentsExpressionParserRuleCall_1_2_2_1_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_2_2_2() { return cRightParenthesisKeyword_1_2_2_2; }

		//=> ({ArrayAccess.target=current}) "[" feature=Expression "]" (=> explicitOperationCall?="(" //memberCallArguments+=XShortClosure |
		//(arguments+=Expression ("," arguments+=Expression)*)? ")")?
		public Group getGroup_1_3() { return cGroup_1_3; }

		//=> ({ArrayAccess.target=current})
		public Group getGroup_1_3_0() { return cGroup_1_3_0; }

		//{ArrayAccess.target=current}
		public Action getArrayAccessTargetAction_1_3_0_0() { return cArrayAccessTargetAction_1_3_0_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1_3_1() { return cLeftSquareBracketKeyword_1_3_1; }

		//feature=Expression
		public Assignment getFeatureAssignment_1_3_2() { return cFeatureAssignment_1_3_2; }

		//Expression
		public RuleCall getFeatureExpressionParserRuleCall_1_3_2_0() { return cFeatureExpressionParserRuleCall_1_3_2_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_1_3_3() { return cRightSquareBracketKeyword_1_3_3; }

		//(=> explicitOperationCall?="(" //memberCallArguments+=XShortClosure |
		//(arguments+=Expression ("," arguments+=Expression)*)? ")")?
		public Group getGroup_1_3_4() { return cGroup_1_3_4; }

		//=> explicitOperationCall?="("
		public Assignment getExplicitOperationCallAssignment_1_3_4_0() { return cExplicitOperationCallAssignment_1_3_4_0; }

		//"("
		public Keyword getExplicitOperationCallLeftParenthesisKeyword_1_3_4_0_0() { return cExplicitOperationCallLeftParenthesisKeyword_1_3_4_0_0; }

		////memberCallArguments+=XShortClosure |
		//(arguments+=Expression ("," arguments+=Expression)*)?
		public Group getGroup_1_3_4_1() { return cGroup_1_3_4_1; }

		////memberCallArguments+=XShortClosure |
		//arguments+=Expression
		public Assignment getArgumentsAssignment_1_3_4_1_0() { return cArgumentsAssignment_1_3_4_1_0; }

		//Expression
		public RuleCall getArgumentsExpressionParserRuleCall_1_3_4_1_0_0() { return cArgumentsExpressionParserRuleCall_1_3_4_1_0_0; }

		//("," arguments+=Expression)*
		public Group getGroup_1_3_4_1_1() { return cGroup_1_3_4_1_1; }

		//","
		public Keyword getCommaKeyword_1_3_4_1_1_0() { return cCommaKeyword_1_3_4_1_1_0; }

		//arguments+=Expression
		public Assignment getArgumentsAssignment_1_3_4_1_1_1() { return cArgumentsAssignment_1_3_4_1_1_1; }

		//Expression
		public RuleCall getArgumentsExpressionParserRuleCall_1_3_4_1_1_1_0() { return cArgumentsExpressionParserRuleCall_1_3_4_1_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_3_4_2() { return cRightParenthesisKeyword_1_3_4_2; }
	}

	public class PrimaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PrimaryExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBlockExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cParenthesizedExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cIfExpressionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cWhileExpressionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cDoWhileExpressionParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cForLoopExpressionParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cReturnExpressionParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cBreakExpressionParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cContinueExpressionParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cThrowExpressionParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cTryCatchExpressionParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		private final RuleCall cSwitchExpressionParserRuleCall_11 = (RuleCall)cAlternatives.eContents().get(11);
		private final RuleCall cFunctionExpressionParserRuleCall_12 = (RuleCall)cAlternatives.eContents().get(12);
		private final RuleCall cFeatureCallParserRuleCall_13 = (RuleCall)cAlternatives.eContents().get(13);
		private final RuleCall cConstructorCallParserRuleCall_14 = (RuleCall)cAlternatives.eContents().get(14);
		private final RuleCall cLiteralParserRuleCall_15 = (RuleCall)cAlternatives.eContents().get(15);
		
		//PrimaryExpression returns Expression:
		//	BlockExpression | ParenthesizedExpression | IfExpression | WhileExpression | DoWhileExpression | ForLoopExpression |
		//	ReturnExpression | BreakExpression | ContinueExpression | ThrowExpression | TryCatchExpression | SwitchExpression |
		//	FunctionExpression | FeatureCall | ConstructorCall | Literal;
		public ParserRule getRule() { return rule; }

		//BlockExpression | ParenthesizedExpression | IfExpression | WhileExpression | DoWhileExpression | ForLoopExpression |
		//ReturnExpression | BreakExpression | ContinueExpression | ThrowExpression | TryCatchExpression | SwitchExpression |
		//FunctionExpression | FeatureCall | ConstructorCall | Literal
		public Alternatives getAlternatives() { return cAlternatives; }

		//BlockExpression
		public RuleCall getBlockExpressionParserRuleCall_0() { return cBlockExpressionParserRuleCall_0; }

		//ParenthesizedExpression
		public RuleCall getParenthesizedExpressionParserRuleCall_1() { return cParenthesizedExpressionParserRuleCall_1; }

		//IfExpression
		public RuleCall getIfExpressionParserRuleCall_2() { return cIfExpressionParserRuleCall_2; }

		//WhileExpression
		public RuleCall getWhileExpressionParserRuleCall_3() { return cWhileExpressionParserRuleCall_3; }

		//DoWhileExpression
		public RuleCall getDoWhileExpressionParserRuleCall_4() { return cDoWhileExpressionParserRuleCall_4; }

		//ForLoopExpression
		public RuleCall getForLoopExpressionParserRuleCall_5() { return cForLoopExpressionParserRuleCall_5; }

		//ReturnExpression
		public RuleCall getReturnExpressionParserRuleCall_6() { return cReturnExpressionParserRuleCall_6; }

		//BreakExpression
		public RuleCall getBreakExpressionParserRuleCall_7() { return cBreakExpressionParserRuleCall_7; }

		//ContinueExpression
		public RuleCall getContinueExpressionParserRuleCall_8() { return cContinueExpressionParserRuleCall_8; }

		//ThrowExpression
		public RuleCall getThrowExpressionParserRuleCall_9() { return cThrowExpressionParserRuleCall_9; }

		//TryCatchExpression
		public RuleCall getTryCatchExpressionParserRuleCall_10() { return cTryCatchExpressionParserRuleCall_10; }

		//SwitchExpression
		public RuleCall getSwitchExpressionParserRuleCall_11() { return cSwitchExpressionParserRuleCall_11; }

		//FunctionExpression
		public RuleCall getFunctionExpressionParserRuleCall_12() { return cFunctionExpressionParserRuleCall_12; }

		//FeatureCall
		public RuleCall getFeatureCallParserRuleCall_13() { return cFeatureCallParserRuleCall_13; }

		//ConstructorCall
		public RuleCall getConstructorCallParserRuleCall_14() { return cConstructorCallParserRuleCall_14; }

		//Literal
		public RuleCall getLiteralParserRuleCall_15() { return cLiteralParserRuleCall_15; }
	}

	public class BlockExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BlockExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBlockExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cExpressionsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cExpressionsExpressionInsideBlockParserRuleCall_2_0_0 = (RuleCall)cExpressionsAssignment_2_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//BlockExpression returns Expression:
		//	{BlockExpression} // '[' temp=STRING ']' 
		//	"{" (expressions+=ExpressionInsideBlock ";"?)* "}";
		public ParserRule getRule() { return rule; }

		//{BlockExpression} // '[' temp=STRING ']' 
		//"{" (expressions+=ExpressionInsideBlock ";"?)* "}"
		public Group getGroup() { return cGroup; }

		//{BlockExpression}
		public Action getBlockExpressionAction_0() { return cBlockExpressionAction_0; }

		//// '[' temp=STRING ']' 
		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//(expressions+=ExpressionInsideBlock ";"?)*
		public Group getGroup_2() { return cGroup_2; }

		//expressions+=ExpressionInsideBlock
		public Assignment getExpressionsAssignment_2_0() { return cExpressionsAssignment_2_0; }

		//ExpressionInsideBlock
		public RuleCall getExpressionsExpressionInsideBlockParserRuleCall_2_0_0() { return cExpressionsExpressionInsideBlockParserRuleCall_2_0_0; }

		//";"?
		public Keyword getSemicolonKeyword_2_1() { return cSemicolonKeyword_2_1; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class ExpressionInsideBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExpressionInsideBlock");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cVariableDeclarationsParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ExpressionInsideBlock returns Expression:
		//	VariableDeclarations | Expression;
		public ParserRule getRule() { return rule; }

		//VariableDeclarations | Expression
		public Alternatives getAlternatives() { return cAlternatives; }

		//VariableDeclarations
		public RuleCall getVariableDeclarationsParserRuleCall_0() { return cVariableDeclarationsParserRuleCall_0; }

		//Expression
		public RuleCall getExpressionParserRuleCall_1() { return cExpressionParserRuleCall_1; }
	}

	public class VariableDeclarationsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VariableDeclarations");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cVariableDeclarationsAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cVarKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cDeclarationsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDeclarationsVariableDeclarationParserRuleCall_2_0 = (RuleCall)cDeclarationsAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cDeclarationsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cDeclarationsVariableDeclarationParserRuleCall_3_1_0 = (RuleCall)cDeclarationsAssignment_3_1.eContents().get(0);
		
		//VariableDeclarations returns Expression:
		//	{VariableDeclarations} "var" declarations+=VariableDeclaration ("," declarations+=VariableDeclaration)*;
		public ParserRule getRule() { return rule; }

		//{VariableDeclarations} "var" declarations+=VariableDeclaration ("," declarations+=VariableDeclaration)*
		public Group getGroup() { return cGroup; }

		//{VariableDeclarations}
		public Action getVariableDeclarationsAction_0() { return cVariableDeclarationsAction_0; }

		//"var"
		public Keyword getVarKeyword_1() { return cVarKeyword_1; }

		//declarations+=VariableDeclaration
		public Assignment getDeclarationsAssignment_2() { return cDeclarationsAssignment_2; }

		//VariableDeclaration
		public RuleCall getDeclarationsVariableDeclarationParserRuleCall_2_0() { return cDeclarationsVariableDeclarationParserRuleCall_2_0; }

		//("," declarations+=VariableDeclaration)*
		public Group getGroup_3() { return cGroup_3; }

		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//declarations+=VariableDeclaration
		public Assignment getDeclarationsAssignment_3_1() { return cDeclarationsAssignment_3_1; }

		//VariableDeclaration
		public RuleCall getDeclarationsVariableDeclarationParserRuleCall_3_1_0() { return cDeclarationsVariableDeclarationParserRuleCall_3_1_0; }
	}

	public class VariableDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VariableDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cVariableDeclarationAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameValidIDParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cColonKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cTypeAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cTypeTypeReferenceParserRuleCall_2_1_0 = (RuleCall)cTypeAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cEqualsSignKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cExpressionAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_3_1_0 = (RuleCall)cExpressionAssignment_3_1.eContents().get(0);
		
		//VariableDeclaration:
		//	{VariableDeclaration} name=ValidID (":" type=TypeReference)? ("=" expression=Expression)?;
		public ParserRule getRule() { return rule; }

		//{VariableDeclaration} name=ValidID (":" type=TypeReference)? ("=" expression=Expression)?
		public Group getGroup() { return cGroup; }

		//{VariableDeclaration}
		public Action getVariableDeclarationAction_0() { return cVariableDeclarationAction_0; }

		//name=ValidID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ValidID
		public RuleCall getNameValidIDParserRuleCall_1_0() { return cNameValidIDParserRuleCall_1_0; }

		//(":" type=TypeReference)?
		public Group getGroup_2() { return cGroup_2; }

		//":"
		public Keyword getColonKeyword_2_0() { return cColonKeyword_2_0; }

		//type=TypeReference
		public Assignment getTypeAssignment_2_1() { return cTypeAssignment_2_1; }

		//TypeReference
		public RuleCall getTypeTypeReferenceParserRuleCall_2_1_0() { return cTypeTypeReferenceParserRuleCall_2_1_0; }

		//("=" expression=Expression)?
		public Group getGroup_3() { return cGroup_3; }

		//"="
		public Keyword getEqualsSignKeyword_3_0() { return cEqualsSignKeyword_3_0; }

		//expression=Expression
		public Assignment getExpressionAssignment_3_1() { return cExpressionAssignment_3_1; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_3_1_0() { return cExpressionExpressionParserRuleCall_3_1_0; }
	}

	public class VariableMemberDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VariableMemberDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cVariableMemberDeclarationAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cVarKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameValidIDParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTypeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cTypeTypeReferenceParserRuleCall_4_0 = (RuleCall)cTypeAssignment_4.eContents().get(0);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//VariableMemberDeclaration:
		//	{VariableMemberDeclaration} "var" name=ValidID ":" type=TypeReference ";"?;
		public ParserRule getRule() { return rule; }

		//{VariableMemberDeclaration} "var" name=ValidID ":" type=TypeReference ";"?
		public Group getGroup() { return cGroup; }

		//{VariableMemberDeclaration}
		public Action getVariableMemberDeclarationAction_0() { return cVariableMemberDeclarationAction_0; }

		//"var"
		public Keyword getVarKeyword_1() { return cVarKeyword_1; }

		//name=ValidID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ValidID
		public RuleCall getNameValidIDParserRuleCall_2_0() { return cNameValidIDParserRuleCall_2_0; }

		//":"
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }

		//type=TypeReference
		public Assignment getTypeAssignment_4() { return cTypeAssignment_4; }

		//TypeReference
		public RuleCall getTypeTypeReferenceParserRuleCall_4_0() { return cTypeTypeReferenceParserRuleCall_4_0; }

		//";"?
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}

	public class FunctionMemberDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FunctionMemberDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFunctionDeclarationAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cFunctionKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameValidIDParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cParametersAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cParametersFormalParameterParserRuleCall_4_0_0 = (RuleCall)cParametersAssignment_4_0.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cGroup_4.eContents().get(1);
		private final Keyword cCommaKeyword_4_1_0 = (Keyword)cGroup_4_1.eContents().get(0);
		private final Assignment cParametersAssignment_4_1_1 = (Assignment)cGroup_4_1.eContents().get(1);
		private final RuleCall cParametersFormalParameterParserRuleCall_4_1_1_0 = (RuleCall)cParametersAssignment_4_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cColonKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cReturnTypeAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final CrossReference cReturnTypeTypeCrossReference_6_1_0 = (CrossReference)cReturnTypeAssignment_6_1.eContents().get(0);
		private final RuleCall cReturnTypeTypeQualifiedNameParserRuleCall_6_1_0_1 = (RuleCall)cReturnTypeTypeCrossReference_6_1_0.eContents().get(1);
		private final Assignment cBodyAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cBodyBlockExpressionParserRuleCall_7_0 = (RuleCall)cBodyAssignment_7.eContents().get(0);
		
		//FunctionMemberDeclaration returns FunctionDeclaration:
		//	{FunctionDeclaration} "function" name=ValidID "(" (parameters+=FormalParameter ("," parameters+=FormalParameter)*)?
		//	")" (":" returnType=[Type|QualifiedName])? body=BlockExpression;
		public ParserRule getRule() { return rule; }

		//{FunctionDeclaration} "function" name=ValidID "(" (parameters+=FormalParameter ("," parameters+=FormalParameter)*)? ")"
		//(":" returnType=[Type|QualifiedName])? body=BlockExpression
		public Group getGroup() { return cGroup; }

		//{FunctionDeclaration}
		public Action getFunctionDeclarationAction_0() { return cFunctionDeclarationAction_0; }

		//"function"
		public Keyword getFunctionKeyword_1() { return cFunctionKeyword_1; }

		//name=ValidID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ValidID
		public RuleCall getNameValidIDParserRuleCall_2_0() { return cNameValidIDParserRuleCall_2_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }

		//(parameters+=FormalParameter ("," parameters+=FormalParameter)*)?
		public Group getGroup_4() { return cGroup_4; }

		//parameters+=FormalParameter
		public Assignment getParametersAssignment_4_0() { return cParametersAssignment_4_0; }

		//FormalParameter
		public RuleCall getParametersFormalParameterParserRuleCall_4_0_0() { return cParametersFormalParameterParserRuleCall_4_0_0; }

		//("," parameters+=FormalParameter)*
		public Group getGroup_4_1() { return cGroup_4_1; }

		//","
		public Keyword getCommaKeyword_4_1_0() { return cCommaKeyword_4_1_0; }

		//parameters+=FormalParameter
		public Assignment getParametersAssignment_4_1_1() { return cParametersAssignment_4_1_1; }

		//FormalParameter
		public RuleCall getParametersFormalParameterParserRuleCall_4_1_1_0() { return cParametersFormalParameterParserRuleCall_4_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }

		//(":" returnType=[Type|QualifiedName])?
		public Group getGroup_6() { return cGroup_6; }

		//":"
		public Keyword getColonKeyword_6_0() { return cColonKeyword_6_0; }

		//returnType=[Type|QualifiedName]
		public Assignment getReturnTypeAssignment_6_1() { return cReturnTypeAssignment_6_1; }

		//[Type|QualifiedName]
		public CrossReference getReturnTypeTypeCrossReference_6_1_0() { return cReturnTypeTypeCrossReference_6_1_0; }

		//QualifiedName
		public RuleCall getReturnTypeTypeQualifiedNameParserRuleCall_6_1_0_1() { return cReturnTypeTypeQualifiedNameParserRuleCall_6_1_0_1; }

		//body=BlockExpression
		public Assignment getBodyAssignment_7() { return cBodyAssignment_7; }

		//BlockExpression
		public RuleCall getBodyBlockExpressionParserRuleCall_7_0() { return cBodyBlockExpressionParserRuleCall_7_0; }
	}

	public class ParenthesizedExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ParenthesizedExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//ParenthesizedExpression returns Expression:
		//	"(" Expression ")";
		public ParserRule getRule() { return rule; }

		//"(" Expression ")"
		public Group getGroup() { return cGroup; }

		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }

		//Expression
		public RuleCall getExpressionParserRuleCall_1() { return cExpressionParserRuleCall_1; }

		//")"
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}

	public class IfExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IfExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIfExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cIfKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cIfAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cIfExpressionParserRuleCall_3_0 = (RuleCall)cIfAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cThenAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cThenExpressionParserRuleCall_5_0 = (RuleCall)cThenAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cElseKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cElseAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cElseExpressionParserRuleCall_6_1_0 = (RuleCall)cElseAssignment_6_1.eContents().get(0);
		
		//IfExpression returns Expression:
		//	{IfExpression} "if" "(" if=Expression ")" then=Expression ("else" else=Expression)?;
		public ParserRule getRule() { return rule; }

		//{IfExpression} "if" "(" if=Expression ")" then=Expression ("else" else=Expression)?
		public Group getGroup() { return cGroup; }

		//{IfExpression}
		public Action getIfExpressionAction_0() { return cIfExpressionAction_0; }

		//"if"
		public Keyword getIfKeyword_1() { return cIfKeyword_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//if=Expression
		public Assignment getIfAssignment_3() { return cIfAssignment_3; }

		//Expression
		public RuleCall getIfExpressionParserRuleCall_3_0() { return cIfExpressionParserRuleCall_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }

		//then=Expression
		public Assignment getThenAssignment_5() { return cThenAssignment_5; }

		//Expression
		public RuleCall getThenExpressionParserRuleCall_5_0() { return cThenExpressionParserRuleCall_5_0; }

		//(=> "else" else=Expression)?
		public Group getGroup_6() { return cGroup_6; }

		//=> "else"
		public Keyword getElseKeyword_6_0() { return cElseKeyword_6_0; }

		//else=Expression
		public Assignment getElseAssignment_6_1() { return cElseAssignment_6_1; }

		//Expression
		public RuleCall getElseExpressionParserRuleCall_6_1_0() { return cElseExpressionParserRuleCall_6_1_0; }
	}

	public class WhileExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "WhileExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cWhileExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cWhileKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cPredicateAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPredicateExpressionParserRuleCall_3_0 = (RuleCall)cPredicateAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cBodyAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cBodyExpressionParserRuleCall_5_0 = (RuleCall)cBodyAssignment_5.eContents().get(0);
		
		//WhileExpression returns Expression:
		//	{WhileExpression} "while" "(" predicate=Expression ")" body=Expression;
		public ParserRule getRule() { return rule; }

		//{WhileExpression} "while" "(" predicate=Expression ")" body=Expression
		public Group getGroup() { return cGroup; }

		//{WhileExpression}
		public Action getWhileExpressionAction_0() { return cWhileExpressionAction_0; }

		//"while"
		public Keyword getWhileKeyword_1() { return cWhileKeyword_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//predicate=Expression
		public Assignment getPredicateAssignment_3() { return cPredicateAssignment_3; }

		//Expression
		public RuleCall getPredicateExpressionParserRuleCall_3_0() { return cPredicateExpressionParserRuleCall_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }

		//body=Expression
		public Assignment getBodyAssignment_5() { return cBodyAssignment_5; }

		//Expression
		public RuleCall getBodyExpressionParserRuleCall_5_0() { return cBodyExpressionParserRuleCall_5_0; }
	}

	public class DoWhileExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DoWhileExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDoWhileExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cDoKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cBodyAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cBodyExpressionParserRuleCall_2_0 = (RuleCall)cBodyAssignment_2.eContents().get(0);
		private final Keyword cWhileKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cPredicateAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cPredicateExpressionParserRuleCall_5_0 = (RuleCall)cPredicateAssignment_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//DoWhileExpression returns Expression:
		//	{DoWhileExpression} "do" body=Expression "while" "(" predicate=Expression ")";
		public ParserRule getRule() { return rule; }

		//{DoWhileExpression} "do" body=Expression "while" "(" predicate=Expression ")"
		public Group getGroup() { return cGroup; }

		//{DoWhileExpression}
		public Action getDoWhileExpressionAction_0() { return cDoWhileExpressionAction_0; }

		//"do"
		public Keyword getDoKeyword_1() { return cDoKeyword_1; }

		//body=Expression
		public Assignment getBodyAssignment_2() { return cBodyAssignment_2; }

		//Expression
		public RuleCall getBodyExpressionParserRuleCall_2_0() { return cBodyExpressionParserRuleCall_2_0; }

		//"while"
		public Keyword getWhileKeyword_3() { return cWhileKeyword_3; }

		//"("
		public Keyword getLeftParenthesisKeyword_4() { return cLeftParenthesisKeyword_4; }

		//predicate=Expression
		public Assignment getPredicateAssignment_5() { return cPredicateAssignment_5; }

		//Expression
		public RuleCall getPredicateExpressionParserRuleCall_5_0() { return cPredicateExpressionParserRuleCall_5_0; }

		//")"
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
	}

	public class ForLoopExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ForLoopExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cForLoopExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Keyword cForKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final Assignment cDeclaredParamAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final RuleCall cDeclaredParamFormalParameterParserRuleCall_1_0_2_0 = (RuleCall)cDeclaredParamAssignment_1_0_2.eContents().get(0);
		private final Keyword cInKeyword_1_0_3 = (Keyword)cGroup_1_0.eContents().get(3);
		private final Assignment cForExpressionAssignment_1_0_4 = (Assignment)cGroup_1_0.eContents().get(4);
		private final RuleCall cForExpressionExpressionParserRuleCall_1_0_4_0 = (RuleCall)cForExpressionAssignment_1_0_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_0_5 = (Keyword)cGroup_1_0.eContents().get(5);
		private final Assignment cBodyAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cBodyExpressionParserRuleCall_2_0 = (RuleCall)cBodyAssignment_2.eContents().get(0);
		
		//ForLoopExpression returns Expression:
		//	{ForLoopExpression} => ("for" "(" declaredParam=FormalParameter "in" forExpression=Expression ")") body=Expression;
		public ParserRule getRule() { return rule; }

		//{ForLoopExpression} => ("for" "(" declaredParam=FormalParameter "in" forExpression=Expression ")") body=Expression
		public Group getGroup() { return cGroup; }

		//{ForLoopExpression}
		public Action getForLoopExpressionAction_0() { return cForLoopExpressionAction_0; }

		//=> ("for" "(" declaredParam=FormalParameter "in" forExpression=Expression ")")
		public Group getGroup_1() { return cGroup_1; }

		//"for" "(" declaredParam=FormalParameter "in" forExpression=Expression ")"
		public Group getGroup_1_0() { return cGroup_1_0; }

		//"for"
		public Keyword getForKeyword_1_0_0() { return cForKeyword_1_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_0_1() { return cLeftParenthesisKeyword_1_0_1; }

		//declaredParam=FormalParameter
		public Assignment getDeclaredParamAssignment_1_0_2() { return cDeclaredParamAssignment_1_0_2; }

		//FormalParameter
		public RuleCall getDeclaredParamFormalParameterParserRuleCall_1_0_2_0() { return cDeclaredParamFormalParameterParserRuleCall_1_0_2_0; }

		//"in"
		public Keyword getInKeyword_1_0_3() { return cInKeyword_1_0_3; }

		//forExpression=Expression
		public Assignment getForExpressionAssignment_1_0_4() { return cForExpressionAssignment_1_0_4; }

		//Expression
		public RuleCall getForExpressionExpressionParserRuleCall_1_0_4_0() { return cForExpressionExpressionParserRuleCall_1_0_4_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_0_5() { return cRightParenthesisKeyword_1_0_5; }

		//body=Expression
		public Assignment getBodyAssignment_2() { return cBodyAssignment_2; }

		//Expression
		public RuleCall getBodyExpressionParserRuleCall_2_0() { return cBodyExpressionParserRuleCall_2_0; }
	}

	public class ReturnExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ReturnExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cReturnExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cReturnKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionExpressionParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		
		//ReturnExpression returns Expression:
		//	{ReturnExpression} "return" => expression=Expression?;
		public ParserRule getRule() { return rule; }

		//{ReturnExpression} "return" => expression=Expression?
		public Group getGroup() { return cGroup; }

		//{ReturnExpression}
		public Action getReturnExpressionAction_0() { return cReturnExpressionAction_0; }

		//"return"
		public Keyword getReturnKeyword_1() { return cReturnKeyword_1; }

		//=> expression=Expression?
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_2_0() { return cExpressionExpressionParserRuleCall_2_0; }
	}

	public class BreakExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BreakExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBreakExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cBreakKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//BreakExpression returns Expression:
		//	{BreakExpression} "break";
		public ParserRule getRule() { return rule; }

		//{BreakExpression} "break"
		public Group getGroup() { return cGroup; }

		//{BreakExpression}
		public Action getBreakExpressionAction_0() { return cBreakExpressionAction_0; }

		//"break"
		public Keyword getBreakKeyword_1() { return cBreakKeyword_1; }
	}

	public class ContinueExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ContinueExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBreakExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cContinueKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//ContinueExpression returns Expression:
		//	{BreakExpression} "continue";
		public ParserRule getRule() { return rule; }

		//{BreakExpression} "continue"
		public Group getGroup() { return cGroup; }

		//{BreakExpression}
		public Action getBreakExpressionAction_0() { return cBreakExpressionAction_0; }

		//"continue"
		public Keyword getContinueKeyword_1() { return cContinueKeyword_1; }
	}

	public class ThrowExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ThrowExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cThrowExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cThrowKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionExpressionParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		
		//ThrowExpression returns Expression:
		//	{ThrowExpression} "throw" expression=Expression;
		public ParserRule getRule() { return rule; }

		//{ThrowExpression} "throw" expression=Expression
		public Group getGroup() { return cGroup; }

		//{ThrowExpression}
		public Action getThrowExpressionAction_0() { return cThrowExpressionAction_0; }

		//"throw"
		public Keyword getThrowKeyword_1() { return cThrowKeyword_1; }

		//expression=Expression
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_2_0() { return cExpressionExpressionParserRuleCall_2_0; }
	}

	public class TryCatchExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TryCatchExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTryCatchExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cTryKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionExpressionParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		private final Assignment cCatchClausesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cCatchClausesCatchClauseParserRuleCall_3_0 = (RuleCall)cCatchClausesAssignment_3.eContents().get(0);
		
		//TryCatchExpression returns Expression:
		//	{TryCatchExpression} "try" expression=Expression catchClauses+=CatchClause+;
		public ParserRule getRule() { return rule; }

		//{TryCatchExpression} "try" expression=Expression catchClauses+=CatchClause+
		public Group getGroup() { return cGroup; }

		//{TryCatchExpression}
		public Action getTryCatchExpressionAction_0() { return cTryCatchExpressionAction_0; }

		//"try"
		public Keyword getTryKeyword_1() { return cTryKeyword_1; }

		//expression=Expression
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_2_0() { return cExpressionExpressionParserRuleCall_2_0; }

		//catchClauses+=CatchClause+
		public Assignment getCatchClausesAssignment_3() { return cCatchClausesAssignment_3; }

		//CatchClause
		public RuleCall getCatchClausesCatchClauseParserRuleCall_3_0() { return cCatchClausesCatchClauseParserRuleCall_3_0; }
	}

	public class CatchClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CatchClause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCatchKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cDeclaredParamAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDeclaredParamFormalParameterParserRuleCall_2_0 = (RuleCall)cDeclaredParamAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cExpressionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cExpressionExpressionParserRuleCall_4_0 = (RuleCall)cExpressionAssignment_4.eContents().get(0);
		
		//CatchClause:
		//	"catch" "(" declaredParam=FormalParameter ")" expression=Expression;
		public ParserRule getRule() { return rule; }

		//=> "catch" "(" declaredParam=FormalParameter ")" expression=Expression
		public Group getGroup() { return cGroup; }

		//=> "catch"
		public Keyword getCatchKeyword_0() { return cCatchKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//declaredParam=FormalParameter
		public Assignment getDeclaredParamAssignment_2() { return cDeclaredParamAssignment_2; }

		//FormalParameter
		public RuleCall getDeclaredParamFormalParameterParserRuleCall_2_0() { return cDeclaredParamFormalParameterParserRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }

		//expression=Expression
		public Assignment getExpressionAssignment_4() { return cExpressionAssignment_4; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_4_0() { return cExpressionExpressionParserRuleCall_4_0; }
	}

	public class SwitchExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SwitchExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSwitchExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSwitchKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cSwitchAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSwitchExpressionParserRuleCall_2_0 = (RuleCall)cSwitchAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cCasesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cCasesCasePartParserRuleCall_4_0 = (RuleCall)cCasesAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cDefaultKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cColonKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cDefaultAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cDefaultExpressionParserRuleCall_5_2_0 = (RuleCall)cDefaultAssignment_5_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//SwitchExpression returns Expression:
		//	{SwitchExpression} "switch" switch=Expression "{" cases+=CasePart+ ("default" ":" default=Expression)? "}";
		public ParserRule getRule() { return rule; }

		//{SwitchExpression} "switch" switch=Expression "{" cases+=CasePart+ ("default" ":" default=Expression)? "}"
		public Group getGroup() { return cGroup; }

		//{SwitchExpression}
		public Action getSwitchExpressionAction_0() { return cSwitchExpressionAction_0; }

		//"switch"
		public Keyword getSwitchKeyword_1() { return cSwitchKeyword_1; }

		//switch=Expression
		public Assignment getSwitchAssignment_2() { return cSwitchAssignment_2; }

		//Expression
		public RuleCall getSwitchExpressionParserRuleCall_2_0() { return cSwitchExpressionParserRuleCall_2_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//cases+=CasePart+
		public Assignment getCasesAssignment_4() { return cCasesAssignment_4; }

		//CasePart
		public RuleCall getCasesCasePartParserRuleCall_4_0() { return cCasesCasePartParserRuleCall_4_0; }

		//("default" ":" default=Expression)?
		public Group getGroup_5() { return cGroup_5; }

		//"default"
		public Keyword getDefaultKeyword_5_0() { return cDefaultKeyword_5_0; }

		//":"
		public Keyword getColonKeyword_5_1() { return cColonKeyword_5_1; }

		//default=Expression
		public Assignment getDefaultAssignment_5_2() { return cDefaultAssignment_5_2; }

		//Expression
		public RuleCall getDefaultExpressionParserRuleCall_5_2_0() { return cDefaultExpressionParserRuleCall_5_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}

	public class CasePartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CasePart");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCaseKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cCasesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCasesExpressionParserRuleCall_1_0 = (RuleCall)cCasesAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cCasesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cCasesExpressionParserRuleCall_2_1_0 = (RuleCall)cCasesAssignment_2_1.eContents().get(0);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cThenAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cThenExpressionParserRuleCall_4_0 = (RuleCall)cThenAssignment_4.eContents().get(0);
		
		//CasePart:
		//	"case" cases+=Expression ("," cases+=Expression)? ":" then=Expression;
		public ParserRule getRule() { return rule; }

		//=> "case" cases+=Expression ("," cases+=Expression)? ":" then=Expression
		public Group getGroup() { return cGroup; }

		//=> "case"
		public Keyword getCaseKeyword_0() { return cCaseKeyword_0; }

		//cases+=Expression
		public Assignment getCasesAssignment_1() { return cCasesAssignment_1; }

		//Expression
		public RuleCall getCasesExpressionParserRuleCall_1_0() { return cCasesExpressionParserRuleCall_1_0; }

		//("," cases+=Expression)?
		public Group getGroup_2() { return cGroup_2; }

		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//cases+=Expression
		public Assignment getCasesAssignment_2_1() { return cCasesAssignment_2_1; }

		//Expression
		public RuleCall getCasesExpressionParserRuleCall_2_1_0() { return cCasesExpressionParserRuleCall_2_1_0; }

		//":"
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }

		//then=Expression
		public Assignment getThenAssignment_4() { return cThenAssignment_4; }

		//Expression
		public RuleCall getThenExpressionParserRuleCall_4_0() { return cThenExpressionParserRuleCall_4_0; }
	}

	public class FunctionExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FunctionExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFunctionExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cFunctionKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cParametersAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cParametersFormalParameterParserRuleCall_3_0_0 = (RuleCall)cParametersAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cParametersAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cParametersFormalParameterParserRuleCall_3_1_1_0 = (RuleCall)cParametersAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cColonKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cReturnTypeAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final CrossReference cReturnTypeTypeCrossReference_5_1_0 = (CrossReference)cReturnTypeAssignment_5_1.eContents().get(0);
		private final RuleCall cReturnTypeTypeQualifiedNameParserRuleCall_5_1_0_1 = (RuleCall)cReturnTypeTypeCrossReference_5_1_0.eContents().get(1);
		private final Assignment cBodyAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cBodyBlockExpressionParserRuleCall_6_0 = (RuleCall)cBodyAssignment_6.eContents().get(0);
		
		//FunctionExpression returns Expression:
		//	{FunctionExpression} "function" "(" (parameters+=FormalParameter ("," parameters+=FormalParameter)*)? ")" (":"
		//	returnType=[Type|QualifiedName])? body=BlockExpression;
		public ParserRule getRule() { return rule; }

		//{FunctionExpression} "function" "(" (parameters+=FormalParameter ("," parameters+=FormalParameter)*)? ")" (":"
		//returnType=[Type|QualifiedName])? body=BlockExpression
		public Group getGroup() { return cGroup; }

		//{FunctionExpression}
		public Action getFunctionExpressionAction_0() { return cFunctionExpressionAction_0; }

		//"function"
		public Keyword getFunctionKeyword_1() { return cFunctionKeyword_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//(parameters+=FormalParameter ("," parameters+=FormalParameter)*)?
		public Group getGroup_3() { return cGroup_3; }

		//parameters+=FormalParameter
		public Assignment getParametersAssignment_3_0() { return cParametersAssignment_3_0; }

		//FormalParameter
		public RuleCall getParametersFormalParameterParserRuleCall_3_0_0() { return cParametersFormalParameterParserRuleCall_3_0_0; }

		//("," parameters+=FormalParameter)*
		public Group getGroup_3_1() { return cGroup_3_1; }

		//","
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }

		//parameters+=FormalParameter
		public Assignment getParametersAssignment_3_1_1() { return cParametersAssignment_3_1_1; }

		//FormalParameter
		public RuleCall getParametersFormalParameterParserRuleCall_3_1_1_0() { return cParametersFormalParameterParserRuleCall_3_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }

		//(":" returnType=[Type|QualifiedName])?
		public Group getGroup_5() { return cGroup_5; }

		//":"
		public Keyword getColonKeyword_5_0() { return cColonKeyword_5_0; }

		//returnType=[Type|QualifiedName]
		public Assignment getReturnTypeAssignment_5_1() { return cReturnTypeAssignment_5_1; }

		//[Type|QualifiedName]
		public CrossReference getReturnTypeTypeCrossReference_5_1_0() { return cReturnTypeTypeCrossReference_5_1_0; }

		//QualifiedName
		public RuleCall getReturnTypeTypeQualifiedNameParserRuleCall_5_1_0_1() { return cReturnTypeTypeQualifiedNameParserRuleCall_5_1_0_1; }

		//body=BlockExpression
		public Assignment getBodyAssignment_6() { return cBodyAssignment_6; }

		//BlockExpression
		public RuleCall getBodyBlockExpressionParserRuleCall_6_0() { return cBodyBlockExpressionParserRuleCall_6_0; }
	}

	public class ThisExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ThisExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cThisExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cThisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//ThisExpression returns Expression:
		//	{ThisExpression} "this";
		public ParserRule getRule() { return rule; }

		//{ThisExpression} "this"
		public Group getGroup() { return cGroup; }

		//{ThisExpression}
		public Action getThisExpressionAction_0() { return cThisExpressionAction_0; }

		//"this"
		public Keyword getThisKeyword_1() { return cThisKeyword_1; }
	}

	public class SuperExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SuperExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSuperExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSuperKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//SuperExpression returns Expression:
		//	{SuperExpression} "super";
		public ParserRule getRule() { return rule; }

		//{SuperExpression} "super"
		public Group getGroup() { return cGroup; }

		//{SuperExpression}
		public Action getSuperExpressionAction_0() { return cSuperExpressionAction_0; }

		//"super"
		public Keyword getSuperKeyword_1() { return cSuperKeyword_1; }
	}

	public class FeatureCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FeatureCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFeatureCallAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cFeatureAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cFeatureFeatureCrossReference_1_0 = (CrossReference)cFeatureAssignment_1.eContents().get(0);
		private final RuleCall cFeatureFeatureFeatureIDParserRuleCall_1_0_1 = (RuleCall)cFeatureFeatureCrossReference_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cExplicitOperationCallAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final Keyword cExplicitOperationCallLeftParenthesisKeyword_2_0_0 = (Keyword)cExplicitOperationCallAssignment_2_0.eContents().get(0);
		private final Assignment cArgumentsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cArgumentsExpressionParserRuleCall_2_1_0 = (RuleCall)cArgumentsAssignment_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cCommaKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cArgumentsAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cArgumentsExpressionParserRuleCall_2_2_1_0 = (RuleCall)cArgumentsAssignment_2_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		
		//FeatureCall returns Expression:
		//	{FeatureCall} feature=[Feature|FeatureID] (=> explicitOperationCall?="(" arguments+=Expression? (","
		//	arguments+=Expression)* ")")?;
		public ParserRule getRule() { return rule; }

		//{FeatureCall} feature=[Feature|FeatureID] (=> explicitOperationCall?="(" arguments+=Expression? (","
		//arguments+=Expression)* ")")?
		public Group getGroup() { return cGroup; }

		//{FeatureCall}
		public Action getFeatureCallAction_0() { return cFeatureCallAction_0; }

		//feature=[Feature|FeatureID]
		public Assignment getFeatureAssignment_1() { return cFeatureAssignment_1; }

		//[Feature|FeatureID]
		public CrossReference getFeatureFeatureCrossReference_1_0() { return cFeatureFeatureCrossReference_1_0; }

		//FeatureID
		public RuleCall getFeatureFeatureFeatureIDParserRuleCall_1_0_1() { return cFeatureFeatureFeatureIDParserRuleCall_1_0_1; }

		//(=> explicitOperationCall?="(" arguments+=Expression? ("," arguments+=Expression)* ")")?
		public Group getGroup_2() { return cGroup_2; }

		//=> explicitOperationCall?="("
		public Assignment getExplicitOperationCallAssignment_2_0() { return cExplicitOperationCallAssignment_2_0; }

		//"("
		public Keyword getExplicitOperationCallLeftParenthesisKeyword_2_0_0() { return cExplicitOperationCallLeftParenthesisKeyword_2_0_0; }

		//arguments+=Expression?
		public Assignment getArgumentsAssignment_2_1() { return cArgumentsAssignment_2_1; }

		//Expression
		public RuleCall getArgumentsExpressionParserRuleCall_2_1_0() { return cArgumentsExpressionParserRuleCall_2_1_0; }

		//("," arguments+=Expression)*
		public Group getGroup_2_2() { return cGroup_2_2; }

		//","
		public Keyword getCommaKeyword_2_2_0() { return cCommaKeyword_2_2_0; }

		//arguments+=Expression
		public Assignment getArgumentsAssignment_2_2_1() { return cArgumentsAssignment_2_2_1; }

		//Expression
		public RuleCall getArgumentsExpressionParserRuleCall_2_2_1_0() { return cArgumentsExpressionParserRuleCall_2_2_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_2_3() { return cRightParenthesisKeyword_2_3; }
	}

	public class ConstructorCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ConstructorCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cConstructorCallAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cNewKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cConstructorAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cConstructorTypeCrossReference_2_0 = (CrossReference)cConstructorAssignment_2.eContents().get(0);
		private final RuleCall cConstructorTypeQualifiedNameParserRuleCall_2_0_1 = (RuleCall)cConstructorTypeCrossReference_2_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cArgumentsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cArgumentsExpressionParserRuleCall_4_0 = (RuleCall)cArgumentsAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cArgumentsAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cArgumentsExpressionParserRuleCall_5_1_0 = (RuleCall)cArgumentsAssignment_5_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//ConstructorCall returns Expression:
		//	{ConstructorCall} "new" constructor=[Type|QualifiedName] "(" arguments+=Expression? ("," arguments+=Expression)* ")";
		public ParserRule getRule() { return rule; }

		//{ConstructorCall} "new" constructor=[Type|QualifiedName] "(" arguments+=Expression? ("," arguments+=Expression)* ")"
		public Group getGroup() { return cGroup; }

		//{ConstructorCall}
		public Action getConstructorCallAction_0() { return cConstructorCallAction_0; }

		//"new"
		public Keyword getNewKeyword_1() { return cNewKeyword_1; }

		//constructor=[Type|QualifiedName]
		public Assignment getConstructorAssignment_2() { return cConstructorAssignment_2; }

		//[Type|QualifiedName]
		public CrossReference getConstructorTypeCrossReference_2_0() { return cConstructorTypeCrossReference_2_0; }

		//QualifiedName
		public RuleCall getConstructorTypeQualifiedNameParserRuleCall_2_0_1() { return cConstructorTypeQualifiedNameParserRuleCall_2_0_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }

		//arguments+=Expression?
		public Assignment getArgumentsAssignment_4() { return cArgumentsAssignment_4; }

		//Expression
		public RuleCall getArgumentsExpressionParserRuleCall_4_0() { return cArgumentsExpressionParserRuleCall_4_0; }

		//("," arguments+=Expression)*
		public Group getGroup_5() { return cGroup_5; }

		//","
		public Keyword getCommaKeyword_5_0() { return cCommaKeyword_5_0; }

		//arguments+=Expression
		public Assignment getArgumentsAssignment_5_1() { return cArgumentsAssignment_5_1; }

		//Expression
		public RuleCall getArgumentsExpressionParserRuleCall_5_1_0() { return cArgumentsExpressionParserRuleCall_5_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
	}

	public class LiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Literal");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBooleanLiteralParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cNullLiteralParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cStringLiteralParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cFloatLiteralParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cIntLiteralParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cRegularExpressionLiteralParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cArrayLiteralParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cObjectLiteralParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		
		//Literal returns Expression:
		//	BooleanLiteral | NullLiteral | StringLiteral | FloatLiteral | IntLiteral | RegularExpressionLiteral | ArrayLiteral |
		//	ObjectLiteral;
		public ParserRule getRule() { return rule; }

		//BooleanLiteral | NullLiteral | StringLiteral | FloatLiteral | IntLiteral | RegularExpressionLiteral | ArrayLiteral |
		//ObjectLiteral
		public Alternatives getAlternatives() { return cAlternatives; }

		//BooleanLiteral
		public RuleCall getBooleanLiteralParserRuleCall_0() { return cBooleanLiteralParserRuleCall_0; }

		//NullLiteral
		public RuleCall getNullLiteralParserRuleCall_1() { return cNullLiteralParserRuleCall_1; }

		//StringLiteral
		public RuleCall getStringLiteralParserRuleCall_2() { return cStringLiteralParserRuleCall_2; }

		//FloatLiteral
		public RuleCall getFloatLiteralParserRuleCall_3() { return cFloatLiteralParserRuleCall_3; }

		//IntLiteral
		public RuleCall getIntLiteralParserRuleCall_4() { return cIntLiteralParserRuleCall_4; }

		//RegularExpressionLiteral
		public RuleCall getRegularExpressionLiteralParserRuleCall_5() { return cRegularExpressionLiteralParserRuleCall_5; }

		//ArrayLiteral
		public RuleCall getArrayLiteralParserRuleCall_6() { return cArrayLiteralParserRuleCall_6; }

		//ObjectLiteral
		public RuleCall getObjectLiteralParserRuleCall_7() { return cObjectLiteralParserRuleCall_7; }
	}

	public class BooleanLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BooleanLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBooleanLiteralAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cFalseKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Assignment cIsTrueAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final Keyword cIsTrueTrueKeyword_1_1_0 = (Keyword)cIsTrueAssignment_1_1.eContents().get(0);
		
		//BooleanLiteral returns Expression:
		//	{BooleanLiteral} ("false" | isTrue?="true");
		public ParserRule getRule() { return rule; }

		//{BooleanLiteral} ("false" | isTrue?="true")
		public Group getGroup() { return cGroup; }

		//{BooleanLiteral}
		public Action getBooleanLiteralAction_0() { return cBooleanLiteralAction_0; }

		//"false" | isTrue?="true"
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//"false"
		public Keyword getFalseKeyword_1_0() { return cFalseKeyword_1_0; }

		//isTrue?="true"
		public Assignment getIsTrueAssignment_1_1() { return cIsTrueAssignment_1_1; }

		//"true"
		public Keyword getIsTrueTrueKeyword_1_1_0() { return cIsTrueTrueKeyword_1_1_0; }
	}

	public class NullLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NullLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cNullLiteralAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cNullKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//NullLiteral returns Expression:
		//	{NullLiteral} "null";
		public ParserRule getRule() { return rule; }

		//{NullLiteral} "null"
		public Group getGroup() { return cGroup; }

		//{NullLiteral}
		public Action getNullLiteralAction_0() { return cNullLiteralAction_0; }

		//"null"
		public Keyword getNullKeyword_1() { return cNullKeyword_1; }
	}

	public class IntLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IntLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIntLiteralAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cValueINTTerminalRuleCall_1_0_0 = (RuleCall)cValueAssignment_1_0.eContents().get(0);
		private final RuleCall cHEXTerminalRuleCall_1_1 = (RuleCall)cAlternatives_1.eContents().get(1);
		
		//IntLiteral returns Expression:
		//	{IntLiteral} (value=INT | HEX);
		public ParserRule getRule() { return rule; }

		//{IntLiteral} (value=INT | HEX)
		public Group getGroup() { return cGroup; }

		//{IntLiteral}
		public Action getIntLiteralAction_0() { return cIntLiteralAction_0; }

		//value=INT | HEX
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//value=INT
		public Assignment getValueAssignment_1_0() { return cValueAssignment_1_0; }

		//INT
		public RuleCall getValueINTTerminalRuleCall_1_0_0() { return cValueINTTerminalRuleCall_1_0_0; }

		//HEX
		public RuleCall getHEXTerminalRuleCall_1_1() { return cHEXTerminalRuleCall_1_1; }
	}

	public class FloatLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FloatLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFloatLiteralAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueFloatParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//FloatLiteral returns Expression:
		//	{FloatLiteral} value=Float;
		public ParserRule getRule() { return rule; }

		//{FloatLiteral} value=Float
		public Group getGroup() { return cGroup; }

		//{FloatLiteral}
		public Action getFloatLiteralAction_0() { return cFloatLiteralAction_0; }

		//value=Float
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//Float
		public RuleCall getValueFloatParserRuleCall_1_0() { return cValueFloatParserRuleCall_1_0; }
	}

	public class StringLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StringLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStringLiteralAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//StringLiteral returns Expression:
		//	{StringLiteral} value=STRING;
		public ParserRule getRule() { return rule; }

		//{StringLiteral} value=STRING
		public Group getGroup() { return cGroup; }

		//{StringLiteral}
		public Action getStringLiteralAction_0() { return cStringLiteralAction_0; }

		//value=STRING
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_1_0() { return cValueSTRINGTerminalRuleCall_1_0; }
	}

	public class RegularExpressionLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RegularExpressionLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRegularExpressionLiteralAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueREGULAR_EXPRESSIONTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//RegularExpressionLiteral returns Expression:
		//	{RegularExpressionLiteral} value=REGULAR_EXPRESSION;
		public ParserRule getRule() { return rule; }

		//{RegularExpressionLiteral} value=REGULAR_EXPRESSION
		public Group getGroup() { return cGroup; }

		//{RegularExpressionLiteral}
		public Action getRegularExpressionLiteralAction_0() { return cRegularExpressionLiteralAction_0; }

		//value=REGULAR_EXPRESSION
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//REGULAR_EXPRESSION
		public RuleCall getValueREGULAR_EXPRESSIONTerminalRuleCall_1_0() { return cValueREGULAR_EXPRESSIONTerminalRuleCall_1_0; }
	}

	public class ArrayLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ArrayLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cArrayLiteralAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cElementsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cElementsExpressionParserRuleCall_2_0 = (RuleCall)cElementsAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cElementsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cElementsExpressionParserRuleCall_3_1_0 = (RuleCall)cElementsAssignment_3_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ArrayLiteral returns Expression:
		//	{ArrayLiteral} "[" elements+=Expression? ("," elements+=Expression)* "]";
		public ParserRule getRule() { return rule; }

		//{ArrayLiteral} "[" elements+=Expression? ("," elements+=Expression)* "]"
		public Group getGroup() { return cGroup; }

		//{ArrayLiteral}
		public Action getArrayLiteralAction_0() { return cArrayLiteralAction_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }

		//elements+=Expression?
		public Assignment getElementsAssignment_2() { return cElementsAssignment_2; }

		//Expression
		public RuleCall getElementsExpressionParserRuleCall_2_0() { return cElementsExpressionParserRuleCall_2_0; }

		//("," elements+=Expression)*
		public Group getGroup_3() { return cGroup_3; }

		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//elements+=Expression
		public Assignment getElementsAssignment_3_1() { return cElementsAssignment_3_1; }

		//Expression
		public RuleCall getElementsExpressionParserRuleCall_3_1_0() { return cElementsExpressionParserRuleCall_3_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_4() { return cRightSquareBracketKeyword_4; }
	}

	public class ObjectLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ObjectLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cObjectLiteralAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cElementsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cElementsObjectElementParserRuleCall_2_0 = (RuleCall)cElementsAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cElementsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cElementsObjectElementParserRuleCall_3_1_0 = (RuleCall)cElementsAssignment_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ObjectLiteral returns Expression:
		//	{ObjectLiteral} "{" elements+=ObjectElement ("," elements+=ObjectElement)* "}";
		public ParserRule getRule() { return rule; }

		//{ObjectLiteral} "{" elements+=ObjectElement ("," elements+=ObjectElement)* "}"
		public Group getGroup() { return cGroup; }

		//{ObjectLiteral}
		public Action getObjectLiteralAction_0() { return cObjectLiteralAction_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//elements+=ObjectElement
		public Assignment getElementsAssignment_2() { return cElementsAssignment_2; }

		//ObjectElement
		public RuleCall getElementsObjectElementParserRuleCall_2_0() { return cElementsObjectElementParserRuleCall_2_0; }

		//("," elements+=ObjectElement)*
		public Group getGroup_3() { return cGroup_3; }

		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//elements+=ObjectElement
		public Assignment getElementsAssignment_3_1() { return cElementsAssignment_3_1; }

		//ObjectElement
		public RuleCall getElementsObjectElementParserRuleCall_3_1_0() { return cElementsObjectElementParserRuleCall_3_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class ObjectElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ObjectElement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKeyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cKeyValidIDParserRuleCall_0_0 = (RuleCall)cKeyAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueExpressionParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//ObjectElement:
		//	key=ValidID ":" value=Expression;
		public ParserRule getRule() { return rule; }

		//key=ValidID ":" value=Expression
		public Group getGroup() { return cGroup; }

		//key=ValidID
		public Assignment getKeyAssignment_0() { return cKeyAssignment_0; }

		//ValidID
		public RuleCall getKeyValidIDParserRuleCall_0_0() { return cKeyValidIDParserRuleCall_0_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//value=Expression
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		//Expression
		public RuleCall getValueExpressionParserRuleCall_2_0() { return cValueExpressionParserRuleCall_2_0; }
	}

	public class FloatElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Float");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cEFLOATTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Keyword cFullStopKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_1_2 = (RuleCall)cGroup_1.eContents().get(2);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cFullStopKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		
		//Float returns ecore::EDouble hidden():
		//	EFLOAT | INT "." INT | "." INT;
		public ParserRule getRule() { return rule; }

		//EFLOAT | INT "." INT | "." INT
		public Alternatives getAlternatives() { return cAlternatives; }

		//EFLOAT
		public RuleCall getEFLOATTerminalRuleCall_0() { return cEFLOATTerminalRuleCall_0; }

		//INT "." INT
		public Group getGroup_1() { return cGroup_1; }

		//INT
		public RuleCall getINTTerminalRuleCall_1_0() { return cINTTerminalRuleCall_1_0; }

		//"."
		public Keyword getFullStopKeyword_1_1() { return cFullStopKeyword_1_1; }

		//INT
		public RuleCall getINTTerminalRuleCall_1_2() { return cINTTerminalRuleCall_1_2; }

		//"." INT
		public Group getGroup_2() { return cGroup_2; }

		//"."
		public Keyword getFullStopKeyword_2_0() { return cFullStopKeyword_2_0; }

		//INT
		public RuleCall getINTTerminalRuleCall_2_1() { return cINTTerminalRuleCall_2_1; }
	}
	
	
	private PackageElements pPackage;
	private TypeElements pType;
	private ClassElements pClass;
	private ClassMemberElements pClassMember;
	private TypeReferenceElements pTypeReference;
	private QualifiedNameElements pQualifiedName;
	private ValidIDElements pValidID;
	private FeatureIDElements pFeatureID;
	private FeatureElements pFeature;
	private FormalParameterElements pFormalParameter;
	private ExpressionElements pExpression;
	private AssignmentElements pAssignment;
	private OpSingleAssignElements pOpSingleAssign;
	private OpMultiAssignElements pOpMultiAssign;
	private OrExpressionElements pOrExpression;
	private OpOrElements pOpOr;
	private AndExpressionElements pAndExpression;
	private OpAndElements pOpAnd;
	private OtherOperatorExpressionElements pOtherOperatorExpression;
	private OpOtherElements pOpOther;
	private CompareExpressionElements pCompareExpression;
	private OpCompareElements pOpCompare;
	private BitwiseExpressionElements pBitwiseExpression;
	private OpBitwiseElements pOpBitwise;
	private BitshiftExpressionElements pBitshiftExpression;
	private OpBitshiftElements pOpBitshift;
	private AddExpressionElements pAddExpression;
	private OpAddElements pOpAdd;
	private SubtractExpressionElements pSubtractExpression;
	private OpSubtractElements pOpSubtract;
	private MultiplyExpressionElements pMultiplyExpression;
	private OpMultiplyElements pOpMultiply;
	private DivideExpressionElements pDivideExpression;
	private OpDivideElements pOpDivide;
	private ModuloExpressionElements pModuloExpression;
	private OpModuloElements pOpModulo;
	private UnaryOperationElements pUnaryOperation;
	private OpUnaryElements pOpUnary;
	private PreIncrementOperationElements pPreIncrementOperation;
	private PostIncrementOperationElements pPostIncrementOperation;
	private OpIncrementElements pOpIncrement;
	private MemberFeatureCallElements pMemberFeatureCall;
	private PrimaryExpressionElements pPrimaryExpression;
	private BlockExpressionElements pBlockExpression;
	private ExpressionInsideBlockElements pExpressionInsideBlock;
	private VariableDeclarationsElements pVariableDeclarations;
	private VariableDeclarationElements pVariableDeclaration;
	private VariableMemberDeclarationElements pVariableMemberDeclaration;
	private FunctionMemberDeclarationElements pFunctionMemberDeclaration;
	private ParenthesizedExpressionElements pParenthesizedExpression;
	private IfExpressionElements pIfExpression;
	private WhileExpressionElements pWhileExpression;
	private DoWhileExpressionElements pDoWhileExpression;
	private ForLoopExpressionElements pForLoopExpression;
	private ReturnExpressionElements pReturnExpression;
	private BreakExpressionElements pBreakExpression;
	private ContinueExpressionElements pContinueExpression;
	private ThrowExpressionElements pThrowExpression;
	private TryCatchExpressionElements pTryCatchExpression;
	private CatchClauseElements pCatchClause;
	private SwitchExpressionElements pSwitchExpression;
	private CasePartElements pCasePart;
	private FunctionExpressionElements pFunctionExpression;
	private ThisExpressionElements pThisExpression;
	private SuperExpressionElements pSuperExpression;
	private FeatureCallElements pFeatureCall;
	private ConstructorCallElements pConstructorCall;
	private LiteralElements pLiteral;
	private BooleanLiteralElements pBooleanLiteral;
	private NullLiteralElements pNullLiteral;
	private IntLiteralElements pIntLiteral;
	private FloatLiteralElements pFloatLiteral;
	private StringLiteralElements pStringLiteral;
	private RegularExpressionLiteralElements pRegularExpressionLiteral;
	private ArrayLiteralElements pArrayLiteral;
	private ObjectLiteralElements pObjectLiteral;
	private ObjectElementElements pObjectElement;
	private FloatElements pFloat;
	private TerminalRule tEFLOAT;
	private TerminalRule tID;
	private TerminalRule tHEX;
	private TerminalRule tINT;
	private TerminalRule tREGULAR_EXPRESSION;
	private TerminalRule tSTRING;
	private TerminalRule tML_COMMENT;
	private TerminalRule tSL_COMMENT;
	private TerminalRule tWS;
	private TerminalRule tANY_OTHER;
	
	private final GrammarProvider grammarProvider;

	@Inject
	public HaxeGrammarAccess(GrammarProvider grammarProvider) {
		this.grammarProvider = grammarProvider;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	
	////TODO, we might need to implement AbstractFeatureCall (see xbase.ecore)
	//Package:
	//	("package" name=QualifiedName ";")? classes+=Class*;
	public PackageElements getPackageAccess() {
		return (pPackage != null) ? pPackage : (pPackage = new PackageElements());
	}
	
	public ParserRule getPackageRule() {
		return getPackageAccess().getRule();
	}

	//Type:
	//	Class;
	public TypeElements getTypeAccess() {
		return (pType != null) ? pType : (pType = new TypeElements());
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}

	//Class:
	//	"class" name=QualifiedName "{" members+=ClassMember+ "}";
	public ClassElements getClassAccess() {
		return (pClass != null) ? pClass : (pClass = new ClassElements());
	}
	
	public ParserRule getClassRule() {
		return getClassAccess().getRule();
	}

	//ClassMember:
	//	FunctionMemberDeclaration | VariableMemberDeclaration;
	public ClassMemberElements getClassMemberAccess() {
		return (pClassMember != null) ? pClassMember : (pClassMember = new ClassMemberElements());
	}
	
	public ParserRule getClassMemberRule() {
		return getClassMemberAccess().getRule();
	}

	//TypeReference:
	//	type=[Type|QualifiedName] ("<" arguments+=TypeReference ("," arguments+=TypeReference)* ">")?;
	public TypeReferenceElements getTypeReferenceAccess() {
		return (pTypeReference != null) ? pTypeReference : (pTypeReference = new TypeReferenceElements());
	}
	
	public ParserRule getTypeReferenceRule() {
		return getTypeReferenceAccess().getRule();
	}

	//QualifiedName:
	//	ValidID ("." ValidID)*;
	public QualifiedNameElements getQualifiedNameAccess() {
		return (pQualifiedName != null) ? pQualifiedName : (pQualifiedName = new QualifiedNameElements());
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	//ValidID:
	//	ID;
	public ValidIDElements getValidIDAccess() {
		return (pValidID != null) ? pValidID : (pValidID = new ValidIDElements());
	}
	
	public ParserRule getValidIDRule() {
		return getValidIDAccess().getRule();
	}

	//FeatureID:
	//	ValidID | "super" | "this";
	public FeatureIDElements getFeatureIDAccess() {
		return (pFeatureID != null) ? pFeatureID : (pFeatureID = new FeatureIDElements());
	}
	
	public ParserRule getFeatureIDRule() {
		return getFeatureIDAccess().getRule();
	}

	//Feature:
	//	VariableDeclaration | FormalParameter | FunctionMemberDeclaration | VariableMemberDeclaration;
	public FeatureElements getFeatureAccess() {
		return (pFeature != null) ? pFeature : (pFeature = new FeatureElements());
	}
	
	public ParserRule getFeatureRule() {
		return getFeatureAccess().getRule();
	}

	//FormalParameter:
	//	name=ValidID (":" type=TypeReference)?;
	public FormalParameterElements getFormalParameterAccess() {
		return (pFormalParameter != null) ? pFormalParameter : (pFormalParameter = new FormalParameterElements());
	}
	
	public ParserRule getFormalParameterRule() {
		return getFormalParameterAccess().getRule();
	}

	//Expression:
	//	Assignment ";"?;
	public ExpressionElements getExpressionAccess() {
		return (pExpression != null) ? pExpression : (pExpression = new ExpressionElements());
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}

	//Assignment returns Expression:
	//	{Assignment} feature=[Feature|FeatureID] OpSingleAssign value=Assignment | OrExpression (=> ({Operation.left=current}
	//	feature=OpMultiAssign) right=Assignment)?;
	public AssignmentElements getAssignmentAccess() {
		return (pAssignment != null) ? pAssignment : (pAssignment = new AssignmentElements());
	}
	
	public ParserRule getAssignmentRule() {
		return getAssignmentAccess().getRule();
	}

	//OpSingleAssign:
	//	"=";
	public OpSingleAssignElements getOpSingleAssignAccess() {
		return (pOpSingleAssign != null) ? pOpSingleAssign : (pOpSingleAssign = new OpSingleAssignElements());
	}
	
	public ParserRule getOpSingleAssignRule() {
		return getOpSingleAssignAccess().getRule();
	}

	//OpMultiAssign:
	//	"+=" | "-=" | "*=" | "/=" | "%=" | "&=" | "|=" | "^=" | "<<=" | ">>=" | ">>>=";
	public OpMultiAssignElements getOpMultiAssignAccess() {
		return (pOpMultiAssign != null) ? pOpMultiAssign : (pOpMultiAssign = new OpMultiAssignElements());
	}
	
	public ParserRule getOpMultiAssignRule() {
		return getOpMultiAssignAccess().getRule();
	}

	//OrExpression returns Expression:
	//	AndExpression (=> ({Operation.left=current} feature=OpOr) right=AndExpression)*;
	public OrExpressionElements getOrExpressionAccess() {
		return (pOrExpression != null) ? pOrExpression : (pOrExpression = new OrExpressionElements());
	}
	
	public ParserRule getOrExpressionRule() {
		return getOrExpressionAccess().getRule();
	}

	//OpOr:
	//	"||";
	public OpOrElements getOpOrAccess() {
		return (pOpOr != null) ? pOpOr : (pOpOr = new OpOrElements());
	}
	
	public ParserRule getOpOrRule() {
		return getOpOrAccess().getRule();
	}

	//AndExpression returns Expression:
	//	OtherOperatorExpression (=> ({Operation.left=current} feature=OpAnd) right=OtherOperatorExpression)*;
	public AndExpressionElements getAndExpressionAccess() {
		return (pAndExpression != null) ? pAndExpression : (pAndExpression = new AndExpressionElements());
	}
	
	public ParserRule getAndExpressionRule() {
		return getAndExpressionAccess().getRule();
	}

	//OpAnd:
	//	"&&";
	public OpAndElements getOpAndAccess() {
		return (pOpAnd != null) ? pOpAnd : (pOpAnd = new OpAndElements());
	}
	
	public ParserRule getOpAndRule() {
		return getOpAndAccess().getRule();
	}

	//OtherOperatorExpression returns Expression:
	//	CompareExpression (=> ({Operation.left=current} feature=OpOther) right=CompareExpression)*;
	public OtherOperatorExpressionElements getOtherOperatorExpressionAccess() {
		return (pOtherOperatorExpression != null) ? pOtherOperatorExpression : (pOtherOperatorExpression = new OtherOperatorExpressionElements());
	}
	
	public ParserRule getOtherOperatorExpressionRule() {
		return getOtherOperatorExpressionAccess().getRule();
	}

	//OpOther:
	//	"...";
	public OpOtherElements getOpOtherAccess() {
		return (pOpOther != null) ? pOpOther : (pOpOther = new OpOtherElements());
	}
	
	public ParserRule getOpOtherRule() {
		return getOpOtherAccess().getRule();
	}

	//CompareExpression returns Expression:
	//	BitwiseExpression (=> ({Operation.left=current} feature=OpCompare) right=BitwiseExpression)*;
	public CompareExpressionElements getCompareExpressionAccess() {
		return (pCompareExpression != null) ? pCompareExpression : (pCompareExpression = new CompareExpressionElements());
	}
	
	public ParserRule getCompareExpressionRule() {
		return getCompareExpressionAccess().getRule();
	}

	//OpCompare:
	//	"==" | "!=" | ">=" | "<=" | ">" | "<";
	public OpCompareElements getOpCompareAccess() {
		return (pOpCompare != null) ? pOpCompare : (pOpCompare = new OpCompareElements());
	}
	
	public ParserRule getOpCompareRule() {
		return getOpCompareAccess().getRule();
	}

	//BitwiseExpression returns Expression:
	//	BitshiftExpression (=> ({Operation.left=current} feature=OpBitwise) right=BitshiftExpression)*;
	public BitwiseExpressionElements getBitwiseExpressionAccess() {
		return (pBitwiseExpression != null) ? pBitwiseExpression : (pBitwiseExpression = new BitwiseExpressionElements());
	}
	
	public ParserRule getBitwiseExpressionRule() {
		return getBitwiseExpressionAccess().getRule();
	}

	//OpBitwise:
	//	"|" | "&" | "^";
	public OpBitwiseElements getOpBitwiseAccess() {
		return (pOpBitwise != null) ? pOpBitwise : (pOpBitwise = new OpBitwiseElements());
	}
	
	public ParserRule getOpBitwiseRule() {
		return getOpBitwiseAccess().getRule();
	}

	//BitshiftExpression returns Expression:
	//	AddExpression (=> ({Operation.left=current} feature=OpBitshift) right=AddExpression)*;
	public BitshiftExpressionElements getBitshiftExpressionAccess() {
		return (pBitshiftExpression != null) ? pBitshiftExpression : (pBitshiftExpression = new BitshiftExpressionElements());
	}
	
	public ParserRule getBitshiftExpressionRule() {
		return getBitshiftExpressionAccess().getRule();
	}

	//OpBitshift:
	//	"<<" | ">>" | ">>>";
	public OpBitshiftElements getOpBitshiftAccess() {
		return (pOpBitshift != null) ? pOpBitshift : (pOpBitshift = new OpBitshiftElements());
	}
	
	public ParserRule getOpBitshiftRule() {
		return getOpBitshiftAccess().getRule();
	}

	//AddExpression returns Expression:
	//	SubtractExpression (=> ({Operation.left=current} feature=OpAdd) right=SubtractExpression)*;
	public AddExpressionElements getAddExpressionAccess() {
		return (pAddExpression != null) ? pAddExpression : (pAddExpression = new AddExpressionElements());
	}
	
	public ParserRule getAddExpressionRule() {
		return getAddExpressionAccess().getRule();
	}

	//OpAdd:
	//	"+";
	public OpAddElements getOpAddAccess() {
		return (pOpAdd != null) ? pOpAdd : (pOpAdd = new OpAddElements());
	}
	
	public ParserRule getOpAddRule() {
		return getOpAddAccess().getRule();
	}

	//SubtractExpression returns Expression:
	//	MultiplyExpression (=> ({Operation.left=current} feature=OpSubtract) right=MultiplyExpression)*;
	public SubtractExpressionElements getSubtractExpressionAccess() {
		return (pSubtractExpression != null) ? pSubtractExpression : (pSubtractExpression = new SubtractExpressionElements());
	}
	
	public ParserRule getSubtractExpressionRule() {
		return getSubtractExpressionAccess().getRule();
	}

	//OpSubtract:
	//	"-";
	public OpSubtractElements getOpSubtractAccess() {
		return (pOpSubtract != null) ? pOpSubtract : (pOpSubtract = new OpSubtractElements());
	}
	
	public ParserRule getOpSubtractRule() {
		return getOpSubtractAccess().getRule();
	}

	//MultiplyExpression returns Expression:
	//	DivideExpression (=> ({Operation.left=current} feature=OpMultiply) right=DivideExpression)*;
	public MultiplyExpressionElements getMultiplyExpressionAccess() {
		return (pMultiplyExpression != null) ? pMultiplyExpression : (pMultiplyExpression = new MultiplyExpressionElements());
	}
	
	public ParserRule getMultiplyExpressionRule() {
		return getMultiplyExpressionAccess().getRule();
	}

	//OpMultiply:
	//	"*";
	public OpMultiplyElements getOpMultiplyAccess() {
		return (pOpMultiply != null) ? pOpMultiply : (pOpMultiply = new OpMultiplyElements());
	}
	
	public ParserRule getOpMultiplyRule() {
		return getOpMultiplyAccess().getRule();
	}

	//DivideExpression returns Expression:
	//	ModuloExpression (=> ({Operation.left=current} feature=OpDivide) right=ModuloExpression)*;
	public DivideExpressionElements getDivideExpressionAccess() {
		return (pDivideExpression != null) ? pDivideExpression : (pDivideExpression = new DivideExpressionElements());
	}
	
	public ParserRule getDivideExpressionRule() {
		return getDivideExpressionAccess().getRule();
	}

	//OpDivide:
	//	"/";
	public OpDivideElements getOpDivideAccess() {
		return (pOpDivide != null) ? pOpDivide : (pOpDivide = new OpDivideElements());
	}
	
	public ParserRule getOpDivideRule() {
		return getOpDivideAccess().getRule();
	}

	//ModuloExpression returns Expression:
	//	UnaryOperation (=> ({Operation.left=current} feature=OpModulo) right=UnaryOperation)*;
	public ModuloExpressionElements getModuloExpressionAccess() {
		return (pModuloExpression != null) ? pModuloExpression : (pModuloExpression = new ModuloExpressionElements());
	}
	
	public ParserRule getModuloExpressionRule() {
		return getModuloExpressionAccess().getRule();
	}

	//OpModulo:
	//	"%";
	public OpModuloElements getOpModuloAccess() {
		return (pOpModulo != null) ? pOpModulo : (pOpModulo = new OpModuloElements());
	}
	
	public ParserRule getOpModuloRule() {
		return getOpModuloAccess().getRule();
	}

	//UnaryOperation returns Expression:
	//	{UnaryOperation} feature=OpUnary operand=PreIncrementOperation | PreIncrementOperation;
	public UnaryOperationElements getUnaryOperationAccess() {
		return (pUnaryOperation != null) ? pUnaryOperation : (pUnaryOperation = new UnaryOperationElements());
	}
	
	public ParserRule getUnaryOperationRule() {
		return getUnaryOperationAccess().getRule();
	}

	//OpUnary:
	//	"!" | "-" | "~";
	public OpUnaryElements getOpUnaryAccess() {
		return (pOpUnary != null) ? pOpUnary : (pOpUnary = new OpUnaryElements());
	}
	
	public ParserRule getOpUnaryRule() {
		return getOpUnaryAccess().getRule();
	}

	//PreIncrementOperation returns Expression:
	//	=> ({PreIncrementOperation} feature=OpIncrement operand=PostIncrementOperation) | PostIncrementOperation;
	public PreIncrementOperationElements getPreIncrementOperationAccess() {
		return (pPreIncrementOperation != null) ? pPreIncrementOperation : (pPreIncrementOperation = new PreIncrementOperationElements());
	}
	
	public ParserRule getPreIncrementOperationRule() {
		return getPreIncrementOperationAccess().getRule();
	}

	//PostIncrementOperation returns Expression:
	//	=> ({PostIncrementOperation} operand=MemberFeatureCall feature=OpIncrement) | MemberFeatureCall;
	public PostIncrementOperationElements getPostIncrementOperationAccess() {
		return (pPostIncrementOperation != null) ? pPostIncrementOperation : (pPostIncrementOperation = new PostIncrementOperationElements());
	}
	
	public ParserRule getPostIncrementOperationRule() {
		return getPostIncrementOperationAccess().getRule();
	}

	//OpIncrement:
	//	"++" | "--";
	public OpIncrementElements getOpIncrementAccess() {
		return (pOpIncrement != null) ? pOpIncrement : (pOpIncrement = new OpIncrementElements());
	}
	
	public ParserRule getOpIncrementRule() {
		return getOpIncrementAccess().getRule();
	}

	//MemberFeatureCall returns Expression:
	//	PrimaryExpression (=> ({Assignment.assignable=current} "." feature=[Feature|FeatureID] OpSingleAssign)
	//	value=Assignment | => ({ArrayAssignment.assigname=current} "[" feature=Expression "]" OpSingleAssign) value=Assignment
	//	| => ({MemberFeatureCall.target=current} ".") feature=[Feature|FeatureID] (=> explicitOperationCall?="(" //memberCallArguments+=XShortClosure |
	//	(arguments+=Expression ("," arguments+=Expression)*)? ")")? | => ({ArrayAccess.target=current}) "[" feature=Expression
	//	"]" (=> explicitOperationCall?="(" //memberCallArguments+=XShortClosure |
	//	(arguments+=Expression ("," arguments+=Expression)*)? ")")?)*;
	public MemberFeatureCallElements getMemberFeatureCallAccess() {
		return (pMemberFeatureCall != null) ? pMemberFeatureCall : (pMemberFeatureCall = new MemberFeatureCallElements());
	}
	
	public ParserRule getMemberFeatureCallRule() {
		return getMemberFeatureCallAccess().getRule();
	}

	//PrimaryExpression returns Expression:
	//	BlockExpression | ParenthesizedExpression | IfExpression | WhileExpression | DoWhileExpression | ForLoopExpression |
	//	ReturnExpression | BreakExpression | ContinueExpression | ThrowExpression | TryCatchExpression | SwitchExpression |
	//	FunctionExpression | FeatureCall | ConstructorCall | Literal;
	public PrimaryExpressionElements getPrimaryExpressionAccess() {
		return (pPrimaryExpression != null) ? pPrimaryExpression : (pPrimaryExpression = new PrimaryExpressionElements());
	}
	
	public ParserRule getPrimaryExpressionRule() {
		return getPrimaryExpressionAccess().getRule();
	}

	//BlockExpression returns Expression:
	//	{BlockExpression} // '[' temp=STRING ']' 
	//	"{" (expressions+=ExpressionInsideBlock ";"?)* "}";
	public BlockExpressionElements getBlockExpressionAccess() {
		return (pBlockExpression != null) ? pBlockExpression : (pBlockExpression = new BlockExpressionElements());
	}
	
	public ParserRule getBlockExpressionRule() {
		return getBlockExpressionAccess().getRule();
	}

	//ExpressionInsideBlock returns Expression:
	//	VariableDeclarations | Expression;
	public ExpressionInsideBlockElements getExpressionInsideBlockAccess() {
		return (pExpressionInsideBlock != null) ? pExpressionInsideBlock : (pExpressionInsideBlock = new ExpressionInsideBlockElements());
	}
	
	public ParserRule getExpressionInsideBlockRule() {
		return getExpressionInsideBlockAccess().getRule();
	}

	//VariableDeclarations returns Expression:
	//	{VariableDeclarations} "var" declarations+=VariableDeclaration ("," declarations+=VariableDeclaration)*;
	public VariableDeclarationsElements getVariableDeclarationsAccess() {
		return (pVariableDeclarations != null) ? pVariableDeclarations : (pVariableDeclarations = new VariableDeclarationsElements());
	}
	
	public ParserRule getVariableDeclarationsRule() {
		return getVariableDeclarationsAccess().getRule();
	}

	//VariableDeclaration:
	//	{VariableDeclaration} name=ValidID (":" type=TypeReference)? ("=" expression=Expression)?;
	public VariableDeclarationElements getVariableDeclarationAccess() {
		return (pVariableDeclaration != null) ? pVariableDeclaration : (pVariableDeclaration = new VariableDeclarationElements());
	}
	
	public ParserRule getVariableDeclarationRule() {
		return getVariableDeclarationAccess().getRule();
	}

	//VariableMemberDeclaration:
	//	{VariableMemberDeclaration} "var" name=ValidID ":" type=TypeReference ";"?;
	public VariableMemberDeclarationElements getVariableMemberDeclarationAccess() {
		return (pVariableMemberDeclaration != null) ? pVariableMemberDeclaration : (pVariableMemberDeclaration = new VariableMemberDeclarationElements());
	}
	
	public ParserRule getVariableMemberDeclarationRule() {
		return getVariableMemberDeclarationAccess().getRule();
	}

	//FunctionMemberDeclaration returns FunctionDeclaration:
	//	{FunctionDeclaration} "function" name=ValidID "(" (parameters+=FormalParameter ("," parameters+=FormalParameter)*)?
	//	")" (":" returnType=[Type|QualifiedName])? body=BlockExpression;
	public FunctionMemberDeclarationElements getFunctionMemberDeclarationAccess() {
		return (pFunctionMemberDeclaration != null) ? pFunctionMemberDeclaration : (pFunctionMemberDeclaration = new FunctionMemberDeclarationElements());
	}
	
	public ParserRule getFunctionMemberDeclarationRule() {
		return getFunctionMemberDeclarationAccess().getRule();
	}

	//ParenthesizedExpression returns Expression:
	//	"(" Expression ")";
	public ParenthesizedExpressionElements getParenthesizedExpressionAccess() {
		return (pParenthesizedExpression != null) ? pParenthesizedExpression : (pParenthesizedExpression = new ParenthesizedExpressionElements());
	}
	
	public ParserRule getParenthesizedExpressionRule() {
		return getParenthesizedExpressionAccess().getRule();
	}

	//IfExpression returns Expression:
	//	{IfExpression} "if" "(" if=Expression ")" then=Expression ("else" else=Expression)?;
	public IfExpressionElements getIfExpressionAccess() {
		return (pIfExpression != null) ? pIfExpression : (pIfExpression = new IfExpressionElements());
	}
	
	public ParserRule getIfExpressionRule() {
		return getIfExpressionAccess().getRule();
	}

	//WhileExpression returns Expression:
	//	{WhileExpression} "while" "(" predicate=Expression ")" body=Expression;
	public WhileExpressionElements getWhileExpressionAccess() {
		return (pWhileExpression != null) ? pWhileExpression : (pWhileExpression = new WhileExpressionElements());
	}
	
	public ParserRule getWhileExpressionRule() {
		return getWhileExpressionAccess().getRule();
	}

	//DoWhileExpression returns Expression:
	//	{DoWhileExpression} "do" body=Expression "while" "(" predicate=Expression ")";
	public DoWhileExpressionElements getDoWhileExpressionAccess() {
		return (pDoWhileExpression != null) ? pDoWhileExpression : (pDoWhileExpression = new DoWhileExpressionElements());
	}
	
	public ParserRule getDoWhileExpressionRule() {
		return getDoWhileExpressionAccess().getRule();
	}

	//ForLoopExpression returns Expression:
	//	{ForLoopExpression} => ("for" "(" declaredParam=FormalParameter "in" forExpression=Expression ")") body=Expression;
	public ForLoopExpressionElements getForLoopExpressionAccess() {
		return (pForLoopExpression != null) ? pForLoopExpression : (pForLoopExpression = new ForLoopExpressionElements());
	}
	
	public ParserRule getForLoopExpressionRule() {
		return getForLoopExpressionAccess().getRule();
	}

	//ReturnExpression returns Expression:
	//	{ReturnExpression} "return" => expression=Expression?;
	public ReturnExpressionElements getReturnExpressionAccess() {
		return (pReturnExpression != null) ? pReturnExpression : (pReturnExpression = new ReturnExpressionElements());
	}
	
	public ParserRule getReturnExpressionRule() {
		return getReturnExpressionAccess().getRule();
	}

	//BreakExpression returns Expression:
	//	{BreakExpression} "break";
	public BreakExpressionElements getBreakExpressionAccess() {
		return (pBreakExpression != null) ? pBreakExpression : (pBreakExpression = new BreakExpressionElements());
	}
	
	public ParserRule getBreakExpressionRule() {
		return getBreakExpressionAccess().getRule();
	}

	//ContinueExpression returns Expression:
	//	{BreakExpression} "continue";
	public ContinueExpressionElements getContinueExpressionAccess() {
		return (pContinueExpression != null) ? pContinueExpression : (pContinueExpression = new ContinueExpressionElements());
	}
	
	public ParserRule getContinueExpressionRule() {
		return getContinueExpressionAccess().getRule();
	}

	//ThrowExpression returns Expression:
	//	{ThrowExpression} "throw" expression=Expression;
	public ThrowExpressionElements getThrowExpressionAccess() {
		return (pThrowExpression != null) ? pThrowExpression : (pThrowExpression = new ThrowExpressionElements());
	}
	
	public ParserRule getThrowExpressionRule() {
		return getThrowExpressionAccess().getRule();
	}

	//TryCatchExpression returns Expression:
	//	{TryCatchExpression} "try" expression=Expression catchClauses+=CatchClause+;
	public TryCatchExpressionElements getTryCatchExpressionAccess() {
		return (pTryCatchExpression != null) ? pTryCatchExpression : (pTryCatchExpression = new TryCatchExpressionElements());
	}
	
	public ParserRule getTryCatchExpressionRule() {
		return getTryCatchExpressionAccess().getRule();
	}

	//CatchClause:
	//	"catch" "(" declaredParam=FormalParameter ")" expression=Expression;
	public CatchClauseElements getCatchClauseAccess() {
		return (pCatchClause != null) ? pCatchClause : (pCatchClause = new CatchClauseElements());
	}
	
	public ParserRule getCatchClauseRule() {
		return getCatchClauseAccess().getRule();
	}

	//SwitchExpression returns Expression:
	//	{SwitchExpression} "switch" switch=Expression "{" cases+=CasePart+ ("default" ":" default=Expression)? "}";
	public SwitchExpressionElements getSwitchExpressionAccess() {
		return (pSwitchExpression != null) ? pSwitchExpression : (pSwitchExpression = new SwitchExpressionElements());
	}
	
	public ParserRule getSwitchExpressionRule() {
		return getSwitchExpressionAccess().getRule();
	}

	//CasePart:
	//	"case" cases+=Expression ("," cases+=Expression)? ":" then=Expression;
	public CasePartElements getCasePartAccess() {
		return (pCasePart != null) ? pCasePart : (pCasePart = new CasePartElements());
	}
	
	public ParserRule getCasePartRule() {
		return getCasePartAccess().getRule();
	}

	//FunctionExpression returns Expression:
	//	{FunctionExpression} "function" "(" (parameters+=FormalParameter ("," parameters+=FormalParameter)*)? ")" (":"
	//	returnType=[Type|QualifiedName])? body=BlockExpression;
	public FunctionExpressionElements getFunctionExpressionAccess() {
		return (pFunctionExpression != null) ? pFunctionExpression : (pFunctionExpression = new FunctionExpressionElements());
	}
	
	public ParserRule getFunctionExpressionRule() {
		return getFunctionExpressionAccess().getRule();
	}

	//ThisExpression returns Expression:
	//	{ThisExpression} "this";
	public ThisExpressionElements getThisExpressionAccess() {
		return (pThisExpression != null) ? pThisExpression : (pThisExpression = new ThisExpressionElements());
	}
	
	public ParserRule getThisExpressionRule() {
		return getThisExpressionAccess().getRule();
	}

	//SuperExpression returns Expression:
	//	{SuperExpression} "super";
	public SuperExpressionElements getSuperExpressionAccess() {
		return (pSuperExpression != null) ? pSuperExpression : (pSuperExpression = new SuperExpressionElements());
	}
	
	public ParserRule getSuperExpressionRule() {
		return getSuperExpressionAccess().getRule();
	}

	//FeatureCall returns Expression:
	//	{FeatureCall} feature=[Feature|FeatureID] (=> explicitOperationCall?="(" arguments+=Expression? (","
	//	arguments+=Expression)* ")")?;
	public FeatureCallElements getFeatureCallAccess() {
		return (pFeatureCall != null) ? pFeatureCall : (pFeatureCall = new FeatureCallElements());
	}
	
	public ParserRule getFeatureCallRule() {
		return getFeatureCallAccess().getRule();
	}

	//ConstructorCall returns Expression:
	//	{ConstructorCall} "new" constructor=[Type|QualifiedName] "(" arguments+=Expression? ("," arguments+=Expression)* ")";
	public ConstructorCallElements getConstructorCallAccess() {
		return (pConstructorCall != null) ? pConstructorCall : (pConstructorCall = new ConstructorCallElements());
	}
	
	public ParserRule getConstructorCallRule() {
		return getConstructorCallAccess().getRule();
	}

	//Literal returns Expression:
	//	BooleanLiteral | NullLiteral | StringLiteral | FloatLiteral | IntLiteral | RegularExpressionLiteral | ArrayLiteral |
	//	ObjectLiteral;
	public LiteralElements getLiteralAccess() {
		return (pLiteral != null) ? pLiteral : (pLiteral = new LiteralElements());
	}
	
	public ParserRule getLiteralRule() {
		return getLiteralAccess().getRule();
	}

	//BooleanLiteral returns Expression:
	//	{BooleanLiteral} ("false" | isTrue?="true");
	public BooleanLiteralElements getBooleanLiteralAccess() {
		return (pBooleanLiteral != null) ? pBooleanLiteral : (pBooleanLiteral = new BooleanLiteralElements());
	}
	
	public ParserRule getBooleanLiteralRule() {
		return getBooleanLiteralAccess().getRule();
	}

	//NullLiteral returns Expression:
	//	{NullLiteral} "null";
	public NullLiteralElements getNullLiteralAccess() {
		return (pNullLiteral != null) ? pNullLiteral : (pNullLiteral = new NullLiteralElements());
	}
	
	public ParserRule getNullLiteralRule() {
		return getNullLiteralAccess().getRule();
	}

	//IntLiteral returns Expression:
	//	{IntLiteral} (value=INT | HEX);
	public IntLiteralElements getIntLiteralAccess() {
		return (pIntLiteral != null) ? pIntLiteral : (pIntLiteral = new IntLiteralElements());
	}
	
	public ParserRule getIntLiteralRule() {
		return getIntLiteralAccess().getRule();
	}

	//FloatLiteral returns Expression:
	//	{FloatLiteral} value=Float;
	public FloatLiteralElements getFloatLiteralAccess() {
		return (pFloatLiteral != null) ? pFloatLiteral : (pFloatLiteral = new FloatLiteralElements());
	}
	
	public ParserRule getFloatLiteralRule() {
		return getFloatLiteralAccess().getRule();
	}

	//StringLiteral returns Expression:
	//	{StringLiteral} value=STRING;
	public StringLiteralElements getStringLiteralAccess() {
		return (pStringLiteral != null) ? pStringLiteral : (pStringLiteral = new StringLiteralElements());
	}
	
	public ParserRule getStringLiteralRule() {
		return getStringLiteralAccess().getRule();
	}

	//RegularExpressionLiteral returns Expression:
	//	{RegularExpressionLiteral} value=REGULAR_EXPRESSION;
	public RegularExpressionLiteralElements getRegularExpressionLiteralAccess() {
		return (pRegularExpressionLiteral != null) ? pRegularExpressionLiteral : (pRegularExpressionLiteral = new RegularExpressionLiteralElements());
	}
	
	public ParserRule getRegularExpressionLiteralRule() {
		return getRegularExpressionLiteralAccess().getRule();
	}

	//ArrayLiteral returns Expression:
	//	{ArrayLiteral} "[" elements+=Expression? ("," elements+=Expression)* "]";
	public ArrayLiteralElements getArrayLiteralAccess() {
		return (pArrayLiteral != null) ? pArrayLiteral : (pArrayLiteral = new ArrayLiteralElements());
	}
	
	public ParserRule getArrayLiteralRule() {
		return getArrayLiteralAccess().getRule();
	}

	//ObjectLiteral returns Expression:
	//	{ObjectLiteral} "{" elements+=ObjectElement ("," elements+=ObjectElement)* "}";
	public ObjectLiteralElements getObjectLiteralAccess() {
		return (pObjectLiteral != null) ? pObjectLiteral : (pObjectLiteral = new ObjectLiteralElements());
	}
	
	public ParserRule getObjectLiteralRule() {
		return getObjectLiteralAccess().getRule();
	}

	//ObjectElement:
	//	key=ValidID ":" value=Expression;
	public ObjectElementElements getObjectElementAccess() {
		return (pObjectElement != null) ? pObjectElement : (pObjectElement = new ObjectElementElements());
	}
	
	public ParserRule getObjectElementRule() {
		return getObjectElementAccess().getRule();
	}

	//Float returns ecore::EDouble hidden():
	//	EFLOAT | INT "." INT | "." INT;
	public FloatElements getFloatAccess() {
		return (pFloat != null) ? pFloat : (pFloat = new FloatElements());
	}
	
	public ParserRule getFloatRule() {
		return getFloatAccess().getRule();
	}

	//terminal EFLOAT:
	//	INT "e" "-"? INT;
	public TerminalRule getEFLOATRule() {
		return (tEFLOAT != null) ? tEFLOAT : (tEFLOAT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "EFLOAT"));
	} 

	//terminal ID:
	//	("a".."z" | "A".."Z" | "$" | "_") ("a".."z" | "A".."Z" | "$" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return (tID != null) ? tID : (tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ID"));
	} 

	//terminal HEX:
	//	"0x" ("0".."9" | "A".."F")+;
	public TerminalRule getHEXRule() {
		return (tHEX != null) ? tHEX : (tHEX = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "HEX"));
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return (tINT != null) ? tINT : (tINT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "INT"));
	} 

	//terminal REGULAR_EXPRESSION:
	//	"~/" ("\\/" | !"/")+ "/" ("i" | "g" | "m" | "s" | "u")*;
	public TerminalRule getREGULAR_EXPRESSIONRule() {
		return (tREGULAR_EXPRESSION != null) ? tREGULAR_EXPRESSION : (tREGULAR_EXPRESSION = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "REGULAR_EXPRESSION"));
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return (tSTRING != null) ? tSTRING : (tSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "STRING"));
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return (tML_COMMENT != null) ? tML_COMMENT : (tML_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ML_COMMENT"));
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return (tSL_COMMENT != null) ? tSL_COMMENT : (tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SL_COMMENT"));
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return (tWS != null) ? tWS : (tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "WS"));
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return (tANY_OTHER != null) ? tANY_OTHER : (tANY_OTHER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ANY_OTHER"));
	} 
}
