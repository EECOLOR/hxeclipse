/*
* generated by Xtext
*/

package ee.xtext.haxe.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;


@Singleton
public class HaxeGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class PackageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Package");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Keyword cPackageKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cNameAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_0_1_0 = (RuleCall)cNameAssignment_0_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cImportsAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cImportsImportParserRuleCall_1_0_0 = (RuleCall)cImportsAssignment_1_0.eContents().get(0);
		private final Assignment cUsingAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cUsingUsingParserRuleCall_1_1_0 = (RuleCall)cUsingAssignment_1_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cClassesAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cClassesClassParserRuleCall_2_0_0 = (RuleCall)cClassesAssignment_2_0.eContents().get(0);
		private final Assignment cInterfacesAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cInterfacesInterfaceParserRuleCall_2_1_0 = (RuleCall)cInterfacesAssignment_2_1.eContents().get(0);
		private final Assignment cTypedefsAssignment_2_2 = (Assignment)cAlternatives_2.eContents().get(2);
		private final RuleCall cTypedefsTypedefParserRuleCall_2_2_0 = (RuleCall)cTypedefsAssignment_2_2.eContents().get(0);
		private final Assignment cEnumsAssignment_2_3 = (Assignment)cAlternatives_2.eContents().get(3);
		private final RuleCall cEnumsEnumParserRuleCall_2_3_0 = (RuleCall)cEnumsAssignment_2_3.eContents().get(0);
		private final Assignment cExternClassesAssignment_2_4 = (Assignment)cAlternatives_2.eContents().get(4);
		private final RuleCall cExternClassesExternClassParserRuleCall_2_4_0 = (RuleCall)cExternClassesAssignment_2_4.eContents().get(0);
		
		/// *
		// * TODO list:
		// * 
		// * - Implement else if
		// * 
		// * - Check the ref for validation
		// * - Add validation for types. Think of the types that can be extended and implemented
		// * - Add validation for variables. non-static variables may not have an initial value
		// * - Add default visibility. This depends on the context: example: default for Typedef is public where default for Class is private
		// * - Add validation for metadata
		// * / Package:
		//	("package" name=QualifiedName ";")? (imports+=Import | using+=Using)* (classes+=Class | interfaces+=Interface |
		//	typedefs+=Typedef | enums+=Enum | externClasses+=ExternClass)*;
		public ParserRule getRule() { return rule; }

		//("package" name=QualifiedName ";")? (imports+=Import | using+=Using)* (classes+=Class | interfaces+=Interface |
		//typedefs+=Typedef | enums+=Enum | externClasses+=ExternClass)*
		public Group getGroup() { return cGroup; }

		//("package" name=QualifiedName ";")?
		public Group getGroup_0() { return cGroup_0; }

		//"package"
		public Keyword getPackageKeyword_0_0() { return cPackageKeyword_0_0; }

		//name=QualifiedName
		public Assignment getNameAssignment_0_1() { return cNameAssignment_0_1; }

		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_0_1_0() { return cNameQualifiedNameParserRuleCall_0_1_0; }

		//";"
		public Keyword getSemicolonKeyword_0_2() { return cSemicolonKeyword_0_2; }

		//(imports+=Import | using+=Using)*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//imports+=Import
		public Assignment getImportsAssignment_1_0() { return cImportsAssignment_1_0; }

		//Import
		public RuleCall getImportsImportParserRuleCall_1_0_0() { return cImportsImportParserRuleCall_1_0_0; }

		//using+=Using
		public Assignment getUsingAssignment_1_1() { return cUsingAssignment_1_1; }

		//Using
		public RuleCall getUsingUsingParserRuleCall_1_1_0() { return cUsingUsingParserRuleCall_1_1_0; }

		//(classes+=Class | interfaces+=Interface | typedefs+=Typedef | enums+=Enum | externClasses+=ExternClass)*
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//classes+=Class
		public Assignment getClassesAssignment_2_0() { return cClassesAssignment_2_0; }

		//Class
		public RuleCall getClassesClassParserRuleCall_2_0_0() { return cClassesClassParserRuleCall_2_0_0; }

		//interfaces+=Interface
		public Assignment getInterfacesAssignment_2_1() { return cInterfacesAssignment_2_1; }

		//Interface
		public RuleCall getInterfacesInterfaceParserRuleCall_2_1_0() { return cInterfacesInterfaceParserRuleCall_2_1_0; }

		//typedefs+=Typedef
		public Assignment getTypedefsAssignment_2_2() { return cTypedefsAssignment_2_2; }

		//Typedef
		public RuleCall getTypedefsTypedefParserRuleCall_2_2_0() { return cTypedefsTypedefParserRuleCall_2_2_0; }

		//enums+=Enum
		public Assignment getEnumsAssignment_2_3() { return cEnumsAssignment_2_3; }

		//Enum
		public RuleCall getEnumsEnumParserRuleCall_2_3_0() { return cEnumsEnumParserRuleCall_2_3_0; }

		//externClasses+=ExternClass
		public Assignment getExternClassesAssignment_2_4() { return cExternClassesAssignment_2_4; }

		//ExternClass
		public RuleCall getExternClassesExternClassParserRuleCall_2_4_0() { return cExternClassesExternClassParserRuleCall_2_4_0; }
	}

	public class ImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Import");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cImportedNamespaceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0 = (RuleCall)cImportedNamespaceAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Import:
		//	"import" importedNamespace=QualifiedNameWithWildcard ";";
		public ParserRule getRule() { return rule; }

		//"import" importedNamespace=QualifiedNameWithWildcard ";"
		public Group getGroup() { return cGroup; }

		//"import"
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }

		//importedNamespace=QualifiedNameWithWildcard
		public Assignment getImportedNamespaceAssignment_1() { return cImportedNamespaceAssignment_1; }

		//QualifiedNameWithWildcard
		public RuleCall getImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0() { return cImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0; }

		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}

	public class UsingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Using");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cUsingKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cImportedClassAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportedClassQualifiedNameParserRuleCall_1_0 = (RuleCall)cImportedClassAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Using:
		//	"using" importedClass=QualifiedName ";";
		public ParserRule getRule() { return rule; }

		//"using" importedClass=QualifiedName ";"
		public Group getGroup() { return cGroup; }

		//"using"
		public Keyword getUsingKeyword_0() { return cUsingKeyword_0; }

		//importedClass=QualifiedName
		public Assignment getImportedClassAssignment_1() { return cImportedClassAssignment_1; }

		//QualifiedName
		public RuleCall getImportedClassQualifiedNameParserRuleCall_1_0() { return cImportedClassQualifiedNameParserRuleCall_1_0; }

		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}

	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Type");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cClassParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cInterfaceParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cTypedefParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cEnumParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cExternClassParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cTypeParameterParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		/// **********************
		// * CLASSES AND TYPES
		// * / Type:
		//	Class | Interface | Typedef | Enum | ExternClass | TypeParameter;
		public ParserRule getRule() { return rule; }

		//Class | Interface | Typedef | Enum | ExternClass | TypeParameter
		public Alternatives getAlternatives() { return cAlternatives; }

		//Class
		public RuleCall getClassParserRuleCall_0() { return cClassParserRuleCall_0; }

		//Interface
		public RuleCall getInterfaceParserRuleCall_1() { return cInterfaceParserRuleCall_1; }

		//Typedef
		public RuleCall getTypedefParserRuleCall_2() { return cTypedefParserRuleCall_2; }

		//Enum
		public RuleCall getEnumParserRuleCall_3() { return cEnumParserRuleCall_3; }

		//ExternClass
		public RuleCall getExternClassParserRuleCall_4() { return cExternClassParserRuleCall_4; }

		//TypeParameter
		public RuleCall getTypeParameterParserRuleCall_5() { return cTypeParameterParserRuleCall_5; }
	}

	public class ClassElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Class");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cMetadataAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cMetadataMetadataParserRuleCall_0_0 = (RuleCall)cMetadataAssignment_0.eContents().get(0);
		private final Assignment cVisibilityAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVisibilityVisibilityEnumRuleCall_1_0 = (RuleCall)cVisibilityAssignment_1.eContents().get(0);
		private final Keyword cClassKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameValidIDParserRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Assignment cTypeParametersAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cTypeParametersTypeParametersParserRuleCall_4_0 = (RuleCall)cTypeParametersAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Alternatives cAlternatives_5_0 = (Alternatives)cGroup_5.eContents().get(0);
		private final Group cGroup_5_0_0 = (Group)cAlternatives_5_0.eContents().get(0);
		private final Keyword cExtendsKeyword_5_0_0_0 = (Keyword)cGroup_5_0_0.eContents().get(0);
		private final Assignment cExtendsAssignment_5_0_0_1 = (Assignment)cGroup_5_0_0.eContents().get(1);
		private final RuleCall cExtendsParameterizedTypeReferenceParserRuleCall_5_0_0_1_0 = (RuleCall)cExtendsAssignment_5_0_0_1.eContents().get(0);
		private final Group cGroup_5_0_1 = (Group)cAlternatives_5_0.eContents().get(1);
		private final Keyword cImplementsKeyword_5_0_1_0 = (Keyword)cGroup_5_0_1.eContents().get(0);
		private final Assignment cImplementsAssignment_5_0_1_1 = (Assignment)cGroup_5_0_1.eContents().get(1);
		private final RuleCall cImplementsParameterizedTypeReferenceParserRuleCall_5_0_1_1_0 = (RuleCall)cImplementsAssignment_5_0_1_1.eContents().get(0);
		private final Group cGroup_5_1 = (Group)cGroup_5.eContents().get(1);
		private final Keyword cCommaKeyword_5_1_0 = (Keyword)cGroup_5_1.eContents().get(0);
		private final Keyword cImplementsKeyword_5_1_1 = (Keyword)cGroup_5_1.eContents().get(1);
		private final Assignment cImplementsAssignment_5_1_2 = (Assignment)cGroup_5_1.eContents().get(2);
		private final RuleCall cImplementsParameterizedTypeReferenceParserRuleCall_5_1_2_0 = (RuleCall)cImplementsAssignment_5_1_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final UnorderedGroup cUnorderedGroup_7 = (UnorderedGroup)cGroup.eContents().get(7);
		private final Assignment cConstructorAssignment_7_0 = (Assignment)cUnorderedGroup_7.eContents().get(0);
		private final RuleCall cConstructorClassConstructorParserRuleCall_7_0_0 = (RuleCall)cConstructorAssignment_7_0.eContents().get(0);
		private final Alternatives cAlternatives_7_1 = (Alternatives)cUnorderedGroup_7.eContents().get(1);
		private final Assignment cPropertiesAssignment_7_1_0 = (Assignment)cAlternatives_7_1.eContents().get(0);
		private final RuleCall cPropertiesClassPropertyParserRuleCall_7_1_0_0 = (RuleCall)cPropertiesAssignment_7_1_0.eContents().get(0);
		private final Assignment cMethodsAssignment_7_1_1 = (Assignment)cAlternatives_7_1.eContents().get(1);
		private final RuleCall cMethodsClassMethodParserRuleCall_7_1_1_0 = (RuleCall)cMethodsAssignment_7_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//Class:
		//	metadata=Metadata? visibility=Visibility? "class" name=ValidID typeParameters=TypeParameters? (("extends"
		//	extends=ParameterizedTypeReference | "implements" implements+=ParameterizedTypeReference) ("," "implements"
		//	implements+=ParameterizedTypeReference)*)? "{" (constructor=ClassConstructor? & (properties+=ClassProperty |
		//	methods+=ClassMethod)*) "}";
		public ParserRule getRule() { return rule; }

		//metadata=Metadata? visibility=Visibility? "class" name=ValidID typeParameters=TypeParameters? (("extends"
		//extends=ParameterizedTypeReference | "implements" implements+=ParameterizedTypeReference) ("," "implements"
		//implements+=ParameterizedTypeReference)*)? "{" (constructor=ClassConstructor? & (properties+=ClassProperty |
		//methods+=ClassMethod)*) "}"
		public Group getGroup() { return cGroup; }

		//metadata=Metadata?
		public Assignment getMetadataAssignment_0() { return cMetadataAssignment_0; }

		//Metadata
		public RuleCall getMetadataMetadataParserRuleCall_0_0() { return cMetadataMetadataParserRuleCall_0_0; }

		//visibility=Visibility?
		public Assignment getVisibilityAssignment_1() { return cVisibilityAssignment_1; }

		//Visibility
		public RuleCall getVisibilityVisibilityEnumRuleCall_1_0() { return cVisibilityVisibilityEnumRuleCall_1_0; }

		//"class"
		public Keyword getClassKeyword_2() { return cClassKeyword_2; }

		//name=ValidID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }

		//ValidID
		public RuleCall getNameValidIDParserRuleCall_3_0() { return cNameValidIDParserRuleCall_3_0; }

		//typeParameters=TypeParameters?
		public Assignment getTypeParametersAssignment_4() { return cTypeParametersAssignment_4; }

		//TypeParameters
		public RuleCall getTypeParametersTypeParametersParserRuleCall_4_0() { return cTypeParametersTypeParametersParserRuleCall_4_0; }

		//(("extends" extends=ParameterizedTypeReference | "implements" implements+=ParameterizedTypeReference) ("," "implements"
		//implements+=ParameterizedTypeReference)*)?
		public Group getGroup_5() { return cGroup_5; }

		//"extends" extends=ParameterizedTypeReference | "implements" implements+=ParameterizedTypeReference
		public Alternatives getAlternatives_5_0() { return cAlternatives_5_0; }

		//"extends" extends=ParameterizedTypeReference
		public Group getGroup_5_0_0() { return cGroup_5_0_0; }

		//"extends"
		public Keyword getExtendsKeyword_5_0_0_0() { return cExtendsKeyword_5_0_0_0; }

		//extends=ParameterizedTypeReference
		public Assignment getExtendsAssignment_5_0_0_1() { return cExtendsAssignment_5_0_0_1; }

		//ParameterizedTypeReference
		public RuleCall getExtendsParameterizedTypeReferenceParserRuleCall_5_0_0_1_0() { return cExtendsParameterizedTypeReferenceParserRuleCall_5_0_0_1_0; }

		//"implements" implements+=ParameterizedTypeReference
		public Group getGroup_5_0_1() { return cGroup_5_0_1; }

		//"implements"
		public Keyword getImplementsKeyword_5_0_1_0() { return cImplementsKeyword_5_0_1_0; }

		//implements+=ParameterizedTypeReference
		public Assignment getImplementsAssignment_5_0_1_1() { return cImplementsAssignment_5_0_1_1; }

		//ParameterizedTypeReference
		public RuleCall getImplementsParameterizedTypeReferenceParserRuleCall_5_0_1_1_0() { return cImplementsParameterizedTypeReferenceParserRuleCall_5_0_1_1_0; }

		//("," "implements" implements+=ParameterizedTypeReference)*
		public Group getGroup_5_1() { return cGroup_5_1; }

		//","
		public Keyword getCommaKeyword_5_1_0() { return cCommaKeyword_5_1_0; }

		//"implements"
		public Keyword getImplementsKeyword_5_1_1() { return cImplementsKeyword_5_1_1; }

		//implements+=ParameterizedTypeReference
		public Assignment getImplementsAssignment_5_1_2() { return cImplementsAssignment_5_1_2; }

		//ParameterizedTypeReference
		public RuleCall getImplementsParameterizedTypeReferenceParserRuleCall_5_1_2_0() { return cImplementsParameterizedTypeReferenceParserRuleCall_5_1_2_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_6() { return cLeftCurlyBracketKeyword_6; }

		//constructor=ClassConstructor? & (properties+=ClassProperty | methods+=ClassMethod)*
		public UnorderedGroup getUnorderedGroup_7() { return cUnorderedGroup_7; }

		//constructor=ClassConstructor?
		public Assignment getConstructorAssignment_7_0() { return cConstructorAssignment_7_0; }

		//ClassConstructor
		public RuleCall getConstructorClassConstructorParserRuleCall_7_0_0() { return cConstructorClassConstructorParserRuleCall_7_0_0; }

		//(properties+=ClassProperty | methods+=ClassMethod)*
		public Alternatives getAlternatives_7_1() { return cAlternatives_7_1; }

		//properties+=ClassProperty
		public Assignment getPropertiesAssignment_7_1_0() { return cPropertiesAssignment_7_1_0; }

		//ClassProperty
		public RuleCall getPropertiesClassPropertyParserRuleCall_7_1_0_0() { return cPropertiesClassPropertyParserRuleCall_7_1_0_0; }

		//methods+=ClassMethod
		public Assignment getMethodsAssignment_7_1_1() { return cMethodsAssignment_7_1_1; }

		//ClassMethod
		public RuleCall getMethodsClassMethodParserRuleCall_7_1_1_0() { return cMethodsClassMethodParserRuleCall_7_1_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}

	public class InterfaceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Interface");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cMetadataAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cMetadataMetadataParserRuleCall_0_0 = (RuleCall)cMetadataAssignment_0.eContents().get(0);
		private final Assignment cExternAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cExternExternKeyword_1_0 = (Keyword)cExternAssignment_1.eContents().get(0);
		private final Assignment cVisibilityAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cVisibilityVisibilityEnumRuleCall_2_0 = (RuleCall)cVisibilityAssignment_2.eContents().get(0);
		private final Keyword cInterfaceKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cNameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cNameValidIDParserRuleCall_4_0 = (RuleCall)cNameAssignment_4.eContents().get(0);
		private final Assignment cTypeParametersAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cTypeParametersTypeParametersParserRuleCall_5_0 = (RuleCall)cTypeParametersAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cImplementsKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cImplementsAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cImplementsParameterizedTypeReferenceParserRuleCall_6_1_0 = (RuleCall)cImplementsAssignment_6_1.eContents().get(0);
		private final Group cGroup_6_2 = (Group)cGroup_6.eContents().get(2);
		private final Keyword cCommaKeyword_6_2_0 = (Keyword)cGroup_6_2.eContents().get(0);
		private final Keyword cImplementsKeyword_6_2_1 = (Keyword)cGroup_6_2.eContents().get(1);
		private final Assignment cImplementsAssignment_6_2_2 = (Assignment)cGroup_6_2.eContents().get(2);
		private final RuleCall cImplementsParameterizedTypeReferenceParserRuleCall_6_2_2_0 = (RuleCall)cImplementsAssignment_6_2_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Alternatives cAlternatives_8 = (Alternatives)cGroup.eContents().get(8);
		private final Assignment cPropertiesAssignment_8_0 = (Assignment)cAlternatives_8.eContents().get(0);
		private final RuleCall cPropertiesInterfacePropertyParserRuleCall_8_0_0 = (RuleCall)cPropertiesAssignment_8_0.eContents().get(0);
		private final Assignment cMethodsAssignment_8_1 = (Assignment)cAlternatives_8.eContents().get(1);
		private final RuleCall cMethodsInterfaceMethodParserRuleCall_8_1_0 = (RuleCall)cMethodsAssignment_8_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//Interface:
		//	metadata=Metadata? extern="extern"? visibility=Visibility? "interface" name=ValidID typeParameters=TypeParameters?
		//	("implements" implements+=ParameterizedTypeReference ("," "implements" implements+=ParameterizedTypeReference)*)? "{"
		//	(properties+=InterfaceProperty | methods+=InterfaceMethod)* "}";
		public ParserRule getRule() { return rule; }

		//metadata=Metadata? extern="extern"? visibility=Visibility? "interface" name=ValidID typeParameters=TypeParameters?
		//("implements" implements+=ParameterizedTypeReference ("," "implements" implements+=ParameterizedTypeReference)*)? "{"
		//(properties+=InterfaceProperty | methods+=InterfaceMethod)* "}"
		public Group getGroup() { return cGroup; }

		//metadata=Metadata?
		public Assignment getMetadataAssignment_0() { return cMetadataAssignment_0; }

		//Metadata
		public RuleCall getMetadataMetadataParserRuleCall_0_0() { return cMetadataMetadataParserRuleCall_0_0; }

		//extern="extern"?
		public Assignment getExternAssignment_1() { return cExternAssignment_1; }

		//"extern"
		public Keyword getExternExternKeyword_1_0() { return cExternExternKeyword_1_0; }

		//visibility=Visibility?
		public Assignment getVisibilityAssignment_2() { return cVisibilityAssignment_2; }

		//Visibility
		public RuleCall getVisibilityVisibilityEnumRuleCall_2_0() { return cVisibilityVisibilityEnumRuleCall_2_0; }

		//"interface"
		public Keyword getInterfaceKeyword_3() { return cInterfaceKeyword_3; }

		//name=ValidID
		public Assignment getNameAssignment_4() { return cNameAssignment_4; }

		//ValidID
		public RuleCall getNameValidIDParserRuleCall_4_0() { return cNameValidIDParserRuleCall_4_0; }

		//typeParameters=TypeParameters?
		public Assignment getTypeParametersAssignment_5() { return cTypeParametersAssignment_5; }

		//TypeParameters
		public RuleCall getTypeParametersTypeParametersParserRuleCall_5_0() { return cTypeParametersTypeParametersParserRuleCall_5_0; }

		//("implements" implements+=ParameterizedTypeReference ("," "implements" implements+=ParameterizedTypeReference)*)?
		public Group getGroup_6() { return cGroup_6; }

		//"implements"
		public Keyword getImplementsKeyword_6_0() { return cImplementsKeyword_6_0; }

		//implements+=ParameterizedTypeReference
		public Assignment getImplementsAssignment_6_1() { return cImplementsAssignment_6_1; }

		//ParameterizedTypeReference
		public RuleCall getImplementsParameterizedTypeReferenceParserRuleCall_6_1_0() { return cImplementsParameterizedTypeReferenceParserRuleCall_6_1_0; }

		//("," "implements" implements+=ParameterizedTypeReference)*
		public Group getGroup_6_2() { return cGroup_6_2; }

		//","
		public Keyword getCommaKeyword_6_2_0() { return cCommaKeyword_6_2_0; }

		//"implements"
		public Keyword getImplementsKeyword_6_2_1() { return cImplementsKeyword_6_2_1; }

		//implements+=ParameterizedTypeReference
		public Assignment getImplementsAssignment_6_2_2() { return cImplementsAssignment_6_2_2; }

		//ParameterizedTypeReference
		public RuleCall getImplementsParameterizedTypeReferenceParserRuleCall_6_2_2_0() { return cImplementsParameterizedTypeReferenceParserRuleCall_6_2_2_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_7() { return cLeftCurlyBracketKeyword_7; }

		//(properties+=InterfaceProperty | methods+=InterfaceMethod)*
		public Alternatives getAlternatives_8() { return cAlternatives_8; }

		//properties+=InterfaceProperty
		public Assignment getPropertiesAssignment_8_0() { return cPropertiesAssignment_8_0; }

		//InterfaceProperty
		public RuleCall getPropertiesInterfacePropertyParserRuleCall_8_0_0() { return cPropertiesInterfacePropertyParserRuleCall_8_0_0; }

		//methods+=InterfaceMethod
		public Assignment getMethodsAssignment_8_1() { return cMethodsAssignment_8_1; }

		//InterfaceMethod
		public RuleCall getMethodsInterfaceMethodParserRuleCall_8_1_0() { return cMethodsInterfaceMethodParserRuleCall_8_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_9() { return cRightCurlyBracketKeyword_9; }
	}

	public class TypedefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Typedef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cMetadataAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cMetadataMetadataParserRuleCall_0_0 = (RuleCall)cMetadataAssignment_0.eContents().get(0);
		private final Assignment cVisibilityAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVisibilityVisibilityEnumRuleCall_1_0 = (RuleCall)cVisibilityAssignment_1.eContents().get(0);
		private final Keyword cTypedefKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameValidIDParserRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Assignment cTypeParametersAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cTypeParametersTypeParametersParserRuleCall_4_0 = (RuleCall)cTypeParametersAssignment_4.eContents().get(0);
		private final Keyword cEqualsSignKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Alternatives cAlternatives_6 = (Alternatives)cGroup.eContents().get(6);
		private final Group cGroup_6_0 = (Group)cAlternatives_6.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_6_0_0 = (Keyword)cGroup_6_0.eContents().get(0);
		private final Group cGroup_6_0_1 = (Group)cGroup_6_0.eContents().get(1);
		private final Keyword cGreaterThanSignKeyword_6_0_1_0 = (Keyword)cGroup_6_0_1.eContents().get(0);
		private final Assignment cExtendsAssignment_6_0_1_1 = (Assignment)cGroup_6_0_1.eContents().get(1);
		private final RuleCall cExtendsParameterizedTypeReferenceParserRuleCall_6_0_1_1_0 = (RuleCall)cExtendsAssignment_6_0_1_1.eContents().get(0);
		private final Keyword cCommaKeyword_6_0_1_2 = (Keyword)cGroup_6_0_1.eContents().get(2);
		private final Alternatives cAlternatives_6_0_2 = (Alternatives)cGroup_6_0.eContents().get(2);
		private final Assignment cPropertiesAssignment_6_0_2_0 = (Assignment)cAlternatives_6_0_2.eContents().get(0);
		private final RuleCall cPropertiesTypedefPropertyParserRuleCall_6_0_2_0_0 = (RuleCall)cPropertiesAssignment_6_0_2_0.eContents().get(0);
		private final Assignment cMethodsAssignment_6_0_2_1 = (Assignment)cAlternatives_6_0_2.eContents().get(1);
		private final RuleCall cMethodsTypedefMethodParserRuleCall_6_0_2_1_0 = (RuleCall)cMethodsAssignment_6_0_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6_0_3 = (Keyword)cGroup_6_0.eContents().get(3);
		private final Assignment cTypeAssignment_6_1 = (Assignment)cAlternatives_6.eContents().get(1);
		private final RuleCall cTypeParameterizedTypeReferenceParserRuleCall_6_1_0 = (RuleCall)cTypeAssignment_6_1.eContents().get(0);
		
		//Typedef:
		//	metadata=Metadata? visibility=Visibility? "typedef" name=ValidID typeParameters=TypeParameters? "=" ("{" (">"
		//	extends=ParameterizedTypeReference ",")? (properties+=TypedefProperty | methods+=TypedefMethod)* "}" |
		//	type=ParameterizedTypeReference);
		public ParserRule getRule() { return rule; }

		//metadata=Metadata? visibility=Visibility? "typedef" name=ValidID typeParameters=TypeParameters? "=" ("{" (">"
		//extends=ParameterizedTypeReference ",")? (properties+=TypedefProperty | methods+=TypedefMethod)* "}" |
		//type=ParameterizedTypeReference)
		public Group getGroup() { return cGroup; }

		//metadata=Metadata?
		public Assignment getMetadataAssignment_0() { return cMetadataAssignment_0; }

		//Metadata
		public RuleCall getMetadataMetadataParserRuleCall_0_0() { return cMetadataMetadataParserRuleCall_0_0; }

		//visibility=Visibility?
		public Assignment getVisibilityAssignment_1() { return cVisibilityAssignment_1; }

		//Visibility
		public RuleCall getVisibilityVisibilityEnumRuleCall_1_0() { return cVisibilityVisibilityEnumRuleCall_1_0; }

		//"typedef"
		public Keyword getTypedefKeyword_2() { return cTypedefKeyword_2; }

		//name=ValidID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }

		//ValidID
		public RuleCall getNameValidIDParserRuleCall_3_0() { return cNameValidIDParserRuleCall_3_0; }

		//typeParameters=TypeParameters?
		public Assignment getTypeParametersAssignment_4() { return cTypeParametersAssignment_4; }

		//TypeParameters
		public RuleCall getTypeParametersTypeParametersParserRuleCall_4_0() { return cTypeParametersTypeParametersParserRuleCall_4_0; }

		//"="
		public Keyword getEqualsSignKeyword_5() { return cEqualsSignKeyword_5; }

		//"{" (">" extends=ParameterizedTypeReference ",")? (properties+=TypedefProperty | methods+=TypedefMethod)* "}" |
		//type=ParameterizedTypeReference
		public Alternatives getAlternatives_6() { return cAlternatives_6; }

		//"{" (">" extends=ParameterizedTypeReference ",")? (properties+=TypedefProperty | methods+=TypedefMethod)* "}"
		public Group getGroup_6_0() { return cGroup_6_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_6_0_0() { return cLeftCurlyBracketKeyword_6_0_0; }

		//(">" extends=ParameterizedTypeReference ",")?
		public Group getGroup_6_0_1() { return cGroup_6_0_1; }

		//">"
		public Keyword getGreaterThanSignKeyword_6_0_1_0() { return cGreaterThanSignKeyword_6_0_1_0; }

		//extends=ParameterizedTypeReference
		public Assignment getExtendsAssignment_6_0_1_1() { return cExtendsAssignment_6_0_1_1; }

		//ParameterizedTypeReference
		public RuleCall getExtendsParameterizedTypeReferenceParserRuleCall_6_0_1_1_0() { return cExtendsParameterizedTypeReferenceParserRuleCall_6_0_1_1_0; }

		//","
		public Keyword getCommaKeyword_6_0_1_2() { return cCommaKeyword_6_0_1_2; }

		//(properties+=TypedefProperty | methods+=TypedefMethod)*
		public Alternatives getAlternatives_6_0_2() { return cAlternatives_6_0_2; }

		//properties+=TypedefProperty
		public Assignment getPropertiesAssignment_6_0_2_0() { return cPropertiesAssignment_6_0_2_0; }

		//TypedefProperty
		public RuleCall getPropertiesTypedefPropertyParserRuleCall_6_0_2_0_0() { return cPropertiesTypedefPropertyParserRuleCall_6_0_2_0_0; }

		//methods+=TypedefMethod
		public Assignment getMethodsAssignment_6_0_2_1() { return cMethodsAssignment_6_0_2_1; }

		//TypedefMethod
		public RuleCall getMethodsTypedefMethodParserRuleCall_6_0_2_1_0() { return cMethodsTypedefMethodParserRuleCall_6_0_2_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6_0_3() { return cRightCurlyBracketKeyword_6_0_3; }

		//type=ParameterizedTypeReference
		public Assignment getTypeAssignment_6_1() { return cTypeAssignment_6_1; }

		//ParameterizedTypeReference
		public RuleCall getTypeParameterizedTypeReferenceParserRuleCall_6_1_0() { return cTypeParameterizedTypeReferenceParserRuleCall_6_1_0; }
	}

	public class EnumElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Enum");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cMetadataAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cMetadataMetadataParserRuleCall_0_0 = (RuleCall)cMetadataAssignment_0.eContents().get(0);
		private final Assignment cExternAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cExternExternKeyword_1_0 = (Keyword)cExternAssignment_1.eContents().get(0);
		private final Assignment cVisibilityAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cVisibilityVisibilityEnumRuleCall_2_0 = (RuleCall)cVisibilityAssignment_2.eContents().get(0);
		private final Keyword cEnumKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cNameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cNameValidIDParserRuleCall_4_0 = (RuleCall)cNameAssignment_4.eContents().get(0);
		private final Assignment cTypeParametersAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cTypeParametersTypeParametersParserRuleCall_5_0 = (RuleCall)cTypeParametersAssignment_5.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cConstructorsAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cConstructorsEnumConstructorParserRuleCall_7_0 = (RuleCall)cConstructorsAssignment_7.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//Enum:
		//	metadata=Metadata? extern="extern"? visibility=Visibility? "enum" name=ValidID typeParameters=TypeParameters? "{"
		//	constructors+=EnumConstructor* "}";
		public ParserRule getRule() { return rule; }

		//metadata=Metadata? extern="extern"? visibility=Visibility? "enum" name=ValidID typeParameters=TypeParameters? "{"
		//constructors+=EnumConstructor* "}"
		public Group getGroup() { return cGroup; }

		//metadata=Metadata?
		public Assignment getMetadataAssignment_0() { return cMetadataAssignment_0; }

		//Metadata
		public RuleCall getMetadataMetadataParserRuleCall_0_0() { return cMetadataMetadataParserRuleCall_0_0; }

		//extern="extern"?
		public Assignment getExternAssignment_1() { return cExternAssignment_1; }

		//"extern"
		public Keyword getExternExternKeyword_1_0() { return cExternExternKeyword_1_0; }

		//visibility=Visibility?
		public Assignment getVisibilityAssignment_2() { return cVisibilityAssignment_2; }

		//Visibility
		public RuleCall getVisibilityVisibilityEnumRuleCall_2_0() { return cVisibilityVisibilityEnumRuleCall_2_0; }

		//"enum"
		public Keyword getEnumKeyword_3() { return cEnumKeyword_3; }

		//name=ValidID
		public Assignment getNameAssignment_4() { return cNameAssignment_4; }

		//ValidID
		public RuleCall getNameValidIDParserRuleCall_4_0() { return cNameValidIDParserRuleCall_4_0; }

		//typeParameters=TypeParameters?
		public Assignment getTypeParametersAssignment_5() { return cTypeParametersAssignment_5; }

		//TypeParameters
		public RuleCall getTypeParametersTypeParametersParserRuleCall_5_0() { return cTypeParametersTypeParametersParserRuleCall_5_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_6() { return cLeftCurlyBracketKeyword_6; }

		//constructors+=EnumConstructor*
		public Assignment getConstructorsAssignment_7() { return cConstructorsAssignment_7; }

		//EnumConstructor
		public RuleCall getConstructorsEnumConstructorParserRuleCall_7_0() { return cConstructorsEnumConstructorParserRuleCall_7_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}

	public class ExternClassElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExternClass");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cMetadataAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cMetadataMetadataParserRuleCall_0_0 = (RuleCall)cMetadataAssignment_0.eContents().get(0);
		private final Assignment cVisibilityAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVisibilityVisibilityEnumRuleCall_1_0 = (RuleCall)cVisibilityAssignment_1.eContents().get(0);
		private final Keyword cExternKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cClassKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cNameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cNameValidIDParserRuleCall_4_0 = (RuleCall)cNameAssignment_4.eContents().get(0);
		private final Assignment cTypeParametersAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cTypeParametersTypeParametersParserRuleCall_5_0 = (RuleCall)cTypeParametersAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Alternatives cAlternatives_6_0 = (Alternatives)cGroup_6.eContents().get(0);
		private final Group cGroup_6_0_0 = (Group)cAlternatives_6_0.eContents().get(0);
		private final Keyword cExtendsKeyword_6_0_0_0 = (Keyword)cGroup_6_0_0.eContents().get(0);
		private final Assignment cExtendsAssignment_6_0_0_1 = (Assignment)cGroup_6_0_0.eContents().get(1);
		private final RuleCall cExtendsParameterizedTypeReferenceParserRuleCall_6_0_0_1_0 = (RuleCall)cExtendsAssignment_6_0_0_1.eContents().get(0);
		private final Group cGroup_6_0_1 = (Group)cAlternatives_6_0.eContents().get(1);
		private final Keyword cImplementsKeyword_6_0_1_0 = (Keyword)cGroup_6_0_1.eContents().get(0);
		private final Assignment cImplementsAssignment_6_0_1_1 = (Assignment)cGroup_6_0_1.eContents().get(1);
		private final RuleCall cImplementsParameterizedTypeReferenceParserRuleCall_6_0_1_1_0 = (RuleCall)cImplementsAssignment_6_0_1_1.eContents().get(0);
		private final Group cGroup_6_1 = (Group)cGroup_6.eContents().get(1);
		private final Keyword cCommaKeyword_6_1_0 = (Keyword)cGroup_6_1.eContents().get(0);
		private final Keyword cImplementsKeyword_6_1_1 = (Keyword)cGroup_6_1.eContents().get(1);
		private final Assignment cImplementsAssignment_6_1_2 = (Assignment)cGroup_6_1.eContents().get(2);
		private final RuleCall cImplementsParameterizedTypeReferenceParserRuleCall_6_1_2_0 = (RuleCall)cImplementsAssignment_6_1_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final UnorderedGroup cUnorderedGroup_8 = (UnorderedGroup)cGroup.eContents().get(8);
		private final Assignment cConstructorAssignment_8_0 = (Assignment)cUnorderedGroup_8.eContents().get(0);
		private final RuleCall cConstructorExternClassConstructorParserRuleCall_8_0_0 = (RuleCall)cConstructorAssignment_8_0.eContents().get(0);
		private final Assignment cPropertiesAssignment_8_1 = (Assignment)cUnorderedGroup_8.eContents().get(1);
		private final RuleCall cPropertiesExternClassPropertyParserRuleCall_8_1_0 = (RuleCall)cPropertiesAssignment_8_1.eContents().get(0);
		private final Assignment cMethodsAssignment_8_2 = (Assignment)cUnorderedGroup_8.eContents().get(2);
		private final RuleCall cMethodsExternClassMethodParserRuleCall_8_2_0 = (RuleCall)cMethodsAssignment_8_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//ExternClass:
		//	metadata=Metadata? visibility=Visibility? "extern" "class" name=ValidID typeParameters=TypeParameters? (("extends"
		//	extends=ParameterizedTypeReference | "implements" implements+=ParameterizedTypeReference) ("," "implements"
		//	implements+=ParameterizedTypeReference)*)? "{" (constructor=ExternClassConstructor? & properties+=ExternClassProperty*
		//	& methods+=ExternClassMethod*) "}";
		public ParserRule getRule() { return rule; }

		//metadata=Metadata? visibility=Visibility? "extern" "class" name=ValidID typeParameters=TypeParameters? (("extends"
		//extends=ParameterizedTypeReference | "implements" implements+=ParameterizedTypeReference) ("," "implements"
		//implements+=ParameterizedTypeReference)*)? "{" (constructor=ExternClassConstructor? & properties+=ExternClassProperty*
		//& methods+=ExternClassMethod*) "}"
		public Group getGroup() { return cGroup; }

		//metadata=Metadata?
		public Assignment getMetadataAssignment_0() { return cMetadataAssignment_0; }

		//Metadata
		public RuleCall getMetadataMetadataParserRuleCall_0_0() { return cMetadataMetadataParserRuleCall_0_0; }

		//visibility=Visibility?
		public Assignment getVisibilityAssignment_1() { return cVisibilityAssignment_1; }

		//Visibility
		public RuleCall getVisibilityVisibilityEnumRuleCall_1_0() { return cVisibilityVisibilityEnumRuleCall_1_0; }

		//"extern"
		public Keyword getExternKeyword_2() { return cExternKeyword_2; }

		//"class"
		public Keyword getClassKeyword_3() { return cClassKeyword_3; }

		//name=ValidID
		public Assignment getNameAssignment_4() { return cNameAssignment_4; }

		//ValidID
		public RuleCall getNameValidIDParserRuleCall_4_0() { return cNameValidIDParserRuleCall_4_0; }

		//typeParameters=TypeParameters?
		public Assignment getTypeParametersAssignment_5() { return cTypeParametersAssignment_5; }

		//TypeParameters
		public RuleCall getTypeParametersTypeParametersParserRuleCall_5_0() { return cTypeParametersTypeParametersParserRuleCall_5_0; }

		//(("extends" extends=ParameterizedTypeReference | "implements" implements+=ParameterizedTypeReference) ("," "implements"
		//implements+=ParameterizedTypeReference)*)?
		public Group getGroup_6() { return cGroup_6; }

		//"extends" extends=ParameterizedTypeReference | "implements" implements+=ParameterizedTypeReference
		public Alternatives getAlternatives_6_0() { return cAlternatives_6_0; }

		//"extends" extends=ParameterizedTypeReference
		public Group getGroup_6_0_0() { return cGroup_6_0_0; }

		//"extends"
		public Keyword getExtendsKeyword_6_0_0_0() { return cExtendsKeyword_6_0_0_0; }

		//extends=ParameterizedTypeReference
		public Assignment getExtendsAssignment_6_0_0_1() { return cExtendsAssignment_6_0_0_1; }

		//ParameterizedTypeReference
		public RuleCall getExtendsParameterizedTypeReferenceParserRuleCall_6_0_0_1_0() { return cExtendsParameterizedTypeReferenceParserRuleCall_6_0_0_1_0; }

		//"implements" implements+=ParameterizedTypeReference
		public Group getGroup_6_0_1() { return cGroup_6_0_1; }

		//"implements"
		public Keyword getImplementsKeyword_6_0_1_0() { return cImplementsKeyword_6_0_1_0; }

		//implements+=ParameterizedTypeReference
		public Assignment getImplementsAssignment_6_0_1_1() { return cImplementsAssignment_6_0_1_1; }

		//ParameterizedTypeReference
		public RuleCall getImplementsParameterizedTypeReferenceParserRuleCall_6_0_1_1_0() { return cImplementsParameterizedTypeReferenceParserRuleCall_6_0_1_1_0; }

		//("," "implements" implements+=ParameterizedTypeReference)*
		public Group getGroup_6_1() { return cGroup_6_1; }

		//","
		public Keyword getCommaKeyword_6_1_0() { return cCommaKeyword_6_1_0; }

		//"implements"
		public Keyword getImplementsKeyword_6_1_1() { return cImplementsKeyword_6_1_1; }

		//implements+=ParameterizedTypeReference
		public Assignment getImplementsAssignment_6_1_2() { return cImplementsAssignment_6_1_2; }

		//ParameterizedTypeReference
		public RuleCall getImplementsParameterizedTypeReferenceParserRuleCall_6_1_2_0() { return cImplementsParameterizedTypeReferenceParserRuleCall_6_1_2_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_7() { return cLeftCurlyBracketKeyword_7; }

		//constructor=ExternClassConstructor? & properties+=ExternClassProperty* & methods+=ExternClassMethod*
		public UnorderedGroup getUnorderedGroup_8() { return cUnorderedGroup_8; }

		//constructor=ExternClassConstructor?
		public Assignment getConstructorAssignment_8_0() { return cConstructorAssignment_8_0; }

		//ExternClassConstructor
		public RuleCall getConstructorExternClassConstructorParserRuleCall_8_0_0() { return cConstructorExternClassConstructorParserRuleCall_8_0_0; }

		//properties+=ExternClassProperty*
		public Assignment getPropertiesAssignment_8_1() { return cPropertiesAssignment_8_1; }

		//ExternClassProperty
		public RuleCall getPropertiesExternClassPropertyParserRuleCall_8_1_0() { return cPropertiesExternClassPropertyParserRuleCall_8_1_0; }

		//methods+=ExternClassMethod*
		public Assignment getMethodsAssignment_8_2() { return cMethodsAssignment_8_2; }

		//ExternClassMethod
		public RuleCall getMethodsExternClassMethodParserRuleCall_8_2_0() { return cMethodsExternClassMethodParserRuleCall_8_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_9() { return cRightCurlyBracketKeyword_9; }
	}

	public class TypeParametersElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TypeParameters");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLessThanSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cParametersAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cParametersTypeParameterParserRuleCall_1_0 = (RuleCall)cParametersAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cParametersAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cParametersTypeParameterParserRuleCall_2_1_0 = (RuleCall)cParametersAssignment_2_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//TypeParameters:
		//	"<" parameters+=TypeParameter ("," parameters+=TypeParameter)* ">";
		public ParserRule getRule() { return rule; }

		//"<" parameters+=TypeParameter ("," parameters+=TypeParameter)* ">"
		public Group getGroup() { return cGroup; }

		//"<"
		public Keyword getLessThanSignKeyword_0() { return cLessThanSignKeyword_0; }

		//parameters+=TypeParameter
		public Assignment getParametersAssignment_1() { return cParametersAssignment_1; }

		//TypeParameter
		public RuleCall getParametersTypeParameterParserRuleCall_1_0() { return cParametersTypeParameterParserRuleCall_1_0; }

		//("," parameters+=TypeParameter)*
		public Group getGroup_2() { return cGroup_2; }

		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//parameters+=TypeParameter
		public Assignment getParametersAssignment_2_1() { return cParametersAssignment_2_1; }

		//TypeParameter
		public RuleCall getParametersTypeParameterParserRuleCall_2_1_0() { return cParametersTypeParameterParserRuleCall_2_1_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_3() { return cGreaterThanSignKeyword_3; }
	}

	public class TypeParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TypeParameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameValidIDParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cColonKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cConstraintsAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cConstraintsParameterizedTypeReferenceParserRuleCall_1_2_0 = (RuleCall)cConstraintsAssignment_1_2.eContents().get(0);
		private final Group cGroup_1_3 = (Group)cGroup_1.eContents().get(3);
		private final Keyword cCommaKeyword_1_3_0 = (Keyword)cGroup_1_3.eContents().get(0);
		private final Assignment cConstraintsAssignment_1_3_1 = (Assignment)cGroup_1_3.eContents().get(1);
		private final RuleCall cConstraintsParameterizedTypeReferenceParserRuleCall_1_3_1_0 = (RuleCall)cConstraintsAssignment_1_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		
		//TypeParameter:
		//	name=ValidID (":" "(" constraints+=ParameterizedTypeReference ("," constraints+=ParameterizedTypeReference)* ")")?;
		public ParserRule getRule() { return rule; }

		//name=ValidID (":" "(" constraints+=ParameterizedTypeReference ("," constraints+=ParameterizedTypeReference)* ")")?
		public Group getGroup() { return cGroup; }

		//name=ValidID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ValidID
		public RuleCall getNameValidIDParserRuleCall_0_0() { return cNameValidIDParserRuleCall_0_0; }

		//(":" "(" constraints+=ParameterizedTypeReference ("," constraints+=ParameterizedTypeReference)* ")")?
		public Group getGroup_1() { return cGroup_1; }

		//":"
		public Keyword getColonKeyword_1_0() { return cColonKeyword_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_1() { return cLeftParenthesisKeyword_1_1; }

		//constraints+=ParameterizedTypeReference
		public Assignment getConstraintsAssignment_1_2() { return cConstraintsAssignment_1_2; }

		//ParameterizedTypeReference
		public RuleCall getConstraintsParameterizedTypeReferenceParserRuleCall_1_2_0() { return cConstraintsParameterizedTypeReferenceParserRuleCall_1_2_0; }

		//("," constraints+=ParameterizedTypeReference)*
		public Group getGroup_1_3() { return cGroup_1_3; }

		//","
		public Keyword getCommaKeyword_1_3_0() { return cCommaKeyword_1_3_0; }

		//constraints+=ParameterizedTypeReference
		public Assignment getConstraintsAssignment_1_3_1() { return cConstraintsAssignment_1_3_1; }

		//ParameterizedTypeReference
		public RuleCall getConstraintsParameterizedTypeReferenceParserRuleCall_1_3_1_0() { return cConstraintsParameterizedTypeReferenceParserRuleCall_1_3_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_4() { return cRightParenthesisKeyword_1_4; }
	}

	public class TypeReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TypeReference");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cMethodSignatureParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTypedefTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//TypeReference:
		//	MethodSignature | TypedefType;
		public ParserRule getRule() { return rule; }

		//MethodSignature | TypedefType
		public Alternatives getAlternatives() { return cAlternatives; }

		//MethodSignature
		public RuleCall getMethodSignatureParserRuleCall_0() { return cMethodSignatureParserRuleCall_0; }

		//TypedefType
		public RuleCall getTypedefTypeParserRuleCall_1() { return cTypedefTypeParserRuleCall_1; }
	}

	public class MethodSignatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MethodSignature");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cParameterizedTypeReferenceParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cMethodSignatureArgumentTypesAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_1_0_0_1 = (Keyword)cGroup_1_0_0.eContents().get(1);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Group cGroup_1_1_0 = (Group)cGroup_1_1.eContents().get(0);
		private final Assignment cArgumentTypesAssignment_1_1_0_0 = (Assignment)cGroup_1_1_0.eContents().get(0);
		private final RuleCall cArgumentTypesParameterizedTypeReferenceParserRuleCall_1_1_0_0_0 = (RuleCall)cArgumentTypesAssignment_1_1_0_0.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_1_1_0_1 = (Keyword)cGroup_1_1_0.eContents().get(1);
		private final Assignment cReturnTypeAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cReturnTypeParameterizedTypeReferenceParserRuleCall_1_2_0 = (RuleCall)cReturnTypeAssignment_1_2.eContents().get(0);
		
		//MethodSignature returns Reference:
		//	ParameterizedTypeReference (=> ({MethodSignature.argumentTypes+=current} "->") =>
		//	(argumentTypes+=ParameterizedTypeReference "->")* returnType=ParameterizedTypeReference)?;
		public ParserRule getRule() { return rule; }

		//ParameterizedTypeReference (=> ({MethodSignature.argumentTypes+=current} "->") =>
		//(argumentTypes+=ParameterizedTypeReference "->")* returnType=ParameterizedTypeReference)?
		public Group getGroup() { return cGroup; }

		//ParameterizedTypeReference
		public RuleCall getParameterizedTypeReferenceParserRuleCall_0() { return cParameterizedTypeReferenceParserRuleCall_0; }

		//(=> ({MethodSignature.argumentTypes+=current} "->") => (argumentTypes+=ParameterizedTypeReference "->")*
		//returnType=ParameterizedTypeReference)?
		public Group getGroup_1() { return cGroup_1; }

		//=> ({MethodSignature.argumentTypes+=current} "->")
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{MethodSignature.argumentTypes+=current} "->"
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{MethodSignature.argumentTypes+=current}
		public Action getMethodSignatureArgumentTypesAction_1_0_0_0() { return cMethodSignatureArgumentTypesAction_1_0_0_0; }

		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_1_0_0_1() { return cHyphenMinusGreaterThanSignKeyword_1_0_0_1; }

		//=> (argumentTypes+=ParameterizedTypeReference "->")*
		public Group getGroup_1_1() { return cGroup_1_1; }

		//argumentTypes+=ParameterizedTypeReference "->"
		public Group getGroup_1_1_0() { return cGroup_1_1_0; }

		//argumentTypes+=ParameterizedTypeReference
		public Assignment getArgumentTypesAssignment_1_1_0_0() { return cArgumentTypesAssignment_1_1_0_0; }

		//ParameterizedTypeReference
		public RuleCall getArgumentTypesParameterizedTypeReferenceParserRuleCall_1_1_0_0_0() { return cArgumentTypesParameterizedTypeReferenceParserRuleCall_1_1_0_0_0; }

		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_1_1_0_1() { return cHyphenMinusGreaterThanSignKeyword_1_1_0_1; }

		//returnType=ParameterizedTypeReference
		public Assignment getReturnTypeAssignment_1_2() { return cReturnTypeAssignment_1_2; }

		//ParameterizedTypeReference
		public RuleCall getReturnTypeParameterizedTypeReferenceParserRuleCall_1_2_0() { return cReturnTypeParameterizedTypeReferenceParserRuleCall_1_2_0; }
	}

	public class ParameterizedTypeReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ParameterizedTypeReference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cParameterizedTypeReferenceAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Assignment cTypeAssignment_1_0_0 = (Assignment)cGroup_1_0.eContents().get(0);
		private final CrossReference cTypeTypeCrossReference_1_0_0_0 = (CrossReference)cTypeAssignment_1_0_0.eContents().get(0);
		private final RuleCall cTypeTypeQualifiedNameParserRuleCall_1_0_0_0_1 = (RuleCall)cTypeTypeCrossReference_1_0_0_0.eContents().get(1);
		private final Group cGroup_1_0_1 = (Group)cGroup_1_0.eContents().get(1);
		private final Keyword cLessThanSignKeyword_1_0_1_0 = (Keyword)cGroup_1_0_1.eContents().get(0);
		private final Assignment cArgumentsAssignment_1_0_1_1 = (Assignment)cGroup_1_0_1.eContents().get(1);
		private final RuleCall cArgumentsTypeReferenceParserRuleCall_1_0_1_1_0 = (RuleCall)cArgumentsAssignment_1_0_1_1.eContents().get(0);
		private final Group cGroup_1_0_1_2 = (Group)cGroup_1_0_1.eContents().get(2);
		private final Keyword cCommaKeyword_1_0_1_2_0 = (Keyword)cGroup_1_0_1_2.eContents().get(0);
		private final Assignment cArgumentsAssignment_1_0_1_2_1 = (Assignment)cGroup_1_0_1_2.eContents().get(1);
		private final RuleCall cArgumentsTypeReferenceParserRuleCall_1_0_1_2_1_0 = (RuleCall)cArgumentsAssignment_1_0_1_2_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_1_0_1_3 = (Keyword)cGroup_1_0_1.eContents().get(3);
		
		//ParameterizedTypeReference returns Reference:
		//	{ParameterizedTypeReference} => (type=[Type|QualifiedName] ("<" arguments+=TypeReference (","
		//	arguments+=TypeReference)* ">")?);
		public ParserRule getRule() { return rule; }

		//{ParameterizedTypeReference} => (type=[Type|QualifiedName] ("<" arguments+=TypeReference ("," arguments+=TypeReference)*
		//">")?)
		public Group getGroup() { return cGroup; }

		//{ParameterizedTypeReference}
		public Action getParameterizedTypeReferenceAction_0() { return cParameterizedTypeReferenceAction_0; }

		//=> (type=[Type|QualifiedName] ("<" arguments+=TypeReference ("," arguments+=TypeReference)* ">")?)
		public Group getGroup_1() { return cGroup_1; }

		//type=[Type|QualifiedName] ("<" arguments+=TypeReference ("," arguments+=TypeReference)* ">")?
		public Group getGroup_1_0() { return cGroup_1_0; }

		//type=[Type|QualifiedName]
		public Assignment getTypeAssignment_1_0_0() { return cTypeAssignment_1_0_0; }

		//[Type|QualifiedName]
		public CrossReference getTypeTypeCrossReference_1_0_0_0() { return cTypeTypeCrossReference_1_0_0_0; }

		//QualifiedName
		public RuleCall getTypeTypeQualifiedNameParserRuleCall_1_0_0_0_1() { return cTypeTypeQualifiedNameParserRuleCall_1_0_0_0_1; }

		//("<" arguments+=TypeReference ("," arguments+=TypeReference)* ">")?
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }

		//"<"
		public Keyword getLessThanSignKeyword_1_0_1_0() { return cLessThanSignKeyword_1_0_1_0; }

		//arguments+=TypeReference
		public Assignment getArgumentsAssignment_1_0_1_1() { return cArgumentsAssignment_1_0_1_1; }

		//TypeReference
		public RuleCall getArgumentsTypeReferenceParserRuleCall_1_0_1_1_0() { return cArgumentsTypeReferenceParserRuleCall_1_0_1_1_0; }

		//("," arguments+=TypeReference)*
		public Group getGroup_1_0_1_2() { return cGroup_1_0_1_2; }

		//","
		public Keyword getCommaKeyword_1_0_1_2_0() { return cCommaKeyword_1_0_1_2_0; }

		//arguments+=TypeReference
		public Assignment getArgumentsAssignment_1_0_1_2_1() { return cArgumentsAssignment_1_0_1_2_1; }

		//TypeReference
		public RuleCall getArgumentsTypeReferenceParserRuleCall_1_0_1_2_1_0() { return cArgumentsTypeReferenceParserRuleCall_1_0_1_2_1_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_1_0_1_3() { return cGreaterThanSignKeyword_1_0_1_3; }
	}

	public class TypedefTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TypedefType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTypedefTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cPropertiesAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cPropertiesTypedefTypePropertyParserRuleCall_1_1_0 = (RuleCall)cPropertiesAssignment_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cCommaKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cPropertiesAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cPropertiesTypedefTypePropertyParserRuleCall_1_2_1_0 = (RuleCall)cPropertiesAssignment_1_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		
		//TypedefType returns Reference:
		//	{TypedefType} ("{" properties+=TypedefTypeProperty ("," properties+=TypedefTypeProperty)* "}");
		public ParserRule getRule() { return rule; }

		//{TypedefType} ("{" properties+=TypedefTypeProperty ("," properties+=TypedefTypeProperty)* "}")
		public Group getGroup() { return cGroup; }

		//{TypedefType}
		public Action getTypedefTypeAction_0() { return cTypedefTypeAction_0; }

		//"{" properties+=TypedefTypeProperty ("," properties+=TypedefTypeProperty)* "}"
		public Group getGroup_1() { return cGroup_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1_0() { return cLeftCurlyBracketKeyword_1_0; }

		//properties+=TypedefTypeProperty
		public Assignment getPropertiesAssignment_1_1() { return cPropertiesAssignment_1_1; }

		//TypedefTypeProperty
		public RuleCall getPropertiesTypedefTypePropertyParserRuleCall_1_1_0() { return cPropertiesTypedefTypePropertyParserRuleCall_1_1_0; }

		//("," properties+=TypedefTypeProperty)*
		public Group getGroup_1_2() { return cGroup_1_2; }

		//","
		public Keyword getCommaKeyword_1_2_0() { return cCommaKeyword_1_2_0; }

		//properties+=TypedefTypeProperty
		public Assignment getPropertiesAssignment_1_2_1() { return cPropertiesAssignment_1_2_1; }

		//TypedefTypeProperty
		public RuleCall getPropertiesTypedefTypePropertyParserRuleCall_1_2_1_0() { return cPropertiesTypedefTypePropertyParserRuleCall_1_2_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_1_3() { return cRightCurlyBracketKeyword_1_3; }
	}

	public class TypedefTypePropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TypedefTypeProperty");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameValidIDParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeTypeReferenceParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		
		//TypedefTypeProperty:
		//	name=ValidID ":" type=TypeReference;
		public ParserRule getRule() { return rule; }

		//name=ValidID ":" type=TypeReference
		public Group getGroup() { return cGroup; }

		//name=ValidID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ValidID
		public RuleCall getNameValidIDParserRuleCall_0_0() { return cNameValidIDParserRuleCall_0_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//type=TypeReference
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }

		//TypeReference
		public RuleCall getTypeTypeReferenceParserRuleCall_2_0() { return cTypeTypeReferenceParserRuleCall_2_0; }
	}

	public class MetadataElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Metadata");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCommercialAtKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cCompilerAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cCompilerColonKeyword_1_0 = (Keyword)cCompilerAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameValidIDParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cGroup_3.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3_0_0 = (Keyword)cGroup_3_0.eContents().get(0);
		private final Assignment cBodyAssignment_3_0_1 = (Assignment)cGroup_3_0.eContents().get(1);
		private final RuleCall cBodyMetadataExpressionParserRuleCall_3_0_1_0 = (RuleCall)cBodyAssignment_3_0_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_0_2 = (Keyword)cGroup_3_0.eContents().get(2);
		
		/// **********************
		// * METADATA
		// * / Metadata:
		//	"@" compiler?=":" name=ValidID => ("(" body=MetadataExpression? ")")?;
		public ParserRule getRule() { return rule; }

		//"@" compiler?=":" name=ValidID => ("(" body=MetadataExpression? ")")?
		public Group getGroup() { return cGroup; }

		//"@"
		public Keyword getCommercialAtKeyword_0() { return cCommercialAtKeyword_0; }

		//compiler?=":"
		public Assignment getCompilerAssignment_1() { return cCompilerAssignment_1; }

		//":"
		public Keyword getCompilerColonKeyword_1_0() { return cCompilerColonKeyword_1_0; }

		//name=ValidID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ValidID
		public RuleCall getNameValidIDParserRuleCall_2_0() { return cNameValidIDParserRuleCall_2_0; }

		//=> ("(" body=MetadataExpression? ")")?
		public Group getGroup_3() { return cGroup_3; }

		//"(" body=MetadataExpression? ")"
		public Group getGroup_3_0() { return cGroup_3_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_3_0_0() { return cLeftParenthesisKeyword_3_0_0; }

		//body=MetadataExpression?
		public Assignment getBodyAssignment_3_0_1() { return cBodyAssignment_3_0_1; }

		//MetadataExpression
		public RuleCall getBodyMetadataExpressionParserRuleCall_3_0_1_0() { return cBodyMetadataExpressionParserRuleCall_3_0_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3_0_2() { return cRightParenthesisKeyword_3_0_2; }
	}

	public class MetadataExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MetadataExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cStringLiteralParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cNumberLiteralParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cRegularExpressionLiteralParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//MetadataExpression returns Expression:
		//	StringLiteral | NumberLiteral | RegularExpressionLiteral;
		public ParserRule getRule() { return rule; }

		//StringLiteral | NumberLiteral | RegularExpressionLiteral
		public Alternatives getAlternatives() { return cAlternatives; }

		//StringLiteral
		public RuleCall getStringLiteralParserRuleCall_0() { return cStringLiteralParserRuleCall_0; }

		//NumberLiteral
		public RuleCall getNumberLiteralParserRuleCall_1() { return cNumberLiteralParserRuleCall_1; }

		//RegularExpressionLiteral
		public RuleCall getRegularExpressionLiteralParserRuleCall_2() { return cRegularExpressionLiteralParserRuleCall_2; }
	}

	public class MethodModifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MethodModifier");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cModifierAction_0 = (Action)cGroup.eContents().get(0);
		private final UnorderedGroup cUnorderedGroup_1 = (UnorderedGroup)cGroup.eContents().get(1);
		private final Assignment cStaticAssignment_1_0 = (Assignment)cUnorderedGroup_1.eContents().get(0);
		private final Keyword cStaticStaticKeyword_1_0_0 = (Keyword)cStaticAssignment_1_0.eContents().get(0);
		private final Assignment cFinalAssignment_1_1 = (Assignment)cUnorderedGroup_1.eContents().get(1);
		private final Keyword cFinalFinalKeyword_1_1_0 = (Keyword)cFinalAssignment_1_1.eContents().get(0);
		private final Assignment cDynamicAssignment_1_2 = (Assignment)cUnorderedGroup_1.eContents().get(2);
		private final Keyword cDynamicDynamicKeyword_1_2_0 = (Keyword)cDynamicAssignment_1_2.eContents().get(0);
		private final Assignment cOverrideAssignment_1_3 = (Assignment)cUnorderedGroup_1.eContents().get(3);
		private final Keyword cOverrideOverrideKeyword_1_3_0 = (Keyword)cOverrideAssignment_1_3.eContents().get(0);
		private final Assignment cInlineAssignment_1_4 = (Assignment)cUnorderedGroup_1.eContents().get(4);
		private final Keyword cInlineInlineKeyword_1_4_0 = (Keyword)cInlineAssignment_1_4.eContents().get(0);
		private final Assignment cVisibilityAssignment_1_5 = (Assignment)cUnorderedGroup_1.eContents().get(5);
		private final RuleCall cVisibilityVisibilityEnumRuleCall_1_5_0 = (RuleCall)cVisibilityAssignment_1_5.eContents().get(0);
		
		//MethodModifier:
		//	{Modifier} (static?="static"? & final?="final"? & dynamic?="dynamic"? & override?="override"? & inline?="inline"? &
		//	visibility=Visibility?);
		public ParserRule getRule() { return rule; }

		//{Modifier} (static?="static"? & final?="final"? & dynamic?="dynamic"? & override?="override"? & inline?="inline"? &
		//visibility=Visibility?)
		public Group getGroup() { return cGroup; }

		//{Modifier}
		public Action getModifierAction_0() { return cModifierAction_0; }

		//static?="static"? & final?="final"? & dynamic?="dynamic"? & override?="override"? & inline?="inline"? &
		//visibility=Visibility?
		public UnorderedGroup getUnorderedGroup_1() { return cUnorderedGroup_1; }

		//static?="static"?
		public Assignment getStaticAssignment_1_0() { return cStaticAssignment_1_0; }

		//"static"
		public Keyword getStaticStaticKeyword_1_0_0() { return cStaticStaticKeyword_1_0_0; }

		//final?="final"?
		public Assignment getFinalAssignment_1_1() { return cFinalAssignment_1_1; }

		//"final"
		public Keyword getFinalFinalKeyword_1_1_0() { return cFinalFinalKeyword_1_1_0; }

		//dynamic?="dynamic"?
		public Assignment getDynamicAssignment_1_2() { return cDynamicAssignment_1_2; }

		//"dynamic"
		public Keyword getDynamicDynamicKeyword_1_2_0() { return cDynamicDynamicKeyword_1_2_0; }

		//override?="override"?
		public Assignment getOverrideAssignment_1_3() { return cOverrideAssignment_1_3; }

		//"override"
		public Keyword getOverrideOverrideKeyword_1_3_0() { return cOverrideOverrideKeyword_1_3_0; }

		//inline?="inline"?
		public Assignment getInlineAssignment_1_4() { return cInlineAssignment_1_4; }

		//"inline"
		public Keyword getInlineInlineKeyword_1_4_0() { return cInlineInlineKeyword_1_4_0; }

		//visibility=Visibility?
		public Assignment getVisibilityAssignment_1_5() { return cVisibilityAssignment_1_5; }

		//Visibility
		public RuleCall getVisibilityVisibilityEnumRuleCall_1_5_0() { return cVisibilityVisibilityEnumRuleCall_1_5_0; }
	}

	public class PropertyModifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PropertyModifier");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cModifierAction_0 = (Action)cGroup.eContents().get(0);
		private final UnorderedGroup cUnorderedGroup_1 = (UnorderedGroup)cGroup.eContents().get(1);
		private final Assignment cStaticAssignment_1_0 = (Assignment)cUnorderedGroup_1.eContents().get(0);
		private final Keyword cStaticStaticKeyword_1_0_0 = (Keyword)cStaticAssignment_1_0.eContents().get(0);
		private final Assignment cVisibilityAssignment_1_1 = (Assignment)cUnorderedGroup_1.eContents().get(1);
		private final RuleCall cVisibilityVisibilityEnumRuleCall_1_1_0 = (RuleCall)cVisibilityAssignment_1_1.eContents().get(0);
		
		//PropertyModifier:
		//	{Modifier} (static?="static"? & visibility=Visibility?);
		public ParserRule getRule() { return rule; }

		//{Modifier} (static?="static"? & visibility=Visibility?)
		public Group getGroup() { return cGroup; }

		//{Modifier}
		public Action getModifierAction_0() { return cModifierAction_0; }

		//static?="static"? & visibility=Visibility?
		public UnorderedGroup getUnorderedGroup_1() { return cUnorderedGroup_1; }

		//static?="static"?
		public Assignment getStaticAssignment_1_0() { return cStaticAssignment_1_0; }

		//"static"
		public Keyword getStaticStaticKeyword_1_0_0() { return cStaticStaticKeyword_1_0_0; }

		//visibility=Visibility?
		public Assignment getVisibilityAssignment_1_1() { return cVisibilityAssignment_1_1; }

		//Visibility
		public RuleCall getVisibilityVisibilityEnumRuleCall_1_1_0() { return cVisibilityVisibilityEnumRuleCall_1_1_0; }
	}

	public class ParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Parameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameValidIDParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cColonKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cTypeAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cTypeTypeReferenceParserRuleCall_1_1_0 = (RuleCall)cTypeAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cEqualsSignKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cDefaultValueAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cDefaultValueLiteralParserRuleCall_2_1_0 = (RuleCall)cDefaultValueAssignment_2_1.eContents().get(0);
		
		//Parameter:
		//	name=ValidID (":" type=TypeReference)? ("=" defaultValue=Literal)?;
		public ParserRule getRule() { return rule; }

		//name=ValidID (":" type=TypeReference)? ("=" defaultValue=Literal)?
		public Group getGroup() { return cGroup; }

		//name=ValidID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ValidID
		public RuleCall getNameValidIDParserRuleCall_0_0() { return cNameValidIDParserRuleCall_0_0; }

		//(":" type=TypeReference)?
		public Group getGroup_1() { return cGroup_1; }

		//":"
		public Keyword getColonKeyword_1_0() { return cColonKeyword_1_0; }

		//type=TypeReference
		public Assignment getTypeAssignment_1_1() { return cTypeAssignment_1_1; }

		//TypeReference
		public RuleCall getTypeTypeReferenceParserRuleCall_1_1_0() { return cTypeTypeReferenceParserRuleCall_1_1_0; }

		//("=" defaultValue=Literal)?
		public Group getGroup_2() { return cGroup_2; }

		//"="
		public Keyword getEqualsSignKeyword_2_0() { return cEqualsSignKeyword_2_0; }

		//defaultValue=Literal
		public Assignment getDefaultValueAssignment_2_1() { return cDefaultValueAssignment_2_1; }

		//Literal
		public RuleCall getDefaultValueLiteralParserRuleCall_2_1_0() { return cDefaultValueLiteralParserRuleCall_2_1_0; }
	}

	public class OptionalParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OptionalParameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOptionalAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cOptionalQuestionMarkKeyword_0_0 = (Keyword)cOptionalAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameValidIDParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cColonKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cTypeAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cTypeTypeReferenceParserRuleCall_2_1_0 = (RuleCall)cTypeAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cEqualsSignKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cDefaultValueAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cDefaultValueLiteralParserRuleCall_3_1_0 = (RuleCall)cDefaultValueAssignment_3_1.eContents().get(0);
		
		//OptionalParameter returns Parameter:
		//	optional?="?"? name=ValidID (":" type=TypeReference)? ("=" defaultValue=Literal)?;
		public ParserRule getRule() { return rule; }

		//optional?="?"? name=ValidID (":" type=TypeReference)? ("=" defaultValue=Literal)?
		public Group getGroup() { return cGroup; }

		//optional?="?"?
		public Assignment getOptionalAssignment_0() { return cOptionalAssignment_0; }

		//"?"
		public Keyword getOptionalQuestionMarkKeyword_0_0() { return cOptionalQuestionMarkKeyword_0_0; }

		//name=ValidID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ValidID
		public RuleCall getNameValidIDParserRuleCall_1_0() { return cNameValidIDParserRuleCall_1_0; }

		//(":" type=TypeReference)?
		public Group getGroup_2() { return cGroup_2; }

		//":"
		public Keyword getColonKeyword_2_0() { return cColonKeyword_2_0; }

		//type=TypeReference
		public Assignment getTypeAssignment_2_1() { return cTypeAssignment_2_1; }

		//TypeReference
		public RuleCall getTypeTypeReferenceParserRuleCall_2_1_0() { return cTypeTypeReferenceParserRuleCall_2_1_0; }

		//("=" defaultValue=Literal)?
		public Group getGroup_3() { return cGroup_3; }

		//"="
		public Keyword getEqualsSignKeyword_3_0() { return cEqualsSignKeyword_3_0; }

		//defaultValue=Literal
		public Assignment getDefaultValueAssignment_3_1() { return cDefaultValueAssignment_3_1; }

		//Literal
		public RuleCall getDefaultValueLiteralParserRuleCall_3_1_0() { return cDefaultValueLiteralParserRuleCall_3_1_0; }
	}

	public class ClassConstructorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ClassConstructor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cClassConstructorAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cMetadataAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cMetadataMetadataParserRuleCall_1_0 = (RuleCall)cMetadataAssignment_1.eContents().get(0);
		private final Assignment cVisibilityAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cVisibilityVisibilityEnumRuleCall_2_0 = (RuleCall)cVisibilityAssignment_2.eContents().get(0);
		private final Keyword cFunctionKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cNewKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cLeftParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Assignment cParametersAssignment_6_0 = (Assignment)cGroup_6.eContents().get(0);
		private final RuleCall cParametersOptionalParameterParserRuleCall_6_0_0 = (RuleCall)cParametersAssignment_6_0.eContents().get(0);
		private final Group cGroup_6_1 = (Group)cGroup_6.eContents().get(1);
		private final Keyword cCommaKeyword_6_1_0 = (Keyword)cGroup_6_1.eContents().get(0);
		private final Assignment cParametersAssignment_6_1_1 = (Assignment)cGroup_6_1.eContents().get(1);
		private final RuleCall cParametersOptionalParameterParserRuleCall_6_1_1_0 = (RuleCall)cParametersAssignment_6_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cColonKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Assignment cReturnTypeAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final RuleCall cReturnTypeTypeReferenceParserRuleCall_8_1_0 = (RuleCall)cReturnTypeAssignment_8_1.eContents().get(0);
		private final Assignment cBodyAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cBodyBlockExpressionParserRuleCall_9_0 = (RuleCall)cBodyAssignment_9.eContents().get(0);
		private final Keyword cSemicolonKeyword_10 = (Keyword)cGroup.eContents().get(10);
		
		//ClassConstructor:
		//	{ClassConstructor} metadata=Metadata? visibility=Visibility? "function" "new" "(" (parameters+=OptionalParameter (","
		//	parameters+=OptionalParameter)*)? ")" (":" returnType=TypeReference)? body=BlockExpression ";"?;
		public ParserRule getRule() { return rule; }

		//{ClassConstructor} metadata=Metadata? visibility=Visibility? "function" "new" "(" (parameters+=OptionalParameter (","
		//parameters+=OptionalParameter)*)? ")" (":" returnType=TypeReference)? body=BlockExpression ";"?
		public Group getGroup() { return cGroup; }

		//{ClassConstructor}
		public Action getClassConstructorAction_0() { return cClassConstructorAction_0; }

		//metadata=Metadata?
		public Assignment getMetadataAssignment_1() { return cMetadataAssignment_1; }

		//Metadata
		public RuleCall getMetadataMetadataParserRuleCall_1_0() { return cMetadataMetadataParserRuleCall_1_0; }

		//visibility=Visibility?
		public Assignment getVisibilityAssignment_2() { return cVisibilityAssignment_2; }

		//Visibility
		public RuleCall getVisibilityVisibilityEnumRuleCall_2_0() { return cVisibilityVisibilityEnumRuleCall_2_0; }

		//"function"
		public Keyword getFunctionKeyword_3() { return cFunctionKeyword_3; }

		//"new"
		public Keyword getNewKeyword_4() { return cNewKeyword_4; }

		//"("
		public Keyword getLeftParenthesisKeyword_5() { return cLeftParenthesisKeyword_5; }

		//(parameters+=OptionalParameter ("," parameters+=OptionalParameter)*)?
		public Group getGroup_6() { return cGroup_6; }

		//parameters+=OptionalParameter
		public Assignment getParametersAssignment_6_0() { return cParametersAssignment_6_0; }

		//OptionalParameter
		public RuleCall getParametersOptionalParameterParserRuleCall_6_0_0() { return cParametersOptionalParameterParserRuleCall_6_0_0; }

		//("," parameters+=OptionalParameter)*
		public Group getGroup_6_1() { return cGroup_6_1; }

		//","
		public Keyword getCommaKeyword_6_1_0() { return cCommaKeyword_6_1_0; }

		//parameters+=OptionalParameter
		public Assignment getParametersAssignment_6_1_1() { return cParametersAssignment_6_1_1; }

		//OptionalParameter
		public RuleCall getParametersOptionalParameterParserRuleCall_6_1_1_0() { return cParametersOptionalParameterParserRuleCall_6_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }

		//(":" returnType=TypeReference)?
		public Group getGroup_8() { return cGroup_8; }

		//":"
		public Keyword getColonKeyword_8_0() { return cColonKeyword_8_0; }

		//returnType=TypeReference
		public Assignment getReturnTypeAssignment_8_1() { return cReturnTypeAssignment_8_1; }

		//TypeReference
		public RuleCall getReturnTypeTypeReferenceParserRuleCall_8_1_0() { return cReturnTypeTypeReferenceParserRuleCall_8_1_0; }

		//body=BlockExpression
		public Assignment getBodyAssignment_9() { return cBodyAssignment_9; }

		//BlockExpression
		public RuleCall getBodyBlockExpressionParserRuleCall_9_0() { return cBodyBlockExpressionParserRuleCall_9_0; }

		//";"?
		public Keyword getSemicolonKeyword_10() { return cSemicolonKeyword_10; }
	}

	public class ClassPropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ClassProperty");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cMetadataAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cMetadataMetadataParserRuleCall_0_0 = (RuleCall)cMetadataAssignment_0.eContents().get(0);
		private final Assignment cModifierAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cModifierPropertyModifierParserRuleCall_1_0 = (RuleCall)cModifierAssignment_1.eContents().get(0);
		private final Keyword cVarKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameValidIDParserRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cLeftParenthesisKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cGetterAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cGetterGetterSetterParserRuleCall_4_1_0 = (RuleCall)cGetterAssignment_4_1.eContents().get(0);
		private final Keyword cCommaKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		private final Assignment cSetterAssignment_4_3 = (Assignment)cGroup_4.eContents().get(3);
		private final RuleCall cSetterGetterSetterParserRuleCall_4_3_0 = (RuleCall)cSetterAssignment_4_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4_4 = (Keyword)cGroup_4.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cColonKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cTypeAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cTypeTypeReferenceParserRuleCall_5_1_0 = (RuleCall)cTypeAssignment_5_1.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cEqualsSignKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cExpressionAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_6_1_0 = (RuleCall)cExpressionAssignment_6_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//ClassProperty:
		//	metadata=Metadata? modifier=PropertyModifier "var" name=ValidID ("(" getter=GetterSetter "," setter=GetterSetter ")")?
		//	(":" type=TypeReference)? ("=" expression=Expression)? ";"?;
		public ParserRule getRule() { return rule; }

		//metadata=Metadata? modifier=PropertyModifier "var" name=ValidID ("(" getter=GetterSetter "," setter=GetterSetter ")")?
		//(":" type=TypeReference)? ("=" expression=Expression)? ";"?
		public Group getGroup() { return cGroup; }

		//metadata=Metadata?
		public Assignment getMetadataAssignment_0() { return cMetadataAssignment_0; }

		//Metadata
		public RuleCall getMetadataMetadataParserRuleCall_0_0() { return cMetadataMetadataParserRuleCall_0_0; }

		//modifier=PropertyModifier
		public Assignment getModifierAssignment_1() { return cModifierAssignment_1; }

		//PropertyModifier
		public RuleCall getModifierPropertyModifierParserRuleCall_1_0() { return cModifierPropertyModifierParserRuleCall_1_0; }

		//"var"
		public Keyword getVarKeyword_2() { return cVarKeyword_2; }

		//name=ValidID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }

		//ValidID
		public RuleCall getNameValidIDParserRuleCall_3_0() { return cNameValidIDParserRuleCall_3_0; }

		//("(" getter=GetterSetter "," setter=GetterSetter ")")?
		public Group getGroup_4() { return cGroup_4; }

		//"("
		public Keyword getLeftParenthesisKeyword_4_0() { return cLeftParenthesisKeyword_4_0; }

		//getter=GetterSetter
		public Assignment getGetterAssignment_4_1() { return cGetterAssignment_4_1; }

		//GetterSetter
		public RuleCall getGetterGetterSetterParserRuleCall_4_1_0() { return cGetterGetterSetterParserRuleCall_4_1_0; }

		//","
		public Keyword getCommaKeyword_4_2() { return cCommaKeyword_4_2; }

		//setter=GetterSetter
		public Assignment getSetterAssignment_4_3() { return cSetterAssignment_4_3; }

		//GetterSetter
		public RuleCall getSetterGetterSetterParserRuleCall_4_3_0() { return cSetterGetterSetterParserRuleCall_4_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4_4() { return cRightParenthesisKeyword_4_4; }

		//(":" type=TypeReference)?
		public Group getGroup_5() { return cGroup_5; }

		//":"
		public Keyword getColonKeyword_5_0() { return cColonKeyword_5_0; }

		//type=TypeReference
		public Assignment getTypeAssignment_5_1() { return cTypeAssignment_5_1; }

		//TypeReference
		public RuleCall getTypeTypeReferenceParserRuleCall_5_1_0() { return cTypeTypeReferenceParserRuleCall_5_1_0; }

		//("=" expression=Expression)?
		public Group getGroup_6() { return cGroup_6; }

		//"="
		public Keyword getEqualsSignKeyword_6_0() { return cEqualsSignKeyword_6_0; }

		//expression=Expression
		public Assignment getExpressionAssignment_6_1() { return cExpressionAssignment_6_1; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_6_1_0() { return cExpressionExpressionParserRuleCall_6_1_0; }

		//";"?
		public Keyword getSemicolonKeyword_7() { return cSemicolonKeyword_7; }
	}

	public class ClassMethodElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ClassMethod");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cMetadataAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cMetadataMetadataParserRuleCall_0_0 = (RuleCall)cMetadataAssignment_0.eContents().get(0);
		private final Assignment cModifierAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cModifierMethodModifierParserRuleCall_1_0 = (RuleCall)cModifierAssignment_1.eContents().get(0);
		private final Keyword cFunctionKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameValidIDParserRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Assignment cTypeParametersAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cTypeParametersTypeParametersParserRuleCall_4_0 = (RuleCall)cTypeParametersAssignment_4.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Assignment cParametersAssignment_6_0 = (Assignment)cGroup_6.eContents().get(0);
		private final RuleCall cParametersOptionalParameterParserRuleCall_6_0_0 = (RuleCall)cParametersAssignment_6_0.eContents().get(0);
		private final Group cGroup_6_1 = (Group)cGroup_6.eContents().get(1);
		private final Keyword cCommaKeyword_6_1_0 = (Keyword)cGroup_6_1.eContents().get(0);
		private final Assignment cParametersAssignment_6_1_1 = (Assignment)cGroup_6_1.eContents().get(1);
		private final RuleCall cParametersOptionalParameterParserRuleCall_6_1_1_0 = (RuleCall)cParametersAssignment_6_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cColonKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Assignment cReturnTypeAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final RuleCall cReturnTypeTypeReferenceParserRuleCall_8_1_0 = (RuleCall)cReturnTypeAssignment_8_1.eContents().get(0);
		private final Assignment cUntypedAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final Keyword cUntypedUntypedKeyword_9_0 = (Keyword)cUntypedAssignment_9.eContents().get(0);
		private final Assignment cBodyAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cBodyBlockExpressionParserRuleCall_10_0 = (RuleCall)cBodyAssignment_10.eContents().get(0);
		private final Keyword cSemicolonKeyword_11 = (Keyword)cGroup.eContents().get(11);
		
		//ClassMethod returns Method:
		//	metadata=Metadata? modifier=MethodModifier "function" name=ValidID typeParameters=TypeParameters? "("
		//	(parameters+=OptionalParameter ("," parameters+=OptionalParameter)*)? ")" (":" returnType=TypeReference)?
		//	untyped?="untyped"? body=BlockExpression ";"?;
		public ParserRule getRule() { return rule; }

		//metadata=Metadata? modifier=MethodModifier "function" name=ValidID typeParameters=TypeParameters? "("
		//(parameters+=OptionalParameter ("," parameters+=OptionalParameter)*)? ")" (":" returnType=TypeReference)?
		//untyped?="untyped"? body=BlockExpression ";"?
		public Group getGroup() { return cGroup; }

		//metadata=Metadata?
		public Assignment getMetadataAssignment_0() { return cMetadataAssignment_0; }

		//Metadata
		public RuleCall getMetadataMetadataParserRuleCall_0_0() { return cMetadataMetadataParserRuleCall_0_0; }

		//modifier=MethodModifier
		public Assignment getModifierAssignment_1() { return cModifierAssignment_1; }

		//MethodModifier
		public RuleCall getModifierMethodModifierParserRuleCall_1_0() { return cModifierMethodModifierParserRuleCall_1_0; }

		//"function"
		public Keyword getFunctionKeyword_2() { return cFunctionKeyword_2; }

		//name=ValidID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }

		//ValidID
		public RuleCall getNameValidIDParserRuleCall_3_0() { return cNameValidIDParserRuleCall_3_0; }

		//typeParameters=TypeParameters?
		public Assignment getTypeParametersAssignment_4() { return cTypeParametersAssignment_4; }

		//TypeParameters
		public RuleCall getTypeParametersTypeParametersParserRuleCall_4_0() { return cTypeParametersTypeParametersParserRuleCall_4_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_5() { return cLeftParenthesisKeyword_5; }

		//(parameters+=OptionalParameter ("," parameters+=OptionalParameter)*)?
		public Group getGroup_6() { return cGroup_6; }

		//parameters+=OptionalParameter
		public Assignment getParametersAssignment_6_0() { return cParametersAssignment_6_0; }

		//OptionalParameter
		public RuleCall getParametersOptionalParameterParserRuleCall_6_0_0() { return cParametersOptionalParameterParserRuleCall_6_0_0; }

		//("," parameters+=OptionalParameter)*
		public Group getGroup_6_1() { return cGroup_6_1; }

		//","
		public Keyword getCommaKeyword_6_1_0() { return cCommaKeyword_6_1_0; }

		//parameters+=OptionalParameter
		public Assignment getParametersAssignment_6_1_1() { return cParametersAssignment_6_1_1; }

		//OptionalParameter
		public RuleCall getParametersOptionalParameterParserRuleCall_6_1_1_0() { return cParametersOptionalParameterParserRuleCall_6_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }

		//(":" returnType=TypeReference)?
		public Group getGroup_8() { return cGroup_8; }

		//":"
		public Keyword getColonKeyword_8_0() { return cColonKeyword_8_0; }

		//returnType=TypeReference
		public Assignment getReturnTypeAssignment_8_1() { return cReturnTypeAssignment_8_1; }

		//TypeReference
		public RuleCall getReturnTypeTypeReferenceParserRuleCall_8_1_0() { return cReturnTypeTypeReferenceParserRuleCall_8_1_0; }

		//untyped?="untyped"?
		public Assignment getUntypedAssignment_9() { return cUntypedAssignment_9; }

		//"untyped"
		public Keyword getUntypedUntypedKeyword_9_0() { return cUntypedUntypedKeyword_9_0; }

		//body=BlockExpression
		public Assignment getBodyAssignment_10() { return cBodyAssignment_10; }

		//BlockExpression
		public RuleCall getBodyBlockExpressionParserRuleCall_10_0() { return cBodyBlockExpressionParserRuleCall_10_0; }

		//";"?
		public Keyword getSemicolonKeyword_11() { return cSemicolonKeyword_11; }
	}

	public class InterfacePropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InterfaceProperty");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cMetadataAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cMetadataMetadataParserRuleCall_0_0 = (RuleCall)cMetadataAssignment_0.eContents().get(0);
		private final Keyword cVarKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameValidIDParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cGetterAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cGetterGetterSetterParserRuleCall_3_1_0 = (RuleCall)cGetterAssignment_3_1.eContents().get(0);
		private final Keyword cCommaKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Assignment cSetterAssignment_3_3 = (Assignment)cGroup_3.eContents().get(3);
		private final RuleCall cSetterGetterSetterParserRuleCall_3_3_0 = (RuleCall)cSetterAssignment_3_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_4 = (Keyword)cGroup_3.eContents().get(4);
		private final Keyword cColonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cTypeAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cTypeTypeReferenceParserRuleCall_5_0 = (RuleCall)cTypeAssignment_5.eContents().get(0);
		private final Keyword cSemicolonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//InterfaceProperty:
		//	metadata=Metadata? "var" name=ValidID ("(" getter=GetterSetter "," setter=GetterSetter ")")? ":" type=TypeReference
		//	";"?;
		public ParserRule getRule() { return rule; }

		//metadata=Metadata? "var" name=ValidID ("(" getter=GetterSetter "," setter=GetterSetter ")")? ":" type=TypeReference ";"?
		public Group getGroup() { return cGroup; }

		//metadata=Metadata?
		public Assignment getMetadataAssignment_0() { return cMetadataAssignment_0; }

		//Metadata
		public RuleCall getMetadataMetadataParserRuleCall_0_0() { return cMetadataMetadataParserRuleCall_0_0; }

		//"var"
		public Keyword getVarKeyword_1() { return cVarKeyword_1; }

		//name=ValidID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ValidID
		public RuleCall getNameValidIDParserRuleCall_2_0() { return cNameValidIDParserRuleCall_2_0; }

		//("(" getter=GetterSetter "," setter=GetterSetter ")")?
		public Group getGroup_3() { return cGroup_3; }

		//"("
		public Keyword getLeftParenthesisKeyword_3_0() { return cLeftParenthesisKeyword_3_0; }

		//getter=GetterSetter
		public Assignment getGetterAssignment_3_1() { return cGetterAssignment_3_1; }

		//GetterSetter
		public RuleCall getGetterGetterSetterParserRuleCall_3_1_0() { return cGetterGetterSetterParserRuleCall_3_1_0; }

		//","
		public Keyword getCommaKeyword_3_2() { return cCommaKeyword_3_2; }

		//setter=GetterSetter
		public Assignment getSetterAssignment_3_3() { return cSetterAssignment_3_3; }

		//GetterSetter
		public RuleCall getSetterGetterSetterParserRuleCall_3_3_0() { return cSetterGetterSetterParserRuleCall_3_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3_4() { return cRightParenthesisKeyword_3_4; }

		//":"
		public Keyword getColonKeyword_4() { return cColonKeyword_4; }

		//type=TypeReference
		public Assignment getTypeAssignment_5() { return cTypeAssignment_5; }

		//TypeReference
		public RuleCall getTypeTypeReferenceParserRuleCall_5_0() { return cTypeTypeReferenceParserRuleCall_5_0; }

		//";"?
		public Keyword getSemicolonKeyword_6() { return cSemicolonKeyword_6; }
	}

	public class InterfaceMethodElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InterfaceMethod");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cMetadataAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cMetadataMetadataParserRuleCall_0_0 = (RuleCall)cMetadataAssignment_0.eContents().get(0);
		private final Keyword cFunctionKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameValidIDParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Assignment cTypeParametersAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypeParametersTypeParametersParserRuleCall_3_0 = (RuleCall)cTypeParametersAssignment_3.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Assignment cParametersAssignment_5_0 = (Assignment)cGroup_5.eContents().get(0);
		private final RuleCall cParametersOptionalParameterParserRuleCall_5_0_0 = (RuleCall)cParametersAssignment_5_0.eContents().get(0);
		private final Group cGroup_5_1 = (Group)cGroup_5.eContents().get(1);
		private final Keyword cCommaKeyword_5_1_0 = (Keyword)cGroup_5_1.eContents().get(0);
		private final Assignment cParametersAssignment_5_1_1 = (Assignment)cGroup_5_1.eContents().get(1);
		private final RuleCall cParametersOptionalParameterParserRuleCall_5_1_1_0 = (RuleCall)cParametersAssignment_5_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cColonKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cReturnTypeAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cReturnTypeTypeReferenceParserRuleCall_7_1_0 = (RuleCall)cReturnTypeAssignment_7_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//InterfaceMethod returns Method:
		//	metadata=Metadata? "function" name=ValidID typeParameters=TypeParameters? "(" (parameters+=OptionalParameter (","
		//	parameters+=OptionalParameter)*)? ")" (":" returnType=TypeReference)? ";"?;
		public ParserRule getRule() { return rule; }

		//metadata=Metadata? "function" name=ValidID typeParameters=TypeParameters? "(" (parameters+=OptionalParameter (","
		//parameters+=OptionalParameter)*)? ")" (":" returnType=TypeReference)? ";"?
		public Group getGroup() { return cGroup; }

		//metadata=Metadata?
		public Assignment getMetadataAssignment_0() { return cMetadataAssignment_0; }

		//Metadata
		public RuleCall getMetadataMetadataParserRuleCall_0_0() { return cMetadataMetadataParserRuleCall_0_0; }

		//"function"
		public Keyword getFunctionKeyword_1() { return cFunctionKeyword_1; }

		//name=ValidID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ValidID
		public RuleCall getNameValidIDParserRuleCall_2_0() { return cNameValidIDParserRuleCall_2_0; }

		//typeParameters=TypeParameters?
		public Assignment getTypeParametersAssignment_3() { return cTypeParametersAssignment_3; }

		//TypeParameters
		public RuleCall getTypeParametersTypeParametersParserRuleCall_3_0() { return cTypeParametersTypeParametersParserRuleCall_3_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_4() { return cLeftParenthesisKeyword_4; }

		//(parameters+=OptionalParameter ("," parameters+=OptionalParameter)*)?
		public Group getGroup_5() { return cGroup_5; }

		//parameters+=OptionalParameter
		public Assignment getParametersAssignment_5_0() { return cParametersAssignment_5_0; }

		//OptionalParameter
		public RuleCall getParametersOptionalParameterParserRuleCall_5_0_0() { return cParametersOptionalParameterParserRuleCall_5_0_0; }

		//("," parameters+=OptionalParameter)*
		public Group getGroup_5_1() { return cGroup_5_1; }

		//","
		public Keyword getCommaKeyword_5_1_0() { return cCommaKeyword_5_1_0; }

		//parameters+=OptionalParameter
		public Assignment getParametersAssignment_5_1_1() { return cParametersAssignment_5_1_1; }

		//OptionalParameter
		public RuleCall getParametersOptionalParameterParserRuleCall_5_1_1_0() { return cParametersOptionalParameterParserRuleCall_5_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }

		//(":" returnType=TypeReference)?
		public Group getGroup_7() { return cGroup_7; }

		//":"
		public Keyword getColonKeyword_7_0() { return cColonKeyword_7_0; }

		//returnType=TypeReference
		public Assignment getReturnTypeAssignment_7_1() { return cReturnTypeAssignment_7_1; }

		//TypeReference
		public RuleCall getReturnTypeTypeReferenceParserRuleCall_7_1_0() { return cReturnTypeTypeReferenceParserRuleCall_7_1_0; }

		//";"?
		public Keyword getSemicolonKeyword_8() { return cSemicolonKeyword_8; }
	}

	public class TypedefPropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TypedefProperty");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cMetadataAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cMetadataMetadataParserRuleCall_0_0 = (RuleCall)cMetadataAssignment_0.eContents().get(0);
		private final Assignment cVisibilityAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVisibilityVisibilityEnumRuleCall_1_0 = (RuleCall)cVisibilityAssignment_1.eContents().get(0);
		private final Keyword cVarKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameValidIDParserRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cLeftParenthesisKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cGetterAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cGetterGetterSetterParserRuleCall_4_1_0 = (RuleCall)cGetterAssignment_4_1.eContents().get(0);
		private final Keyword cCommaKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		private final Assignment cSetterAssignment_4_3 = (Assignment)cGroup_4.eContents().get(3);
		private final RuleCall cSetterGetterSetterParserRuleCall_4_3_0 = (RuleCall)cSetterAssignment_4_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4_4 = (Keyword)cGroup_4.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cColonKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cTypeAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cTypeTypeReferenceParserRuleCall_5_1_0 = (RuleCall)cTypeAssignment_5_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//TypedefProperty:
		//	metadata=Metadata? visibility=Visibility? "var" name=ValidID ("(" getter=GetterSetter "," setter=GetterSetter ")")?
		//	(":" type=TypeReference)? ";"?;
		public ParserRule getRule() { return rule; }

		//metadata=Metadata? visibility=Visibility? "var" name=ValidID ("(" getter=GetterSetter "," setter=GetterSetter ")")? (":"
		//type=TypeReference)? ";"?
		public Group getGroup() { return cGroup; }

		//metadata=Metadata?
		public Assignment getMetadataAssignment_0() { return cMetadataAssignment_0; }

		//Metadata
		public RuleCall getMetadataMetadataParserRuleCall_0_0() { return cMetadataMetadataParserRuleCall_0_0; }

		//visibility=Visibility?
		public Assignment getVisibilityAssignment_1() { return cVisibilityAssignment_1; }

		//Visibility
		public RuleCall getVisibilityVisibilityEnumRuleCall_1_0() { return cVisibilityVisibilityEnumRuleCall_1_0; }

		//"var"
		public Keyword getVarKeyword_2() { return cVarKeyword_2; }

		//name=ValidID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }

		//ValidID
		public RuleCall getNameValidIDParserRuleCall_3_0() { return cNameValidIDParserRuleCall_3_0; }

		//("(" getter=GetterSetter "," setter=GetterSetter ")")?
		public Group getGroup_4() { return cGroup_4; }

		//"("
		public Keyword getLeftParenthesisKeyword_4_0() { return cLeftParenthesisKeyword_4_0; }

		//getter=GetterSetter
		public Assignment getGetterAssignment_4_1() { return cGetterAssignment_4_1; }

		//GetterSetter
		public RuleCall getGetterGetterSetterParserRuleCall_4_1_0() { return cGetterGetterSetterParserRuleCall_4_1_0; }

		//","
		public Keyword getCommaKeyword_4_2() { return cCommaKeyword_4_2; }

		//setter=GetterSetter
		public Assignment getSetterAssignment_4_3() { return cSetterAssignment_4_3; }

		//GetterSetter
		public RuleCall getSetterGetterSetterParserRuleCall_4_3_0() { return cSetterGetterSetterParserRuleCall_4_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4_4() { return cRightParenthesisKeyword_4_4; }

		//(":" type=TypeReference)?
		public Group getGroup_5() { return cGroup_5; }

		//":"
		public Keyword getColonKeyword_5_0() { return cColonKeyword_5_0; }

		//type=TypeReference
		public Assignment getTypeAssignment_5_1() { return cTypeAssignment_5_1; }

		//TypeReference
		public RuleCall getTypeTypeReferenceParserRuleCall_5_1_0() { return cTypeTypeReferenceParserRuleCall_5_1_0; }

		//";"?
		public Keyword getSemicolonKeyword_6() { return cSemicolonKeyword_6; }
	}

	public class TypedefMethodElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TypedefMethod");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cMetadataAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cMetadataMetadataParserRuleCall_0_0 = (RuleCall)cMetadataAssignment_0.eContents().get(0);
		private final Assignment cVisibilityAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVisibilityVisibilityEnumRuleCall_1_0 = (RuleCall)cVisibilityAssignment_1.eContents().get(0);
		private final Keyword cFunctionKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameValidIDParserRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Assignment cTypeParametersAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cTypeParametersTypeParametersParserRuleCall_4_0 = (RuleCall)cTypeParametersAssignment_4.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Assignment cParametersAssignment_6_0 = (Assignment)cGroup_6.eContents().get(0);
		private final RuleCall cParametersOptionalParameterParserRuleCall_6_0_0 = (RuleCall)cParametersAssignment_6_0.eContents().get(0);
		private final Group cGroup_6_1 = (Group)cGroup_6.eContents().get(1);
		private final Keyword cCommaKeyword_6_1_0 = (Keyword)cGroup_6_1.eContents().get(0);
		private final Assignment cParametersAssignment_6_1_1 = (Assignment)cGroup_6_1.eContents().get(1);
		private final RuleCall cParametersOptionalParameterParserRuleCall_6_1_1_0 = (RuleCall)cParametersAssignment_6_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cColonKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Assignment cReturnTypeAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final RuleCall cReturnTypeTypeReferenceParserRuleCall_8_1_0 = (RuleCall)cReturnTypeAssignment_8_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//TypedefMethod returns Method:
		//	metadata=Metadata? visibility=Visibility? "function" name=ValidID typeParameters=TypeParameters? "("
		//	(parameters+=OptionalParameter ("," parameters+=OptionalParameter)*)? ")" (":" returnType=TypeReference)? ";"?;
		public ParserRule getRule() { return rule; }

		//metadata=Metadata? visibility=Visibility? "function" name=ValidID typeParameters=TypeParameters? "("
		//(parameters+=OptionalParameter ("," parameters+=OptionalParameter)*)? ")" (":" returnType=TypeReference)? ";"?
		public Group getGroup() { return cGroup; }

		//metadata=Metadata?
		public Assignment getMetadataAssignment_0() { return cMetadataAssignment_0; }

		//Metadata
		public RuleCall getMetadataMetadataParserRuleCall_0_0() { return cMetadataMetadataParserRuleCall_0_0; }

		//visibility=Visibility?
		public Assignment getVisibilityAssignment_1() { return cVisibilityAssignment_1; }

		//Visibility
		public RuleCall getVisibilityVisibilityEnumRuleCall_1_0() { return cVisibilityVisibilityEnumRuleCall_1_0; }

		//"function"
		public Keyword getFunctionKeyword_2() { return cFunctionKeyword_2; }

		//name=ValidID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }

		//ValidID
		public RuleCall getNameValidIDParserRuleCall_3_0() { return cNameValidIDParserRuleCall_3_0; }

		//typeParameters=TypeParameters?
		public Assignment getTypeParametersAssignment_4() { return cTypeParametersAssignment_4; }

		//TypeParameters
		public RuleCall getTypeParametersTypeParametersParserRuleCall_4_0() { return cTypeParametersTypeParametersParserRuleCall_4_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_5() { return cLeftParenthesisKeyword_5; }

		//(parameters+=OptionalParameter ("," parameters+=OptionalParameter)*)?
		public Group getGroup_6() { return cGroup_6; }

		//parameters+=OptionalParameter
		public Assignment getParametersAssignment_6_0() { return cParametersAssignment_6_0; }

		//OptionalParameter
		public RuleCall getParametersOptionalParameterParserRuleCall_6_0_0() { return cParametersOptionalParameterParserRuleCall_6_0_0; }

		//("," parameters+=OptionalParameter)*
		public Group getGroup_6_1() { return cGroup_6_1; }

		//","
		public Keyword getCommaKeyword_6_1_0() { return cCommaKeyword_6_1_0; }

		//parameters+=OptionalParameter
		public Assignment getParametersAssignment_6_1_1() { return cParametersAssignment_6_1_1; }

		//OptionalParameter
		public RuleCall getParametersOptionalParameterParserRuleCall_6_1_1_0() { return cParametersOptionalParameterParserRuleCall_6_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }

		//(":" returnType=TypeReference)?
		public Group getGroup_8() { return cGroup_8; }

		//":"
		public Keyword getColonKeyword_8_0() { return cColonKeyword_8_0; }

		//returnType=TypeReference
		public Assignment getReturnTypeAssignment_8_1() { return cReturnTypeAssignment_8_1; }

		//TypeReference
		public RuleCall getReturnTypeTypeReferenceParserRuleCall_8_1_0() { return cReturnTypeTypeReferenceParserRuleCall_8_1_0; }

		//";"?
		public Keyword getSemicolonKeyword_9() { return cSemicolonKeyword_9; }
	}

	public class EnumConstructorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EnumConstructor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cMetadataAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cMetadataMetadataParserRuleCall_0_0 = (RuleCall)cMetadataAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameValidIDParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cParametersAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cParametersOptionalParameterParserRuleCall_2_1_0 = (RuleCall)cParametersAssignment_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cCommaKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cParametersAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cParametersOptionalParameterParserRuleCall_2_2_1_0 = (RuleCall)cParametersAssignment_2_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//EnumConstructor:
		//	metadata=Metadata? name=ValidID ("(" parameters+=OptionalParameter ("," parameters+=OptionalParameter)* ")")? ";"?;
		public ParserRule getRule() { return rule; }

		//metadata=Metadata? name=ValidID ("(" parameters+=OptionalParameter ("," parameters+=OptionalParameter)* ")")? ";"?
		public Group getGroup() { return cGroup; }

		//metadata=Metadata?
		public Assignment getMetadataAssignment_0() { return cMetadataAssignment_0; }

		//Metadata
		public RuleCall getMetadataMetadataParserRuleCall_0_0() { return cMetadataMetadataParserRuleCall_0_0; }

		//name=ValidID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ValidID
		public RuleCall getNameValidIDParserRuleCall_1_0() { return cNameValidIDParserRuleCall_1_0; }

		//("(" parameters+=OptionalParameter ("," parameters+=OptionalParameter)* ")")?
		public Group getGroup_2() { return cGroup_2; }

		//"("
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }

		//parameters+=OptionalParameter
		public Assignment getParametersAssignment_2_1() { return cParametersAssignment_2_1; }

		//OptionalParameter
		public RuleCall getParametersOptionalParameterParserRuleCall_2_1_0() { return cParametersOptionalParameterParserRuleCall_2_1_0; }

		//("," parameters+=OptionalParameter)*
		public Group getGroup_2_2() { return cGroup_2_2; }

		//","
		public Keyword getCommaKeyword_2_2_0() { return cCommaKeyword_2_2_0; }

		//parameters+=OptionalParameter
		public Assignment getParametersAssignment_2_2_1() { return cParametersAssignment_2_2_1; }

		//OptionalParameter
		public RuleCall getParametersOptionalParameterParserRuleCall_2_2_1_0() { return cParametersOptionalParameterParserRuleCall_2_2_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_2_3() { return cRightParenthesisKeyword_2_3; }

		//";"?
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class ExternClassConstructorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExternClassConstructor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cExternClassConstructorAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cMetadataAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cMetadataMetadataParserRuleCall_1_0 = (RuleCall)cMetadataAssignment_1.eContents().get(0);
		private final Assignment cVisibilityAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cVisibilityVisibilityEnumRuleCall_2_0 = (RuleCall)cVisibilityAssignment_2.eContents().get(0);
		private final Keyword cFunctionKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cNewKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cLeftParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Assignment cParametersAssignment_6_0 = (Assignment)cGroup_6.eContents().get(0);
		private final RuleCall cParametersOptionalParameterParserRuleCall_6_0_0 = (RuleCall)cParametersAssignment_6_0.eContents().get(0);
		private final Group cGroup_6_1 = (Group)cGroup_6.eContents().get(1);
		private final Keyword cCommaKeyword_6_1_0 = (Keyword)cGroup_6_1.eContents().get(0);
		private final Assignment cParametersAssignment_6_1_1 = (Assignment)cGroup_6_1.eContents().get(1);
		private final RuleCall cParametersOptionalParameterParserRuleCall_6_1_1_0 = (RuleCall)cParametersAssignment_6_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cColonKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Assignment cReturnTypeAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final RuleCall cReturnTypeTypeReferenceParserRuleCall_8_1_0 = (RuleCall)cReturnTypeAssignment_8_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//ExternClassConstructor:
		//	{ExternClassConstructor} metadata=Metadata? visibility=Visibility? "function" "new" "(" (parameters+=OptionalParameter
		//	("," parameters+=OptionalParameter)*)? ")" (":" returnType=TypeReference)? ";"?;
		public ParserRule getRule() { return rule; }

		//{ExternClassConstructor} metadata=Metadata? visibility=Visibility? "function" "new" "(" (parameters+=OptionalParameter
		//("," parameters+=OptionalParameter)*)? ")" (":" returnType=TypeReference)? ";"?
		public Group getGroup() { return cGroup; }

		//{ExternClassConstructor}
		public Action getExternClassConstructorAction_0() { return cExternClassConstructorAction_0; }

		//metadata=Metadata?
		public Assignment getMetadataAssignment_1() { return cMetadataAssignment_1; }

		//Metadata
		public RuleCall getMetadataMetadataParserRuleCall_1_0() { return cMetadataMetadataParserRuleCall_1_0; }

		//visibility=Visibility?
		public Assignment getVisibilityAssignment_2() { return cVisibilityAssignment_2; }

		//Visibility
		public RuleCall getVisibilityVisibilityEnumRuleCall_2_0() { return cVisibilityVisibilityEnumRuleCall_2_0; }

		//"function"
		public Keyword getFunctionKeyword_3() { return cFunctionKeyword_3; }

		//"new"
		public Keyword getNewKeyword_4() { return cNewKeyword_4; }

		//"("
		public Keyword getLeftParenthesisKeyword_5() { return cLeftParenthesisKeyword_5; }

		//(parameters+=OptionalParameter ("," parameters+=OptionalParameter)*)?
		public Group getGroup_6() { return cGroup_6; }

		//parameters+=OptionalParameter
		public Assignment getParametersAssignment_6_0() { return cParametersAssignment_6_0; }

		//OptionalParameter
		public RuleCall getParametersOptionalParameterParserRuleCall_6_0_0() { return cParametersOptionalParameterParserRuleCall_6_0_0; }

		//("," parameters+=OptionalParameter)*
		public Group getGroup_6_1() { return cGroup_6_1; }

		//","
		public Keyword getCommaKeyword_6_1_0() { return cCommaKeyword_6_1_0; }

		//parameters+=OptionalParameter
		public Assignment getParametersAssignment_6_1_1() { return cParametersAssignment_6_1_1; }

		//OptionalParameter
		public RuleCall getParametersOptionalParameterParserRuleCall_6_1_1_0() { return cParametersOptionalParameterParserRuleCall_6_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }

		//(":" returnType=TypeReference)?
		public Group getGroup_8() { return cGroup_8; }

		//":"
		public Keyword getColonKeyword_8_0() { return cColonKeyword_8_0; }

		//returnType=TypeReference
		public Assignment getReturnTypeAssignment_8_1() { return cReturnTypeAssignment_8_1; }

		//TypeReference
		public RuleCall getReturnTypeTypeReferenceParserRuleCall_8_1_0() { return cReturnTypeTypeReferenceParserRuleCall_8_1_0; }

		//";"?
		public Keyword getSemicolonKeyword_9() { return cSemicolonKeyword_9; }
	}

	public class ExternClassPropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExternClassProperty");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cMetadataAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cMetadataMetadataParserRuleCall_0_0 = (RuleCall)cMetadataAssignment_0.eContents().get(0);
		private final Assignment cModifierAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cModifierPropertyModifierParserRuleCall_1_0 = (RuleCall)cModifierAssignment_1.eContents().get(0);
		private final Keyword cVarKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameValidIDParserRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cLeftParenthesisKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cGetterAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cGetterGetterSetterParserRuleCall_4_1_0 = (RuleCall)cGetterAssignment_4_1.eContents().get(0);
		private final Keyword cCommaKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		private final Assignment cSetterAssignment_4_3 = (Assignment)cGroup_4.eContents().get(3);
		private final RuleCall cSetterGetterSetterParserRuleCall_4_3_0 = (RuleCall)cSetterAssignment_4_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4_4 = (Keyword)cGroup_4.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cColonKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cTypeAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cTypeTypeReferenceParserRuleCall_5_1_0 = (RuleCall)cTypeAssignment_5_1.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cEqualsSignKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cExpressionAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_6_1_0 = (RuleCall)cExpressionAssignment_6_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//ExternClassProperty:
		//	metadata=Metadata? modifier=PropertyModifier "var" name=ValidID ("(" getter=GetterSetter "," setter=GetterSetter ")")?
		//	(":" type=TypeReference)? ("=" expression=Expression)? ";"?;
		public ParserRule getRule() { return rule; }

		//metadata=Metadata? modifier=PropertyModifier "var" name=ValidID ("(" getter=GetterSetter "," setter=GetterSetter ")")?
		//(":" type=TypeReference)? ("=" expression=Expression)? ";"?
		public Group getGroup() { return cGroup; }

		//metadata=Metadata?
		public Assignment getMetadataAssignment_0() { return cMetadataAssignment_0; }

		//Metadata
		public RuleCall getMetadataMetadataParserRuleCall_0_0() { return cMetadataMetadataParserRuleCall_0_0; }

		//modifier=PropertyModifier
		public Assignment getModifierAssignment_1() { return cModifierAssignment_1; }

		//PropertyModifier
		public RuleCall getModifierPropertyModifierParserRuleCall_1_0() { return cModifierPropertyModifierParserRuleCall_1_0; }

		//"var"
		public Keyword getVarKeyword_2() { return cVarKeyword_2; }

		//name=ValidID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }

		//ValidID
		public RuleCall getNameValidIDParserRuleCall_3_0() { return cNameValidIDParserRuleCall_3_0; }

		//("(" getter=GetterSetter "," setter=GetterSetter ")")?
		public Group getGroup_4() { return cGroup_4; }

		//"("
		public Keyword getLeftParenthesisKeyword_4_0() { return cLeftParenthesisKeyword_4_0; }

		//getter=GetterSetter
		public Assignment getGetterAssignment_4_1() { return cGetterAssignment_4_1; }

		//GetterSetter
		public RuleCall getGetterGetterSetterParserRuleCall_4_1_0() { return cGetterGetterSetterParserRuleCall_4_1_0; }

		//","
		public Keyword getCommaKeyword_4_2() { return cCommaKeyword_4_2; }

		//setter=GetterSetter
		public Assignment getSetterAssignment_4_3() { return cSetterAssignment_4_3; }

		//GetterSetter
		public RuleCall getSetterGetterSetterParserRuleCall_4_3_0() { return cSetterGetterSetterParserRuleCall_4_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4_4() { return cRightParenthesisKeyword_4_4; }

		//(":" type=TypeReference)?
		public Group getGroup_5() { return cGroup_5; }

		//":"
		public Keyword getColonKeyword_5_0() { return cColonKeyword_5_0; }

		//type=TypeReference
		public Assignment getTypeAssignment_5_1() { return cTypeAssignment_5_1; }

		//TypeReference
		public RuleCall getTypeTypeReferenceParserRuleCall_5_1_0() { return cTypeTypeReferenceParserRuleCall_5_1_0; }

		//("=" expression=Expression)?
		public Group getGroup_6() { return cGroup_6; }

		//"="
		public Keyword getEqualsSignKeyword_6_0() { return cEqualsSignKeyword_6_0; }

		//expression=Expression
		public Assignment getExpressionAssignment_6_1() { return cExpressionAssignment_6_1; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_6_1_0() { return cExpressionExpressionParserRuleCall_6_1_0; }

		//";"?
		public Keyword getSemicolonKeyword_7() { return cSemicolonKeyword_7; }
	}

	public class ExternClassMethodElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExternClassMethod");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cMetadataAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cMetadataMetadataParserRuleCall_0_0 = (RuleCall)cMetadataAssignment_0.eContents().get(0);
		private final Assignment cModifierAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cModifierMethodModifierParserRuleCall_1_0 = (RuleCall)cModifierAssignment_1.eContents().get(0);
		private final Keyword cFunctionKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameValidIDParserRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Assignment cTypeParametersAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cTypeParametersTypeParametersParserRuleCall_4_0 = (RuleCall)cTypeParametersAssignment_4.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Assignment cParametersAssignment_6_0 = (Assignment)cGroup_6.eContents().get(0);
		private final RuleCall cParametersOptionalParameterParserRuleCall_6_0_0 = (RuleCall)cParametersAssignment_6_0.eContents().get(0);
		private final Group cGroup_6_1 = (Group)cGroup_6.eContents().get(1);
		private final Keyword cCommaKeyword_6_1_0 = (Keyword)cGroup_6_1.eContents().get(0);
		private final Assignment cParametersAssignment_6_1_1 = (Assignment)cGroup_6_1.eContents().get(1);
		private final RuleCall cParametersOptionalParameterParserRuleCall_6_1_1_0 = (RuleCall)cParametersAssignment_6_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cColonKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Assignment cReturnTypeAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final RuleCall cReturnTypeTypeReferenceParserRuleCall_8_1_0 = (RuleCall)cReturnTypeAssignment_8_1.eContents().get(0);
		private final Group cGroup_9 = (Group)cGroup.eContents().get(9);
		private final Keyword cUntypedKeyword_9_0 = (Keyword)cGroup_9.eContents().get(0);
		private final Assignment cBodyAssignment_9_1 = (Assignment)cGroup_9.eContents().get(1);
		private final RuleCall cBodyBlockExpressionParserRuleCall_9_1_0 = (RuleCall)cBodyAssignment_9_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_10 = (Keyword)cGroup.eContents().get(10);
		
		//ExternClassMethod returns Method:
		//	metadata=Metadata? modifier=MethodModifier "function" name=ValidID typeParameters=TypeParameters? "("
		//	(parameters+=OptionalParameter ("," parameters+=OptionalParameter)*)? ")" (":" returnType=TypeReference)? ("untyped"
		//	body=BlockExpression)? ";"?;
		public ParserRule getRule() { return rule; }

		//metadata=Metadata? modifier=MethodModifier "function" name=ValidID typeParameters=TypeParameters? "("
		//(parameters+=OptionalParameter ("," parameters+=OptionalParameter)*)? ")" (":" returnType=TypeReference)? ("untyped"
		//body=BlockExpression)? ";"?
		public Group getGroup() { return cGroup; }

		//metadata=Metadata?
		public Assignment getMetadataAssignment_0() { return cMetadataAssignment_0; }

		//Metadata
		public RuleCall getMetadataMetadataParserRuleCall_0_0() { return cMetadataMetadataParserRuleCall_0_0; }

		//modifier=MethodModifier
		public Assignment getModifierAssignment_1() { return cModifierAssignment_1; }

		//MethodModifier
		public RuleCall getModifierMethodModifierParserRuleCall_1_0() { return cModifierMethodModifierParserRuleCall_1_0; }

		//"function"
		public Keyword getFunctionKeyword_2() { return cFunctionKeyword_2; }

		//name=ValidID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }

		//ValidID
		public RuleCall getNameValidIDParserRuleCall_3_0() { return cNameValidIDParserRuleCall_3_0; }

		//typeParameters=TypeParameters?
		public Assignment getTypeParametersAssignment_4() { return cTypeParametersAssignment_4; }

		//TypeParameters
		public RuleCall getTypeParametersTypeParametersParserRuleCall_4_0() { return cTypeParametersTypeParametersParserRuleCall_4_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_5() { return cLeftParenthesisKeyword_5; }

		//(parameters+=OptionalParameter ("," parameters+=OptionalParameter)*)?
		public Group getGroup_6() { return cGroup_6; }

		//parameters+=OptionalParameter
		public Assignment getParametersAssignment_6_0() { return cParametersAssignment_6_0; }

		//OptionalParameter
		public RuleCall getParametersOptionalParameterParserRuleCall_6_0_0() { return cParametersOptionalParameterParserRuleCall_6_0_0; }

		//("," parameters+=OptionalParameter)*
		public Group getGroup_6_1() { return cGroup_6_1; }

		//","
		public Keyword getCommaKeyword_6_1_0() { return cCommaKeyword_6_1_0; }

		//parameters+=OptionalParameter
		public Assignment getParametersAssignment_6_1_1() { return cParametersAssignment_6_1_1; }

		//OptionalParameter
		public RuleCall getParametersOptionalParameterParserRuleCall_6_1_1_0() { return cParametersOptionalParameterParserRuleCall_6_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }

		//(":" returnType=TypeReference)?
		public Group getGroup_8() { return cGroup_8; }

		//":"
		public Keyword getColonKeyword_8_0() { return cColonKeyword_8_0; }

		//returnType=TypeReference
		public Assignment getReturnTypeAssignment_8_1() { return cReturnTypeAssignment_8_1; }

		//TypeReference
		public RuleCall getReturnTypeTypeReferenceParserRuleCall_8_1_0() { return cReturnTypeTypeReferenceParserRuleCall_8_1_0; }

		//("untyped" body=BlockExpression)?
		public Group getGroup_9() { return cGroup_9; }

		//"untyped"
		public Keyword getUntypedKeyword_9_0() { return cUntypedKeyword_9_0; }

		//body=BlockExpression
		public Assignment getBodyAssignment_9_1() { return cBodyAssignment_9_1; }

		//BlockExpression
		public RuleCall getBodyBlockExpressionParserRuleCall_9_1_0() { return cBodyBlockExpressionParserRuleCall_9_1_0; }

		//";"?
		public Keyword getSemicolonKeyword_10() { return cSemicolonKeyword_10; }
	}

	public class GetterSetterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "GetterSetter");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cClassMethodReferenceParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cGetterSetterLiteralParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//GetterSetter:
		//	ClassMethodReference | GetterSetterLiteral;
		public ParserRule getRule() { return rule; }

		//ClassMethodReference | GetterSetterLiteral
		public Alternatives getAlternatives() { return cAlternatives; }

		//ClassMethodReference
		public RuleCall getClassMethodReferenceParserRuleCall_0() { return cClassMethodReferenceParserRuleCall_0; }

		//GetterSetterLiteral
		public RuleCall getGetterSetterLiteralParserRuleCall_1() { return cGetterSetterLiteralParserRuleCall_1; }
	}

	public class ClassMethodReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ClassMethodReference");
		private final Assignment cReferenceAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cReferenceMethodCrossReference_0 = (CrossReference)cReferenceAssignment.eContents().get(0);
		private final RuleCall cReferenceMethodValidIDParserRuleCall_0_1 = (RuleCall)cReferenceMethodCrossReference_0.eContents().get(1);
		
		//ClassMethodReference:
		//	reference=[Method|ValidID];
		public ParserRule getRule() { return rule; }

		//reference=[Method|ValidID]
		public Assignment getReferenceAssignment() { return cReferenceAssignment; }

		//[Method|ValidID]
		public CrossReference getReferenceMethodCrossReference_0() { return cReferenceMethodCrossReference_0; }

		//ValidID
		public RuleCall getReferenceMethodValidIDParserRuleCall_0_1() { return cReferenceMethodValidIDParserRuleCall_0_1; }
	}

	public class GetterSetterLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "GetterSetterLiteral");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cValueAlternatives_0 = (Alternatives)cValueAssignment.eContents().get(0);
		private final Keyword cValueDefaultKeyword_0_0 = (Keyword)cValueAlternatives_0.eContents().get(0);
		private final Keyword cValueNullKeyword_0_1 = (Keyword)cValueAlternatives_0.eContents().get(1);
		private final Keyword cValueDynamicKeyword_0_2 = (Keyword)cValueAlternatives_0.eContents().get(2);
		private final Keyword cValueNeverKeyword_0_3 = (Keyword)cValueAlternatives_0.eContents().get(3);
		
		//GetterSetterLiteral:
		//	value=("default" | "null" | "dynamic" | "never");
		public ParserRule getRule() { return rule; }

		//value=("default" | "null" | "dynamic" | "never")
		public Assignment getValueAssignment() { return cValueAssignment; }

		//"default" | "null" | "dynamic" | "never"
		public Alternatives getValueAlternatives_0() { return cValueAlternatives_0; }

		//"default"
		public Keyword getValueDefaultKeyword_0_0() { return cValueDefaultKeyword_0_0; }

		//"null"
		public Keyword getValueNullKeyword_0_1() { return cValueNullKeyword_0_1; }

		//"dynamic"
		public Keyword getValueDynamicKeyword_0_2() { return cValueDynamicKeyword_0_2; }

		//"never"
		public Keyword getValueNeverKeyword_0_3() { return cValueNeverKeyword_0_3; }
	}

	public class FeatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Feature");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cParameterParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cVariableDeclarationParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cClassMethodParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cClassPropertyParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cInterfaceMethodParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cInterfacePropertyParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cTypedefMethodParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cTypedefPropertyParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cEnumConstructorParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cExternClassMethodParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		private final RuleCall cExternClassPropertyParserRuleCall_11 = (RuleCall)cAlternatives.eContents().get(11);
		
		//Feature:
		//	Type | Parameter | VariableDeclaration | ClassMethod | ClassProperty | InterfaceMethod | InterfaceProperty |
		//	TypedefMethod | TypedefProperty | EnumConstructor | ExternClassMethod | ExternClassProperty;
		public ParserRule getRule() { return rule; }

		//Type | Parameter | VariableDeclaration | ClassMethod | ClassProperty | InterfaceMethod | InterfaceProperty |
		//TypedefMethod | TypedefProperty | EnumConstructor | ExternClassMethod | ExternClassProperty
		public Alternatives getAlternatives() { return cAlternatives; }

		//Type
		public RuleCall getTypeParserRuleCall_0() { return cTypeParserRuleCall_0; }

		//Parameter
		public RuleCall getParameterParserRuleCall_1() { return cParameterParserRuleCall_1; }

		//VariableDeclaration
		public RuleCall getVariableDeclarationParserRuleCall_2() { return cVariableDeclarationParserRuleCall_2; }

		//ClassMethod
		public RuleCall getClassMethodParserRuleCall_3() { return cClassMethodParserRuleCall_3; }

		//ClassProperty
		public RuleCall getClassPropertyParserRuleCall_4() { return cClassPropertyParserRuleCall_4; }

		//InterfaceMethod
		public RuleCall getInterfaceMethodParserRuleCall_5() { return cInterfaceMethodParserRuleCall_5; }

		//InterfaceProperty
		public RuleCall getInterfacePropertyParserRuleCall_6() { return cInterfacePropertyParserRuleCall_6; }

		//TypedefMethod
		public RuleCall getTypedefMethodParserRuleCall_7() { return cTypedefMethodParserRuleCall_7; }

		//TypedefProperty
		public RuleCall getTypedefPropertyParserRuleCall_8() { return cTypedefPropertyParserRuleCall_8; }

		//EnumConstructor
		public RuleCall getEnumConstructorParserRuleCall_9() { return cEnumConstructorParserRuleCall_9; }

		//ExternClassMethod
		public RuleCall getExternClassMethodParserRuleCall_10() { return cExternClassMethodParserRuleCall_10; }

		//ExternClassProperty
		public RuleCall getExternClassPropertyParserRuleCall_11() { return cExternClassPropertyParserRuleCall_11; }
	}

	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Expression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cShortIfExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cCastExpressionAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cCastKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Alternatives cAlternatives_1_2 = (Alternatives)cGroup_1.eContents().get(2);
		private final Assignment cTargetAssignment_1_2_0 = (Assignment)cAlternatives_1_2.eContents().get(0);
		private final RuleCall cTargetExpressionParserRuleCall_1_2_0_0 = (RuleCall)cTargetAssignment_1_2_0.eContents().get(0);
		private final Group cGroup_1_2_1 = (Group)cAlternatives_1_2.eContents().get(1);
		private final Group cGroup_1_2_1_0 = (Group)cGroup_1_2_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_2_1_0_0 = (Keyword)cGroup_1_2_1_0.eContents().get(0);
		private final Assignment cTargetAssignment_1_2_1_0_1 = (Assignment)cGroup_1_2_1_0.eContents().get(1);
		private final RuleCall cTargetExpressionParserRuleCall_1_2_1_0_1_0 = (RuleCall)cTargetAssignment_1_2_1_0_1.eContents().get(0);
		private final Keyword cCommaKeyword_1_2_1_0_2 = (Keyword)cGroup_1_2_1_0.eContents().get(2);
		private final Assignment cTypeAssignment_1_2_1_0_3 = (Assignment)cGroup_1_2_1_0.eContents().get(3);
		private final RuleCall cTypeTypeReferenceParserRuleCall_1_2_1_0_3_0 = (RuleCall)cTypeAssignment_1_2_1_0_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_2_1_0_4 = (Keyword)cGroup_1_2_1_0.eContents().get(4);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cUntypedExpressionAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Keyword cUntypedKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cTargetAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cTargetExpressionParserRuleCall_2_2_0 = (RuleCall)cTargetAssignment_2_2.eContents().get(0);
		
		/// **********************
		// * EXPRESSIONS - OPERATORS
		// * / Expression:
		//	ShortIfExpression | {CastExpression} "cast" (target=Expression | => ("(" target=Expression "," type=TypeReference
		//	")")) | {UntypedExpression} "untyped" target=Expression;
		public ParserRule getRule() { return rule; }

		//ShortIfExpression | {CastExpression} "cast" (target=Expression | => ("(" target=Expression "," type=TypeReference ")"))
		//| {UntypedExpression} "untyped" target=Expression
		public Alternatives getAlternatives() { return cAlternatives; }

		//ShortIfExpression
		public RuleCall getShortIfExpressionParserRuleCall_0() { return cShortIfExpressionParserRuleCall_0; }

		//{CastExpression} "cast" (target=Expression | => ("(" target=Expression "," type=TypeReference ")"))
		public Group getGroup_1() { return cGroup_1; }

		//{CastExpression}
		public Action getCastExpressionAction_1_0() { return cCastExpressionAction_1_0; }

		//"cast"
		public Keyword getCastKeyword_1_1() { return cCastKeyword_1_1; }

		//target=Expression | => ("(" target=Expression "," type=TypeReference ")")
		public Alternatives getAlternatives_1_2() { return cAlternatives_1_2; }

		//target=Expression
		public Assignment getTargetAssignment_1_2_0() { return cTargetAssignment_1_2_0; }

		//Expression
		public RuleCall getTargetExpressionParserRuleCall_1_2_0_0() { return cTargetExpressionParserRuleCall_1_2_0_0; }

		//=> ("(" target=Expression "," type=TypeReference ")")
		public Group getGroup_1_2_1() { return cGroup_1_2_1; }

		//"(" target=Expression "," type=TypeReference ")"
		public Group getGroup_1_2_1_0() { return cGroup_1_2_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_2_1_0_0() { return cLeftParenthesisKeyword_1_2_1_0_0; }

		//target=Expression
		public Assignment getTargetAssignment_1_2_1_0_1() { return cTargetAssignment_1_2_1_0_1; }

		//Expression
		public RuleCall getTargetExpressionParserRuleCall_1_2_1_0_1_0() { return cTargetExpressionParserRuleCall_1_2_1_0_1_0; }

		//","
		public Keyword getCommaKeyword_1_2_1_0_2() { return cCommaKeyword_1_2_1_0_2; }

		//type=TypeReference
		public Assignment getTypeAssignment_1_2_1_0_3() { return cTypeAssignment_1_2_1_0_3; }

		//TypeReference
		public RuleCall getTypeTypeReferenceParserRuleCall_1_2_1_0_3_0() { return cTypeTypeReferenceParserRuleCall_1_2_1_0_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_2_1_0_4() { return cRightParenthesisKeyword_1_2_1_0_4; }

		//{UntypedExpression} "untyped" target=Expression
		public Group getGroup_2() { return cGroup_2; }

		//{UntypedExpression}
		public Action getUntypedExpressionAction_2_0() { return cUntypedExpressionAction_2_0; }

		//"untyped"
		public Keyword getUntypedKeyword_2_1() { return cUntypedKeyword_2_1; }

		//target=Expression
		public Assignment getTargetAssignment_2_2() { return cTargetAssignment_2_2; }

		//Expression
		public RuleCall getTargetExpressionParserRuleCall_2_2_0() { return cTargetExpressionParserRuleCall_2_2_0; }
	}

	public class ShortIfExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ShortIfExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAssignmentParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Action cIfExpressionIfAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Keyword cQuestionMarkKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final Assignment cThenAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final RuleCall cThenExpressionParserRuleCall_1_0_2_0 = (RuleCall)cThenAssignment_1_0_2.eContents().get(0);
		private final Keyword cColonKeyword_1_0_3 = (Keyword)cGroup_1_0.eContents().get(3);
		private final Assignment cElseAssignment_1_0_4 = (Assignment)cGroup_1_0.eContents().get(4);
		private final RuleCall cElseExpressionParserRuleCall_1_0_4_0 = (RuleCall)cElseAssignment_1_0_4.eContents().get(0);
		
		//ShortIfExpression returns Expression:
		//	Assignment => ({IfExpression.if=current} "?" then=Expression ":" else=Expression)?;
		public ParserRule getRule() { return rule; }

		//Assignment => ({IfExpression.if=current} "?" then=Expression ":" else=Expression)?
		public Group getGroup() { return cGroup; }

		//Assignment
		public RuleCall getAssignmentParserRuleCall_0() { return cAssignmentParserRuleCall_0; }

		//=> ({IfExpression.if=current} "?" then=Expression ":" else=Expression)?
		public Group getGroup_1() { return cGroup_1; }

		//{IfExpression.if=current} "?" then=Expression ":" else=Expression
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{IfExpression.if=current}
		public Action getIfExpressionIfAction_1_0_0() { return cIfExpressionIfAction_1_0_0; }

		//"?"
		public Keyword getQuestionMarkKeyword_1_0_1() { return cQuestionMarkKeyword_1_0_1; }

		//then=Expression
		public Assignment getThenAssignment_1_0_2() { return cThenAssignment_1_0_2; }

		//Expression
		public RuleCall getThenExpressionParserRuleCall_1_0_2_0() { return cThenExpressionParserRuleCall_1_0_2_0; }

		//":"
		public Keyword getColonKeyword_1_0_3() { return cColonKeyword_1_0_3; }

		//else=Expression
		public Assignment getElseAssignment_1_0_4() { return cElseAssignment_1_0_4; }

		//Expression
		public RuleCall getElseExpressionParserRuleCall_1_0_4_0() { return cElseExpressionParserRuleCall_1_0_4_0; }
	}

	public class AssignmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Assignment");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cAssignmentAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cFeatureAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final CrossReference cFeatureFeatureCrossReference_0_1_0 = (CrossReference)cFeatureAssignment_0_1.eContents().get(0);
		private final RuleCall cFeatureFeatureFeatureIDParserRuleCall_0_1_0_1 = (RuleCall)cFeatureFeatureCrossReference_0_1_0.eContents().get(1);
		private final RuleCall cOpSingleAssignParserRuleCall_0_2 = (RuleCall)cGroup_0.eContents().get(2);
		private final Assignment cValueAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cValueAssignmentParserRuleCall_0_3_0 = (RuleCall)cValueAssignment_0_3.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cOrExpressionParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Group cGroup_1_1_0 = (Group)cGroup_1_1.eContents().get(0);
		private final Action cOperationLeftAction_1_1_0_0 = (Action)cGroup_1_1_0.eContents().get(0);
		private final Assignment cFeatureAssignment_1_1_0_1 = (Assignment)cGroup_1_1_0.eContents().get(1);
		private final RuleCall cFeatureOpMultiAssignParserRuleCall_1_1_0_1_0 = (RuleCall)cFeatureAssignment_1_1_0_1.eContents().get(0);
		private final Assignment cRightAssignment_1_1_0_2 = (Assignment)cGroup_1_1_0.eContents().get(2);
		private final RuleCall cRightAssignmentParserRuleCall_1_1_0_2_0 = (RuleCall)cRightAssignment_1_1_0_2.eContents().get(0);
		
		//Assignment returns Expression:
		//	{Assignment} feature=[Feature|FeatureID] OpSingleAssign value=Assignment | OrExpression => ({Operation.left=current}
		//	feature=OpMultiAssign right=Assignment)?;
		public ParserRule getRule() { return rule; }

		//{Assignment} feature=[Feature|FeatureID] OpSingleAssign value=Assignment | OrExpression => ({Operation.left=current}
		//feature=OpMultiAssign right=Assignment)?
		public Alternatives getAlternatives() { return cAlternatives; }

		//{Assignment} feature=[Feature|FeatureID] OpSingleAssign value=Assignment
		public Group getGroup_0() { return cGroup_0; }

		//{Assignment}
		public Action getAssignmentAction_0_0() { return cAssignmentAction_0_0; }

		//feature=[Feature|FeatureID]
		public Assignment getFeatureAssignment_0_1() { return cFeatureAssignment_0_1; }

		//[Feature|FeatureID]
		public CrossReference getFeatureFeatureCrossReference_0_1_0() { return cFeatureFeatureCrossReference_0_1_0; }

		//FeatureID
		public RuleCall getFeatureFeatureFeatureIDParserRuleCall_0_1_0_1() { return cFeatureFeatureFeatureIDParserRuleCall_0_1_0_1; }

		//OpSingleAssign
		public RuleCall getOpSingleAssignParserRuleCall_0_2() { return cOpSingleAssignParserRuleCall_0_2; }

		//value=Assignment
		public Assignment getValueAssignment_0_3() { return cValueAssignment_0_3; }

		//Assignment
		public RuleCall getValueAssignmentParserRuleCall_0_3_0() { return cValueAssignmentParserRuleCall_0_3_0; }

		//OrExpression => ({Operation.left=current} feature=OpMultiAssign right=Assignment)?
		public Group getGroup_1() { return cGroup_1; }

		//OrExpression
		public RuleCall getOrExpressionParserRuleCall_1_0() { return cOrExpressionParserRuleCall_1_0; }

		//=> ({Operation.left=current} feature=OpMultiAssign right=Assignment)?
		public Group getGroup_1_1() { return cGroup_1_1; }

		//{Operation.left=current} feature=OpMultiAssign right=Assignment
		public Group getGroup_1_1_0() { return cGroup_1_1_0; }

		//{Operation.left=current}
		public Action getOperationLeftAction_1_1_0_0() { return cOperationLeftAction_1_1_0_0; }

		//feature=OpMultiAssign
		public Assignment getFeatureAssignment_1_1_0_1() { return cFeatureAssignment_1_1_0_1; }

		//OpMultiAssign
		public RuleCall getFeatureOpMultiAssignParserRuleCall_1_1_0_1_0() { return cFeatureOpMultiAssignParserRuleCall_1_1_0_1_0; }

		//right=Assignment
		public Assignment getRightAssignment_1_1_0_2() { return cRightAssignment_1_1_0_2; }

		//Assignment
		public RuleCall getRightAssignmentParserRuleCall_1_1_0_2_0() { return cRightAssignmentParserRuleCall_1_1_0_2_0; }
	}

	public class OpSingleAssignElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OpSingleAssign");
		private final Keyword cEqualsSignKeyword = (Keyword)rule.eContents().get(1);
		
		//OpSingleAssign:
		//	"=";
		public ParserRule getRule() { return rule; }

		//"="
		public Keyword getEqualsSignKeyword() { return cEqualsSignKeyword; }
	}

	public class OpMultiAssignElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OpMultiAssign");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cPlusSignEqualsSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cHyphenMinusEqualsSignKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cAsteriskEqualsSignKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cSolidusEqualsSignKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cPercentSignEqualsSignKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cAmpersandEqualsSignKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cVerticalLineEqualsSignKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cCircumflexAccentEqualsSignKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final Group cGroup_8 = (Group)cAlternatives.eContents().get(8);
		private final Keyword cLessThanSignKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Keyword cLessThanSignKeyword_8_1 = (Keyword)cGroup_8.eContents().get(1);
		private final Keyword cEqualsSignKeyword_8_2 = (Keyword)cGroup_8.eContents().get(2);
		private final Group cGroup_9 = (Group)cAlternatives.eContents().get(9);
		private final Keyword cGreaterThanSignKeyword_9_0 = (Keyword)cGroup_9.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_9_1 = (Keyword)cGroup_9.eContents().get(1);
		private final Keyword cGreaterThanSignKeyword_9_2 = (Keyword)cGroup_9.eContents().get(2);
		private final Keyword cEqualsSignKeyword_9_3 = (Keyword)cGroup_9.eContents().get(3);
		
		//OpMultiAssign hidden():
		//	"+=" | "-=" | "*=" | "/=" | "%=" | "&=" | "|=" | "^=" | "<" "<" "=" | ">" ">" ">"? "=";
		public ParserRule getRule() { return rule; }

		//"+=" | "-=" | "*=" | "/=" | "%=" | "&=" | "|=" | "^=" | "<" "<" "=" | ">" ">" ">"? "="
		public Alternatives getAlternatives() { return cAlternatives; }

		//"+="
		public Keyword getPlusSignEqualsSignKeyword_0() { return cPlusSignEqualsSignKeyword_0; }

		//"-="
		public Keyword getHyphenMinusEqualsSignKeyword_1() { return cHyphenMinusEqualsSignKeyword_1; }

		//"*="
		public Keyword getAsteriskEqualsSignKeyword_2() { return cAsteriskEqualsSignKeyword_2; }

		//"/="
		public Keyword getSolidusEqualsSignKeyword_3() { return cSolidusEqualsSignKeyword_3; }

		//"%="
		public Keyword getPercentSignEqualsSignKeyword_4() { return cPercentSignEqualsSignKeyword_4; }

		//"&="
		public Keyword getAmpersandEqualsSignKeyword_5() { return cAmpersandEqualsSignKeyword_5; }

		//"|="
		public Keyword getVerticalLineEqualsSignKeyword_6() { return cVerticalLineEqualsSignKeyword_6; }

		//"^="
		public Keyword getCircumflexAccentEqualsSignKeyword_7() { return cCircumflexAccentEqualsSignKeyword_7; }

		//"<" "<" "="
		public Group getGroup_8() { return cGroup_8; }

		//"<"
		public Keyword getLessThanSignKeyword_8_0() { return cLessThanSignKeyword_8_0; }

		//"<"
		public Keyword getLessThanSignKeyword_8_1() { return cLessThanSignKeyword_8_1; }

		//"="
		public Keyword getEqualsSignKeyword_8_2() { return cEqualsSignKeyword_8_2; }

		//">" ">" ">"? "="
		public Group getGroup_9() { return cGroup_9; }

		//">"
		public Keyword getGreaterThanSignKeyword_9_0() { return cGreaterThanSignKeyword_9_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_9_1() { return cGreaterThanSignKeyword_9_1; }

		//">"?
		public Keyword getGreaterThanSignKeyword_9_2() { return cGreaterThanSignKeyword_9_2; }

		//"="
		public Keyword getEqualsSignKeyword_9_3() { return cEqualsSignKeyword_9_3; }
	}

	public class OrExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OrExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAndExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cOperationLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Assignment cFeatureAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final RuleCall cFeatureOpOrParserRuleCall_1_0_0_1_0 = (RuleCall)cFeatureAssignment_1_0_0_1.eContents().get(0);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightAndExpressionParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//OrExpression returns Expression:
		//	AndExpression (=> ({Operation.left=current} feature=OpOr) right=AndExpression)*;
		public ParserRule getRule() { return rule; }

		//AndExpression (=> ({Operation.left=current} feature=OpOr) right=AndExpression)*
		public Group getGroup() { return cGroup; }

		//AndExpression
		public RuleCall getAndExpressionParserRuleCall_0() { return cAndExpressionParserRuleCall_0; }

		//(=> ({Operation.left=current} feature=OpOr) right=AndExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//=> ({Operation.left=current} feature=OpOr)
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{Operation.left=current} feature=OpOr
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{Operation.left=current}
		public Action getOperationLeftAction_1_0_0_0() { return cOperationLeftAction_1_0_0_0; }

		//feature=OpOr
		public Assignment getFeatureAssignment_1_0_0_1() { return cFeatureAssignment_1_0_0_1; }

		//OpOr
		public RuleCall getFeatureOpOrParserRuleCall_1_0_0_1_0() { return cFeatureOpOrParserRuleCall_1_0_0_1_0; }

		//right=AndExpression
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//AndExpression
		public RuleCall getRightAndExpressionParserRuleCall_1_1_0() { return cRightAndExpressionParserRuleCall_1_1_0; }
	}

	public class OpOrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OpOr");
		private final Keyword cVerticalLineVerticalLineKeyword = (Keyword)rule.eContents().get(1);
		
		//OpOr:
		//	"||";
		public ParserRule getRule() { return rule; }

		//"||"
		public Keyword getVerticalLineVerticalLineKeyword() { return cVerticalLineVerticalLineKeyword; }
	}

	public class AndExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AndExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cOtherOperatorExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cOperationLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Assignment cFeatureAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final RuleCall cFeatureOpAndParserRuleCall_1_0_0_1_0 = (RuleCall)cFeatureAssignment_1_0_0_1.eContents().get(0);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightOtherOperatorExpressionParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//AndExpression returns Expression:
		//	OtherOperatorExpression (=> ({Operation.left=current} feature=OpAnd) right=OtherOperatorExpression)*;
		public ParserRule getRule() { return rule; }

		//OtherOperatorExpression (=> ({Operation.left=current} feature=OpAnd) right=OtherOperatorExpression)*
		public Group getGroup() { return cGroup; }

		//OtherOperatorExpression
		public RuleCall getOtherOperatorExpressionParserRuleCall_0() { return cOtherOperatorExpressionParserRuleCall_0; }

		//(=> ({Operation.left=current} feature=OpAnd) right=OtherOperatorExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//=> ({Operation.left=current} feature=OpAnd)
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{Operation.left=current} feature=OpAnd
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{Operation.left=current}
		public Action getOperationLeftAction_1_0_0_0() { return cOperationLeftAction_1_0_0_0; }

		//feature=OpAnd
		public Assignment getFeatureAssignment_1_0_0_1() { return cFeatureAssignment_1_0_0_1; }

		//OpAnd
		public RuleCall getFeatureOpAndParserRuleCall_1_0_0_1_0() { return cFeatureOpAndParserRuleCall_1_0_0_1_0; }

		//right=OtherOperatorExpression
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//OtherOperatorExpression
		public RuleCall getRightOtherOperatorExpressionParserRuleCall_1_1_0() { return cRightOtherOperatorExpressionParserRuleCall_1_1_0; }
	}

	public class OpAndElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OpAnd");
		private final Keyword cAmpersandAmpersandKeyword = (Keyword)rule.eContents().get(1);
		
		//OpAnd:
		//	"&&";
		public ParserRule getRule() { return rule; }

		//"&&"
		public Keyword getAmpersandAmpersandKeyword() { return cAmpersandAmpersandKeyword; }
	}

	public class OtherOperatorExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OtherOperatorExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cCompareExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cOperationLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Assignment cFeatureAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final RuleCall cFeatureOpOtherParserRuleCall_1_0_0_1_0 = (RuleCall)cFeatureAssignment_1_0_0_1.eContents().get(0);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightCompareExpressionParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//OtherOperatorExpression returns Expression:
		//	CompareExpression (=> ({Operation.left=current} feature=OpOther) right=CompareExpression)*;
		public ParserRule getRule() { return rule; }

		//CompareExpression (=> ({Operation.left=current} feature=OpOther) right=CompareExpression)*
		public Group getGroup() { return cGroup; }

		//CompareExpression
		public RuleCall getCompareExpressionParserRuleCall_0() { return cCompareExpressionParserRuleCall_0; }

		//(=> ({Operation.left=current} feature=OpOther) right=CompareExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//=> ({Operation.left=current} feature=OpOther)
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{Operation.left=current} feature=OpOther
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{Operation.left=current}
		public Action getOperationLeftAction_1_0_0_0() { return cOperationLeftAction_1_0_0_0; }

		//feature=OpOther
		public Assignment getFeatureAssignment_1_0_0_1() { return cFeatureAssignment_1_0_0_1; }

		//OpOther
		public RuleCall getFeatureOpOtherParserRuleCall_1_0_0_1_0() { return cFeatureOpOtherParserRuleCall_1_0_0_1_0; }

		//right=CompareExpression
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//CompareExpression
		public RuleCall getRightCompareExpressionParserRuleCall_1_1_0() { return cRightCompareExpressionParserRuleCall_1_1_0; }
	}

	public class OpOtherElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OpOther");
		private final Keyword cFullStopFullStopFullStopKeyword = (Keyword)rule.eContents().get(1);
		
		//OpOther:
		//	"...";
		public ParserRule getRule() { return rule; }

		//"..."
		public Keyword getFullStopFullStopFullStopKeyword() { return cFullStopFullStopFullStopKeyword; }
	}

	public class CompareExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CompareExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cBitwiseExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Action cOperationLeftAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Assignment cFeatureAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cFeatureOpCompareParserRuleCall_1_0_1_0 = (RuleCall)cFeatureAssignment_1_0_1.eContents().get(0);
		private final Assignment cRightAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final RuleCall cRightBitwiseExpressionParserRuleCall_1_0_2_0 = (RuleCall)cRightAssignment_1_0_2.eContents().get(0);
		
		//CompareExpression returns Expression:
		//	BitwiseExpression => ({Operation.left=current} feature=OpCompare right=BitwiseExpression)*;
		public ParserRule getRule() { return rule; }

		//BitwiseExpression => ({Operation.left=current} feature=OpCompare right=BitwiseExpression)*
		public Group getGroup() { return cGroup; }

		//BitwiseExpression
		public RuleCall getBitwiseExpressionParserRuleCall_0() { return cBitwiseExpressionParserRuleCall_0; }

		//=> ({Operation.left=current} feature=OpCompare right=BitwiseExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//{Operation.left=current} feature=OpCompare right=BitwiseExpression
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{Operation.left=current}
		public Action getOperationLeftAction_1_0_0() { return cOperationLeftAction_1_0_0; }

		//feature=OpCompare
		public Assignment getFeatureAssignment_1_0_1() { return cFeatureAssignment_1_0_1; }

		//OpCompare
		public RuleCall getFeatureOpCompareParserRuleCall_1_0_1_0() { return cFeatureOpCompareParserRuleCall_1_0_1_0; }

		//right=BitwiseExpression
		public Assignment getRightAssignment_1_0_2() { return cRightAssignment_1_0_2; }

		//BitwiseExpression
		public RuleCall getRightBitwiseExpressionParserRuleCall_1_0_2_0() { return cRightBitwiseExpressionParserRuleCall_1_0_2_0; }
	}

	public class OpCompareElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OpCompare");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cEqualsSignEqualsSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cExclamationMarkEqualsSignKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cGreaterThanSignKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Keyword cLessThanSignKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Keyword cEqualsSignKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		
		//OpCompare hidden():
		//	"==" | "!=" | ">" "="? | "<" "="?;
		public ParserRule getRule() { return rule; }

		//"==" | "!=" | ">" "="? | "<" "="?
		public Alternatives getAlternatives() { return cAlternatives; }

		//"=="
		public Keyword getEqualsSignEqualsSignKeyword_0() { return cEqualsSignEqualsSignKeyword_0; }

		//"!="
		public Keyword getExclamationMarkEqualsSignKeyword_1() { return cExclamationMarkEqualsSignKeyword_1; }

		//">" "="?
		public Group getGroup_2() { return cGroup_2; }

		//">"
		public Keyword getGreaterThanSignKeyword_2_0() { return cGreaterThanSignKeyword_2_0; }

		//"="?
		public Keyword getEqualsSignKeyword_2_1() { return cEqualsSignKeyword_2_1; }

		//"<" "="?
		public Group getGroup_3() { return cGroup_3; }

		//"<"
		public Keyword getLessThanSignKeyword_3_0() { return cLessThanSignKeyword_3_0; }

		//"="?
		public Keyword getEqualsSignKeyword_3_1() { return cEqualsSignKeyword_3_1; }
	}

	public class BitwiseExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BitwiseExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cBitshiftExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cOperationLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Assignment cFeatureAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final RuleCall cFeatureOpBitwiseParserRuleCall_1_0_0_1_0 = (RuleCall)cFeatureAssignment_1_0_0_1.eContents().get(0);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightBitshiftExpressionParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//BitwiseExpression returns Expression:
		//	BitshiftExpression (=> ({Operation.left=current} feature=OpBitwise) right=BitshiftExpression)*;
		public ParserRule getRule() { return rule; }

		//BitshiftExpression (=> ({Operation.left=current} feature=OpBitwise) right=BitshiftExpression)*
		public Group getGroup() { return cGroup; }

		//BitshiftExpression
		public RuleCall getBitshiftExpressionParserRuleCall_0() { return cBitshiftExpressionParserRuleCall_0; }

		//(=> ({Operation.left=current} feature=OpBitwise) right=BitshiftExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//=> ({Operation.left=current} feature=OpBitwise)
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{Operation.left=current} feature=OpBitwise
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{Operation.left=current}
		public Action getOperationLeftAction_1_0_0_0() { return cOperationLeftAction_1_0_0_0; }

		//feature=OpBitwise
		public Assignment getFeatureAssignment_1_0_0_1() { return cFeatureAssignment_1_0_0_1; }

		//OpBitwise
		public RuleCall getFeatureOpBitwiseParserRuleCall_1_0_0_1_0() { return cFeatureOpBitwiseParserRuleCall_1_0_0_1_0; }

		//right=BitshiftExpression
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//BitshiftExpression
		public RuleCall getRightBitshiftExpressionParserRuleCall_1_1_0() { return cRightBitshiftExpressionParserRuleCall_1_1_0; }
	}

	public class OpBitwiseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OpBitwise");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cVerticalLineKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cAmpersandKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cCircumflexAccentKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		//OpBitwise:
		//	"|" | "&" | "^";
		public ParserRule getRule() { return rule; }

		//"|" | "&" | "^"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"|"
		public Keyword getVerticalLineKeyword_0() { return cVerticalLineKeyword_0; }

		//"&"
		public Keyword getAmpersandKeyword_1() { return cAmpersandKeyword_1; }

		//"^"
		public Keyword getCircumflexAccentKeyword_2() { return cCircumflexAccentKeyword_2; }
	}

	public class BitshiftExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BitshiftExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAddExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Action cOperationLeftAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Assignment cFeatureAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cFeatureOpBitshiftParserRuleCall_1_0_1_0 = (RuleCall)cFeatureAssignment_1_0_1.eContents().get(0);
		private final Assignment cRightAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final RuleCall cRightAddExpressionParserRuleCall_1_0_2_0 = (RuleCall)cRightAssignment_1_0_2.eContents().get(0);
		
		//BitshiftExpression returns Expression:
		//	AddExpression => ({Operation.left=current} feature=OpBitshift right=AddExpression)*;
		public ParserRule getRule() { return rule; }

		//AddExpression => ({Operation.left=current} feature=OpBitshift right=AddExpression)*
		public Group getGroup() { return cGroup; }

		//AddExpression
		public RuleCall getAddExpressionParserRuleCall_0() { return cAddExpressionParserRuleCall_0; }

		//=> ({Operation.left=current} feature=OpBitshift right=AddExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//{Operation.left=current} feature=OpBitshift right=AddExpression
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{Operation.left=current}
		public Action getOperationLeftAction_1_0_0() { return cOperationLeftAction_1_0_0; }

		//feature=OpBitshift
		public Assignment getFeatureAssignment_1_0_1() { return cFeatureAssignment_1_0_1; }

		//OpBitshift
		public RuleCall getFeatureOpBitshiftParserRuleCall_1_0_1_0() { return cFeatureOpBitshiftParserRuleCall_1_0_1_0; }

		//right=AddExpression
		public Assignment getRightAssignment_1_0_2() { return cRightAssignment_1_0_2; }

		//AddExpression
		public RuleCall getRightAddExpressionParserRuleCall_1_0_2_0() { return cRightAddExpressionParserRuleCall_1_0_2_0; }
	}

	public class OpBitshiftElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OpBitshift");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLessThanSignKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Keyword cLessThanSignKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cGreaterThanSignKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Keyword cGreaterThanSignKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//OpBitshift hidden():
		//	"<" "<" | ">" ">" ">"?;
		public ParserRule getRule() { return rule; }

		//"<" "<" | ">" ">" ">"?
		public Alternatives getAlternatives() { return cAlternatives; }

		//"<" "<"
		public Group getGroup_0() { return cGroup_0; }

		//"<"
		public Keyword getLessThanSignKeyword_0_0() { return cLessThanSignKeyword_0_0; }

		//"<"
		public Keyword getLessThanSignKeyword_0_1() { return cLessThanSignKeyword_0_1; }

		//">" ">" ">"?
		public Group getGroup_1() { return cGroup_1; }

		//">"
		public Keyword getGreaterThanSignKeyword_1_0() { return cGreaterThanSignKeyword_1_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_1_1() { return cGreaterThanSignKeyword_1_1; }

		//">"?
		public Keyword getGreaterThanSignKeyword_1_2() { return cGreaterThanSignKeyword_1_2; }
	}

	public class AddExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AddExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cSubtractExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cOperationLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Assignment cFeatureAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final RuleCall cFeatureOpAddParserRuleCall_1_0_0_1_0 = (RuleCall)cFeatureAssignment_1_0_0_1.eContents().get(0);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightSubtractExpressionParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//AddExpression returns Expression:
		//	SubtractExpression (=> ({Operation.left=current} feature=OpAdd) right=SubtractExpression)*;
		public ParserRule getRule() { return rule; }

		//SubtractExpression (=> ({Operation.left=current} feature=OpAdd) right=SubtractExpression)*
		public Group getGroup() { return cGroup; }

		//SubtractExpression
		public RuleCall getSubtractExpressionParserRuleCall_0() { return cSubtractExpressionParserRuleCall_0; }

		//(=> ({Operation.left=current} feature=OpAdd) right=SubtractExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//=> ({Operation.left=current} feature=OpAdd)
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{Operation.left=current} feature=OpAdd
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{Operation.left=current}
		public Action getOperationLeftAction_1_0_0_0() { return cOperationLeftAction_1_0_0_0; }

		//feature=OpAdd
		public Assignment getFeatureAssignment_1_0_0_1() { return cFeatureAssignment_1_0_0_1; }

		//OpAdd
		public RuleCall getFeatureOpAddParserRuleCall_1_0_0_1_0() { return cFeatureOpAddParserRuleCall_1_0_0_1_0; }

		//right=SubtractExpression
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//SubtractExpression
		public RuleCall getRightSubtractExpressionParserRuleCall_1_1_0() { return cRightSubtractExpressionParserRuleCall_1_1_0; }
	}

	public class OpAddElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OpAdd");
		private final Keyword cPlusSignKeyword = (Keyword)rule.eContents().get(1);
		
		//OpAdd:
		//	"+";
		public ParserRule getRule() { return rule; }

		//"+"
		public Keyword getPlusSignKeyword() { return cPlusSignKeyword; }
	}

	public class SubtractExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SubtractExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMultiplyExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cOperationLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Assignment cFeatureAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final RuleCall cFeatureOpSubtractParserRuleCall_1_0_0_1_0 = (RuleCall)cFeatureAssignment_1_0_0_1.eContents().get(0);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightMultiplyExpressionParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//SubtractExpression returns Expression:
		//	MultiplyExpression (=> ({Operation.left=current} feature=OpSubtract) right=MultiplyExpression)*;
		public ParserRule getRule() { return rule; }

		//MultiplyExpression (=> ({Operation.left=current} feature=OpSubtract) right=MultiplyExpression)*
		public Group getGroup() { return cGroup; }

		//MultiplyExpression
		public RuleCall getMultiplyExpressionParserRuleCall_0() { return cMultiplyExpressionParserRuleCall_0; }

		//(=> ({Operation.left=current} feature=OpSubtract) right=MultiplyExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//=> ({Operation.left=current} feature=OpSubtract)
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{Operation.left=current} feature=OpSubtract
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{Operation.left=current}
		public Action getOperationLeftAction_1_0_0_0() { return cOperationLeftAction_1_0_0_0; }

		//feature=OpSubtract
		public Assignment getFeatureAssignment_1_0_0_1() { return cFeatureAssignment_1_0_0_1; }

		//OpSubtract
		public RuleCall getFeatureOpSubtractParserRuleCall_1_0_0_1_0() { return cFeatureOpSubtractParserRuleCall_1_0_0_1_0; }

		//right=MultiplyExpression
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//MultiplyExpression
		public RuleCall getRightMultiplyExpressionParserRuleCall_1_1_0() { return cRightMultiplyExpressionParserRuleCall_1_1_0; }
	}

	public class OpSubtractElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OpSubtract");
		private final Keyword cHyphenMinusKeyword = (Keyword)rule.eContents().get(1);
		
		//OpSubtract:
		//	"-";
		public ParserRule getRule() { return rule; }

		//"-"
		public Keyword getHyphenMinusKeyword() { return cHyphenMinusKeyword; }
	}

	public class MultiplyExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MultiplyExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cDivideExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cOperationLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Assignment cFeatureAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final RuleCall cFeatureOpMultiplyParserRuleCall_1_0_0_1_0 = (RuleCall)cFeatureAssignment_1_0_0_1.eContents().get(0);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightDivideExpressionParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//MultiplyExpression returns Expression:
		//	DivideExpression (=> ({Operation.left=current} feature=OpMultiply) right=DivideExpression)*;
		public ParserRule getRule() { return rule; }

		//DivideExpression (=> ({Operation.left=current} feature=OpMultiply) right=DivideExpression)*
		public Group getGroup() { return cGroup; }

		//DivideExpression
		public RuleCall getDivideExpressionParserRuleCall_0() { return cDivideExpressionParserRuleCall_0; }

		//(=> ({Operation.left=current} feature=OpMultiply) right=DivideExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//=> ({Operation.left=current} feature=OpMultiply)
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{Operation.left=current} feature=OpMultiply
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{Operation.left=current}
		public Action getOperationLeftAction_1_0_0_0() { return cOperationLeftAction_1_0_0_0; }

		//feature=OpMultiply
		public Assignment getFeatureAssignment_1_0_0_1() { return cFeatureAssignment_1_0_0_1; }

		//OpMultiply
		public RuleCall getFeatureOpMultiplyParserRuleCall_1_0_0_1_0() { return cFeatureOpMultiplyParserRuleCall_1_0_0_1_0; }

		//right=DivideExpression
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//DivideExpression
		public RuleCall getRightDivideExpressionParserRuleCall_1_1_0() { return cRightDivideExpressionParserRuleCall_1_1_0; }
	}

	public class OpMultiplyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OpMultiply");
		private final Keyword cAsteriskKeyword = (Keyword)rule.eContents().get(1);
		
		//OpMultiply:
		//	"*";
		public ParserRule getRule() { return rule; }

		//"*"
		public Keyword getAsteriskKeyword() { return cAsteriskKeyword; }
	}

	public class DivideExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DivideExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cModuloExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cOperationLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Assignment cFeatureAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final RuleCall cFeatureOpDivideParserRuleCall_1_0_0_1_0 = (RuleCall)cFeatureAssignment_1_0_0_1.eContents().get(0);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightModuloExpressionParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//DivideExpression returns Expression:
		//	ModuloExpression (=> ({Operation.left=current} feature=OpDivide) right=ModuloExpression)*;
		public ParserRule getRule() { return rule; }

		//ModuloExpression (=> ({Operation.left=current} feature=OpDivide) right=ModuloExpression)*
		public Group getGroup() { return cGroup; }

		//ModuloExpression
		public RuleCall getModuloExpressionParserRuleCall_0() { return cModuloExpressionParserRuleCall_0; }

		//(=> ({Operation.left=current} feature=OpDivide) right=ModuloExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//=> ({Operation.left=current} feature=OpDivide)
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{Operation.left=current} feature=OpDivide
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{Operation.left=current}
		public Action getOperationLeftAction_1_0_0_0() { return cOperationLeftAction_1_0_0_0; }

		//feature=OpDivide
		public Assignment getFeatureAssignment_1_0_0_1() { return cFeatureAssignment_1_0_0_1; }

		//OpDivide
		public RuleCall getFeatureOpDivideParserRuleCall_1_0_0_1_0() { return cFeatureOpDivideParserRuleCall_1_0_0_1_0; }

		//right=ModuloExpression
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//ModuloExpression
		public RuleCall getRightModuloExpressionParserRuleCall_1_1_0() { return cRightModuloExpressionParserRuleCall_1_1_0; }
	}

	public class OpDivideElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OpDivide");
		private final Keyword cSolidusKeyword = (Keyword)rule.eContents().get(1);
		
		//OpDivide:
		//	"/";
		public ParserRule getRule() { return rule; }

		//"/"
		public Keyword getSolidusKeyword() { return cSolidusKeyword; }
	}

	public class ModuloExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ModuloExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cUnaryOperationParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cOperationLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Assignment cFeatureAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final RuleCall cFeatureOpModuloParserRuleCall_1_0_0_1_0 = (RuleCall)cFeatureAssignment_1_0_0_1.eContents().get(0);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightUnaryOperationParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//ModuloExpression returns Expression:
		//	UnaryOperation (=> ({Operation.left=current} feature=OpModulo) right=UnaryOperation)*;
		public ParserRule getRule() { return rule; }

		//UnaryOperation (=> ({Operation.left=current} feature=OpModulo) right=UnaryOperation)*
		public Group getGroup() { return cGroup; }

		//UnaryOperation
		public RuleCall getUnaryOperationParserRuleCall_0() { return cUnaryOperationParserRuleCall_0; }

		//(=> ({Operation.left=current} feature=OpModulo) right=UnaryOperation)*
		public Group getGroup_1() { return cGroup_1; }

		//=> ({Operation.left=current} feature=OpModulo)
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{Operation.left=current} feature=OpModulo
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{Operation.left=current}
		public Action getOperationLeftAction_1_0_0_0() { return cOperationLeftAction_1_0_0_0; }

		//feature=OpModulo
		public Assignment getFeatureAssignment_1_0_0_1() { return cFeatureAssignment_1_0_0_1; }

		//OpModulo
		public RuleCall getFeatureOpModuloParserRuleCall_1_0_0_1_0() { return cFeatureOpModuloParserRuleCall_1_0_0_1_0; }

		//right=UnaryOperation
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//UnaryOperation
		public RuleCall getRightUnaryOperationParserRuleCall_1_1_0() { return cRightUnaryOperationParserRuleCall_1_1_0; }
	}

	public class OpModuloElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OpModulo");
		private final Keyword cPercentSignKeyword = (Keyword)rule.eContents().get(1);
		
		//OpModulo:
		//	"%";
		public ParserRule getRule() { return rule; }

		//"%"
		public Keyword getPercentSignKeyword() { return cPercentSignKeyword; }
	}

	public class UnaryOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UnaryOperation");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cUnaryOperationAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cFeatureAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cFeatureOpUnaryParserRuleCall_0_1_0 = (RuleCall)cFeatureAssignment_0_1.eContents().get(0);
		private final Assignment cOperandAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cOperandPreIncrementOperationParserRuleCall_0_2_0 = (RuleCall)cOperandAssignment_0_2.eContents().get(0);
		private final RuleCall cPreIncrementOperationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//UnaryOperation returns Expression:
		//	{UnaryOperation} feature=OpUnary operand=PreIncrementOperation | PreIncrementOperation;
		public ParserRule getRule() { return rule; }

		//{UnaryOperation} feature=OpUnary operand=PreIncrementOperation | PreIncrementOperation
		public Alternatives getAlternatives() { return cAlternatives; }

		//{UnaryOperation} feature=OpUnary operand=PreIncrementOperation
		public Group getGroup_0() { return cGroup_0; }

		//{UnaryOperation}
		public Action getUnaryOperationAction_0_0() { return cUnaryOperationAction_0_0; }

		//feature=OpUnary
		public Assignment getFeatureAssignment_0_1() { return cFeatureAssignment_0_1; }

		//OpUnary
		public RuleCall getFeatureOpUnaryParserRuleCall_0_1_0() { return cFeatureOpUnaryParserRuleCall_0_1_0; }

		//operand=PreIncrementOperation
		public Assignment getOperandAssignment_0_2() { return cOperandAssignment_0_2; }

		//PreIncrementOperation
		public RuleCall getOperandPreIncrementOperationParserRuleCall_0_2_0() { return cOperandPreIncrementOperationParserRuleCall_0_2_0; }

		//PreIncrementOperation
		public RuleCall getPreIncrementOperationParserRuleCall_1() { return cPreIncrementOperationParserRuleCall_1; }
	}

	public class OpUnaryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OpUnary");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cExclamationMarkKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cTildeKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		//OpUnary:
		//	"!" | "-" | "~";
		public ParserRule getRule() { return rule; }

		//"!" | "-" | "~"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"!"
		public Keyword getExclamationMarkKeyword_0() { return cExclamationMarkKeyword_0; }

		//"-"
		public Keyword getHyphenMinusKeyword_1() { return cHyphenMinusKeyword_1; }

		//"~"
		public Keyword getTildeKeyword_2() { return cTildeKeyword_2; }
	}

	public class PreIncrementOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PreIncrementOperation");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cGroup_0.eContents().get(0);
		private final Action cPreIncrementOperationAction_0_0_0 = (Action)cGroup_0_0.eContents().get(0);
		private final Assignment cFeatureAssignment_0_0_1 = (Assignment)cGroup_0_0.eContents().get(1);
		private final RuleCall cFeatureOpIncrementParserRuleCall_0_0_1_0 = (RuleCall)cFeatureAssignment_0_0_1.eContents().get(0);
		private final Assignment cOperandAssignment_0_0_2 = (Assignment)cGroup_0_0.eContents().get(2);
		private final RuleCall cOperandPostIncrementOperationParserRuleCall_0_0_2_0 = (RuleCall)cOperandAssignment_0_0_2.eContents().get(0);
		private final RuleCall cPostIncrementOperationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//PreIncrementOperation returns Expression:
		//	=> ({PreIncrementOperation} feature=OpIncrement operand=PostIncrementOperation) | PostIncrementOperation;
		public ParserRule getRule() { return rule; }

		//=> ({PreIncrementOperation} feature=OpIncrement operand=PostIncrementOperation) | PostIncrementOperation
		public Alternatives getAlternatives() { return cAlternatives; }

		//=> ({PreIncrementOperation} feature=OpIncrement operand=PostIncrementOperation)
		public Group getGroup_0() { return cGroup_0; }

		//{PreIncrementOperation} feature=OpIncrement operand=PostIncrementOperation
		public Group getGroup_0_0() { return cGroup_0_0; }

		//{PreIncrementOperation}
		public Action getPreIncrementOperationAction_0_0_0() { return cPreIncrementOperationAction_0_0_0; }

		//feature=OpIncrement
		public Assignment getFeatureAssignment_0_0_1() { return cFeatureAssignment_0_0_1; }

		//OpIncrement
		public RuleCall getFeatureOpIncrementParserRuleCall_0_0_1_0() { return cFeatureOpIncrementParserRuleCall_0_0_1_0; }

		//operand=PostIncrementOperation
		public Assignment getOperandAssignment_0_0_2() { return cOperandAssignment_0_0_2; }

		//PostIncrementOperation
		public RuleCall getOperandPostIncrementOperationParserRuleCall_0_0_2_0() { return cOperandPostIncrementOperationParserRuleCall_0_0_2_0; }

		//PostIncrementOperation
		public RuleCall getPostIncrementOperationParserRuleCall_1() { return cPostIncrementOperationParserRuleCall_1; }
	}

	public class PostIncrementOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PostIncrementOperation");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cGroup_0.eContents().get(0);
		private final Action cPostIncrementOperationAction_0_0_0 = (Action)cGroup_0_0.eContents().get(0);
		private final Assignment cOperandAssignment_0_0_1 = (Assignment)cGroup_0_0.eContents().get(1);
		private final RuleCall cOperandMemberFeatureCallParserRuleCall_0_0_1_0 = (RuleCall)cOperandAssignment_0_0_1.eContents().get(0);
		private final Assignment cFeatureAssignment_0_0_2 = (Assignment)cGroup_0_0.eContents().get(2);
		private final RuleCall cFeatureOpIncrementParserRuleCall_0_0_2_0 = (RuleCall)cFeatureAssignment_0_0_2.eContents().get(0);
		private final RuleCall cMemberFeatureCallParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//PostIncrementOperation returns Expression:
		//	=> ({PostIncrementOperation} operand=MemberFeatureCall feature=OpIncrement) | MemberFeatureCall;
		public ParserRule getRule() { return rule; }

		//=> ({PostIncrementOperation} operand=MemberFeatureCall feature=OpIncrement) | MemberFeatureCall
		public Alternatives getAlternatives() { return cAlternatives; }

		//=> ({PostIncrementOperation} operand=MemberFeatureCall feature=OpIncrement)
		public Group getGroup_0() { return cGroup_0; }

		//{PostIncrementOperation} operand=MemberFeatureCall feature=OpIncrement
		public Group getGroup_0_0() { return cGroup_0_0; }

		//{PostIncrementOperation}
		public Action getPostIncrementOperationAction_0_0_0() { return cPostIncrementOperationAction_0_0_0; }

		//operand=MemberFeatureCall
		public Assignment getOperandAssignment_0_0_1() { return cOperandAssignment_0_0_1; }

		//MemberFeatureCall
		public RuleCall getOperandMemberFeatureCallParserRuleCall_0_0_1_0() { return cOperandMemberFeatureCallParserRuleCall_0_0_1_0; }

		//feature=OpIncrement
		public Assignment getFeatureAssignment_0_0_2() { return cFeatureAssignment_0_0_2; }

		//OpIncrement
		public RuleCall getFeatureOpIncrementParserRuleCall_0_0_2_0() { return cFeatureOpIncrementParserRuleCall_0_0_2_0; }

		//MemberFeatureCall
		public RuleCall getMemberFeatureCallParserRuleCall_1() { return cMemberFeatureCallParserRuleCall_1; }
	}

	public class OpIncrementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OpIncrement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cPlusSignPlusSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cHyphenMinusHyphenMinusKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//OpIncrement:
		//	"++" | "--";
		public ParserRule getRule() { return rule; }

		//"++" | "--"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"++"
		public Keyword getPlusSignPlusSignKeyword_0() { return cPlusSignPlusSignKeyword_0; }

		//"--"
		public Keyword getHyphenMinusHyphenMinusKeyword_1() { return cHyphenMinusHyphenMinusKeyword_1; }
	}

	public class MemberFeatureCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MemberFeatureCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPrimaryExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Group cGroup_1_0_0_0 = (Group)cGroup_1_0_0.eContents().get(0);
		private final Action cAssignmentAssignableAction_1_0_0_0_0 = (Action)cGroup_1_0_0_0.eContents().get(0);
		private final Keyword cFullStopKeyword_1_0_0_0_1 = (Keyword)cGroup_1_0_0_0.eContents().get(1);
		private final Assignment cFeatureAssignment_1_0_0_0_2 = (Assignment)cGroup_1_0_0_0.eContents().get(2);
		private final CrossReference cFeatureFeatureCrossReference_1_0_0_0_2_0 = (CrossReference)cFeatureAssignment_1_0_0_0_2.eContents().get(0);
		private final RuleCall cFeatureFeatureFeatureIDParserRuleCall_1_0_0_0_2_0_1 = (RuleCall)cFeatureFeatureCrossReference_1_0_0_0_2_0.eContents().get(1);
		private final RuleCall cOpSingleAssignParserRuleCall_1_0_0_0_3 = (RuleCall)cGroup_1_0_0_0.eContents().get(3);
		private final Assignment cValueAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cValueAssignmentParserRuleCall_1_0_1_0 = (RuleCall)cValueAssignment_1_0_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Group cGroup_1_1_0 = (Group)cGroup_1_1.eContents().get(0);
		private final Group cGroup_1_1_0_0 = (Group)cGroup_1_1_0.eContents().get(0);
		private final Action cArrayAssignmentAssignameAction_1_1_0_0_0 = (Action)cGroup_1_1_0_0.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1_1_0_0_1 = (Keyword)cGroup_1_1_0_0.eContents().get(1);
		private final Assignment cFeatureAssignment_1_1_0_0_2 = (Assignment)cGroup_1_1_0_0.eContents().get(2);
		private final RuleCall cFeatureExpressionParserRuleCall_1_1_0_0_2_0 = (RuleCall)cFeatureAssignment_1_1_0_0_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_1_0_0_3 = (Keyword)cGroup_1_1_0_0.eContents().get(3);
		private final RuleCall cOpSingleAssignParserRuleCall_1_1_0_0_4 = (RuleCall)cGroup_1_1_0_0.eContents().get(4);
		private final Assignment cValueAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cValueAssignmentParserRuleCall_1_1_1_0 = (RuleCall)cValueAssignment_1_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cAlternatives_1.eContents().get(2);
		private final Group cGroup_1_2_0 = (Group)cGroup_1_2.eContents().get(0);
		private final Group cGroup_1_2_0_0 = (Group)cGroup_1_2_0.eContents().get(0);
		private final Action cMemberFeatureCallTargetAction_1_2_0_0_0 = (Action)cGroup_1_2_0_0.eContents().get(0);
		private final Keyword cFullStopKeyword_1_2_0_0_1 = (Keyword)cGroup_1_2_0_0.eContents().get(1);
		private final Assignment cFeatureAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final CrossReference cFeatureFeatureCrossReference_1_2_1_0 = (CrossReference)cFeatureAssignment_1_2_1.eContents().get(0);
		private final RuleCall cFeatureFeatureFeatureIDParserRuleCall_1_2_1_0_1 = (RuleCall)cFeatureFeatureCrossReference_1_2_1_0.eContents().get(1);
		private final Group cGroup_1_2_2 = (Group)cGroup_1_2.eContents().get(2);
		private final Assignment cExplicitOperationCallAssignment_1_2_2_0 = (Assignment)cGroup_1_2_2.eContents().get(0);
		private final Keyword cExplicitOperationCallLeftParenthesisKeyword_1_2_2_0_0 = (Keyword)cExplicitOperationCallAssignment_1_2_2_0.eContents().get(0);
		private final Group cGroup_1_2_2_1 = (Group)cGroup_1_2_2.eContents().get(1);
		private final Assignment cArgumentsAssignment_1_2_2_1_0 = (Assignment)cGroup_1_2_2_1.eContents().get(0);
		private final RuleCall cArgumentsExpressionParserRuleCall_1_2_2_1_0_0 = (RuleCall)cArgumentsAssignment_1_2_2_1_0.eContents().get(0);
		private final Group cGroup_1_2_2_1_1 = (Group)cGroup_1_2_2_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_2_2_1_1_0 = (Keyword)cGroup_1_2_2_1_1.eContents().get(0);
		private final Assignment cArgumentsAssignment_1_2_2_1_1_1 = (Assignment)cGroup_1_2_2_1_1.eContents().get(1);
		private final RuleCall cArgumentsExpressionParserRuleCall_1_2_2_1_1_1_0 = (RuleCall)cArgumentsAssignment_1_2_2_1_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_2_2_2 = (Keyword)cGroup_1_2_2.eContents().get(2);
		private final Group cGroup_1_3 = (Group)cAlternatives_1.eContents().get(3);
		private final Group cGroup_1_3_0 = (Group)cGroup_1_3.eContents().get(0);
		private final Action cArrayAccessTargetAction_1_3_0_0 = (Action)cGroup_1_3_0.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1_3_1 = (Keyword)cGroup_1_3.eContents().get(1);
		private final Assignment cFeatureAssignment_1_3_2 = (Assignment)cGroup_1_3.eContents().get(2);
		private final RuleCall cFeatureExpressionParserRuleCall_1_3_2_0 = (RuleCall)cFeatureAssignment_1_3_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_3_3 = (Keyword)cGroup_1_3.eContents().get(3);
		private final Group cGroup_1_3_4 = (Group)cGroup_1_3.eContents().get(4);
		private final Assignment cExplicitOperationCallAssignment_1_3_4_0 = (Assignment)cGroup_1_3_4.eContents().get(0);
		private final Keyword cExplicitOperationCallLeftParenthesisKeyword_1_3_4_0_0 = (Keyword)cExplicitOperationCallAssignment_1_3_4_0.eContents().get(0);
		private final Group cGroup_1_3_4_1 = (Group)cGroup_1_3_4.eContents().get(1);
		private final Assignment cArgumentsAssignment_1_3_4_1_0 = (Assignment)cGroup_1_3_4_1.eContents().get(0);
		private final RuleCall cArgumentsExpressionParserRuleCall_1_3_4_1_0_0 = (RuleCall)cArgumentsAssignment_1_3_4_1_0.eContents().get(0);
		private final Group cGroup_1_3_4_1_1 = (Group)cGroup_1_3_4_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_3_4_1_1_0 = (Keyword)cGroup_1_3_4_1_1.eContents().get(0);
		private final Assignment cArgumentsAssignment_1_3_4_1_1_1 = (Assignment)cGroup_1_3_4_1_1.eContents().get(1);
		private final RuleCall cArgumentsExpressionParserRuleCall_1_3_4_1_1_1_0 = (RuleCall)cArgumentsAssignment_1_3_4_1_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_3_4_2 = (Keyword)cGroup_1_3_4.eContents().get(2);
		
		/// **********************
		// * EXPRESSIONS - OTHER
		// * / MemberFeatureCall returns Expression:
		//	PrimaryExpression (=> ({Assignment.assignable=current} "." feature=[Feature|FeatureID] OpSingleAssign)
		//	value=Assignment | => ({ArrayAssignment.assigname=current} "[" feature=Expression "]" OpSingleAssign) value=Assignment
		//	| => ({MemberFeatureCall.target=current} ".") feature=[Feature|FeatureID] (=> explicitOperationCall?="("
		//	(arguments+=Expression ("," arguments+=Expression)*)? ")")? | => ({ArrayAccess.target=current}) "[" feature=Expression
		//	"]" (=> explicitOperationCall?="(" (arguments+=Expression ("," arguments+=Expression)*)? ")")?)*;
		public ParserRule getRule() { return rule; }

		//PrimaryExpression (=> ({Assignment.assignable=current} "." feature=[Feature|FeatureID] OpSingleAssign) value=Assignment
		//| => ({ArrayAssignment.assigname=current} "[" feature=Expression "]" OpSingleAssign) value=Assignment | =>
		//({MemberFeatureCall.target=current} ".") feature=[Feature|FeatureID] (=> explicitOperationCall?="("
		//(arguments+=Expression ("," arguments+=Expression)*)? ")")? | => ({ArrayAccess.target=current}) "[" feature=Expression
		//"]" (=> explicitOperationCall?="(" (arguments+=Expression ("," arguments+=Expression)*)? ")")?)*
		public Group getGroup() { return cGroup; }

		//PrimaryExpression
		public RuleCall getPrimaryExpressionParserRuleCall_0() { return cPrimaryExpressionParserRuleCall_0; }

		//(=> ({Assignment.assignable=current} "." feature=[Feature|FeatureID] OpSingleAssign) value=Assignment | =>
		//({ArrayAssignment.assigname=current} "[" feature=Expression "]" OpSingleAssign) value=Assignment | =>
		//({MemberFeatureCall.target=current} ".") feature=[Feature|FeatureID] (=> explicitOperationCall?="("
		//(arguments+=Expression ("," arguments+=Expression)*)? ")")? | => ({ArrayAccess.target=current}) "[" feature=Expression
		//"]" (=> explicitOperationCall?="(" (arguments+=Expression ("," arguments+=Expression)*)? ")")?)*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//=> ({Assignment.assignable=current} "." feature=[Feature|FeatureID] OpSingleAssign) value=Assignment
		public Group getGroup_1_0() { return cGroup_1_0; }

		//=> ({Assignment.assignable=current} "." feature=[Feature|FeatureID] OpSingleAssign)
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{Assignment.assignable=current} "." feature=[Feature|FeatureID] OpSingleAssign
		public Group getGroup_1_0_0_0() { return cGroup_1_0_0_0; }

		//{Assignment.assignable=current}
		public Action getAssignmentAssignableAction_1_0_0_0_0() { return cAssignmentAssignableAction_1_0_0_0_0; }

		//"."
		public Keyword getFullStopKeyword_1_0_0_0_1() { return cFullStopKeyword_1_0_0_0_1; }

		//feature=[Feature|FeatureID]
		public Assignment getFeatureAssignment_1_0_0_0_2() { return cFeatureAssignment_1_0_0_0_2; }

		//[Feature|FeatureID]
		public CrossReference getFeatureFeatureCrossReference_1_0_0_0_2_0() { return cFeatureFeatureCrossReference_1_0_0_0_2_0; }

		//FeatureID
		public RuleCall getFeatureFeatureFeatureIDParserRuleCall_1_0_0_0_2_0_1() { return cFeatureFeatureFeatureIDParserRuleCall_1_0_0_0_2_0_1; }

		//OpSingleAssign
		public RuleCall getOpSingleAssignParserRuleCall_1_0_0_0_3() { return cOpSingleAssignParserRuleCall_1_0_0_0_3; }

		//value=Assignment
		public Assignment getValueAssignment_1_0_1() { return cValueAssignment_1_0_1; }

		//Assignment
		public RuleCall getValueAssignmentParserRuleCall_1_0_1_0() { return cValueAssignmentParserRuleCall_1_0_1_0; }

		//=> ({ArrayAssignment.assigname=current} "[" feature=Expression "]" OpSingleAssign) value=Assignment
		public Group getGroup_1_1() { return cGroup_1_1; }

		//=> ({ArrayAssignment.assigname=current} "[" feature=Expression "]" OpSingleAssign)
		public Group getGroup_1_1_0() { return cGroup_1_1_0; }

		//{ArrayAssignment.assigname=current} "[" feature=Expression "]" OpSingleAssign
		public Group getGroup_1_1_0_0() { return cGroup_1_1_0_0; }

		//{ArrayAssignment.assigname=current}
		public Action getArrayAssignmentAssignameAction_1_1_0_0_0() { return cArrayAssignmentAssignameAction_1_1_0_0_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1_1_0_0_1() { return cLeftSquareBracketKeyword_1_1_0_0_1; }

		//feature=Expression
		public Assignment getFeatureAssignment_1_1_0_0_2() { return cFeatureAssignment_1_1_0_0_2; }

		//Expression
		public RuleCall getFeatureExpressionParserRuleCall_1_1_0_0_2_0() { return cFeatureExpressionParserRuleCall_1_1_0_0_2_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_1_1_0_0_3() { return cRightSquareBracketKeyword_1_1_0_0_3; }

		//OpSingleAssign
		public RuleCall getOpSingleAssignParserRuleCall_1_1_0_0_4() { return cOpSingleAssignParserRuleCall_1_1_0_0_4; }

		//value=Assignment
		public Assignment getValueAssignment_1_1_1() { return cValueAssignment_1_1_1; }

		//Assignment
		public RuleCall getValueAssignmentParserRuleCall_1_1_1_0() { return cValueAssignmentParserRuleCall_1_1_1_0; }

		//=> ({MemberFeatureCall.target=current} ".") feature=[Feature|FeatureID] (=> explicitOperationCall?="("
		//(arguments+=Expression ("," arguments+=Expression)*)? ")")?
		public Group getGroup_1_2() { return cGroup_1_2; }

		//=> ({MemberFeatureCall.target=current} ".")
		public Group getGroup_1_2_0() { return cGroup_1_2_0; }

		//{MemberFeatureCall.target=current} "."
		public Group getGroup_1_2_0_0() { return cGroup_1_2_0_0; }

		//{MemberFeatureCall.target=current}
		public Action getMemberFeatureCallTargetAction_1_2_0_0_0() { return cMemberFeatureCallTargetAction_1_2_0_0_0; }

		//"."
		public Keyword getFullStopKeyword_1_2_0_0_1() { return cFullStopKeyword_1_2_0_0_1; }

		//feature=[Feature|FeatureID]
		public Assignment getFeatureAssignment_1_2_1() { return cFeatureAssignment_1_2_1; }

		//[Feature|FeatureID]
		public CrossReference getFeatureFeatureCrossReference_1_2_1_0() { return cFeatureFeatureCrossReference_1_2_1_0; }

		//FeatureID
		public RuleCall getFeatureFeatureFeatureIDParserRuleCall_1_2_1_0_1() { return cFeatureFeatureFeatureIDParserRuleCall_1_2_1_0_1; }

		//(=> explicitOperationCall?="(" (arguments+=Expression ("," arguments+=Expression)*)? ")")?
		public Group getGroup_1_2_2() { return cGroup_1_2_2; }

		//=> explicitOperationCall?="("
		public Assignment getExplicitOperationCallAssignment_1_2_2_0() { return cExplicitOperationCallAssignment_1_2_2_0; }

		//"("
		public Keyword getExplicitOperationCallLeftParenthesisKeyword_1_2_2_0_0() { return cExplicitOperationCallLeftParenthesisKeyword_1_2_2_0_0; }

		//(arguments+=Expression ("," arguments+=Expression)*)?
		public Group getGroup_1_2_2_1() { return cGroup_1_2_2_1; }

		//arguments+=Expression
		public Assignment getArgumentsAssignment_1_2_2_1_0() { return cArgumentsAssignment_1_2_2_1_0; }

		//Expression
		public RuleCall getArgumentsExpressionParserRuleCall_1_2_2_1_0_0() { return cArgumentsExpressionParserRuleCall_1_2_2_1_0_0; }

		//("," arguments+=Expression)*
		public Group getGroup_1_2_2_1_1() { return cGroup_1_2_2_1_1; }

		//","
		public Keyword getCommaKeyword_1_2_2_1_1_0() { return cCommaKeyword_1_2_2_1_1_0; }

		//arguments+=Expression
		public Assignment getArgumentsAssignment_1_2_2_1_1_1() { return cArgumentsAssignment_1_2_2_1_1_1; }

		//Expression
		public RuleCall getArgumentsExpressionParserRuleCall_1_2_2_1_1_1_0() { return cArgumentsExpressionParserRuleCall_1_2_2_1_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_2_2_2() { return cRightParenthesisKeyword_1_2_2_2; }

		//=> ({ArrayAccess.target=current}) "[" feature=Expression "]" (=> explicitOperationCall?="(" (arguments+=Expression (","
		//arguments+=Expression)*)? ")")?
		public Group getGroup_1_3() { return cGroup_1_3; }

		//=> ({ArrayAccess.target=current})
		public Group getGroup_1_3_0() { return cGroup_1_3_0; }

		//{ArrayAccess.target=current}
		public Action getArrayAccessTargetAction_1_3_0_0() { return cArrayAccessTargetAction_1_3_0_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1_3_1() { return cLeftSquareBracketKeyword_1_3_1; }

		//feature=Expression
		public Assignment getFeatureAssignment_1_3_2() { return cFeatureAssignment_1_3_2; }

		//Expression
		public RuleCall getFeatureExpressionParserRuleCall_1_3_2_0() { return cFeatureExpressionParserRuleCall_1_3_2_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_1_3_3() { return cRightSquareBracketKeyword_1_3_3; }

		//(=> explicitOperationCall?="(" (arguments+=Expression ("," arguments+=Expression)*)? ")")?
		public Group getGroup_1_3_4() { return cGroup_1_3_4; }

		//=> explicitOperationCall?="("
		public Assignment getExplicitOperationCallAssignment_1_3_4_0() { return cExplicitOperationCallAssignment_1_3_4_0; }

		//"("
		public Keyword getExplicitOperationCallLeftParenthesisKeyword_1_3_4_0_0() { return cExplicitOperationCallLeftParenthesisKeyword_1_3_4_0_0; }

		//(arguments+=Expression ("," arguments+=Expression)*)?
		public Group getGroup_1_3_4_1() { return cGroup_1_3_4_1; }

		//arguments+=Expression
		public Assignment getArgumentsAssignment_1_3_4_1_0() { return cArgumentsAssignment_1_3_4_1_0; }

		//Expression
		public RuleCall getArgumentsExpressionParserRuleCall_1_3_4_1_0_0() { return cArgumentsExpressionParserRuleCall_1_3_4_1_0_0; }

		//("," arguments+=Expression)*
		public Group getGroup_1_3_4_1_1() { return cGroup_1_3_4_1_1; }

		//","
		public Keyword getCommaKeyword_1_3_4_1_1_0() { return cCommaKeyword_1_3_4_1_1_0; }

		//arguments+=Expression
		public Assignment getArgumentsAssignment_1_3_4_1_1_1() { return cArgumentsAssignment_1_3_4_1_1_1; }

		//Expression
		public RuleCall getArgumentsExpressionParserRuleCall_1_3_4_1_1_1_0() { return cArgumentsExpressionParserRuleCall_1_3_4_1_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_3_4_2() { return cRightParenthesisKeyword_1_3_4_2; }
	}

	public class PrimaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PrimaryExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBlockExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cParenthesizedExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cIfExpressionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cWhileExpressionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cDoWhileExpressionParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cForLoopExpressionParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cReturnExpressionParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cBreakExpressionParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cContinueExpressionParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cThrowExpressionParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cTryCatchExpressionParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		private final RuleCall cSwitchExpressionParserRuleCall_11 = (RuleCall)cAlternatives.eContents().get(11);
		private final RuleCall cFunctionExpressionParserRuleCall_12 = (RuleCall)cAlternatives.eContents().get(12);
		private final RuleCall cFeatureCallParserRuleCall_13 = (RuleCall)cAlternatives.eContents().get(13);
		private final RuleCall cConstructorCallParserRuleCall_14 = (RuleCall)cAlternatives.eContents().get(14);
		private final RuleCall cLiteralParserRuleCall_15 = (RuleCall)cAlternatives.eContents().get(15);
		
		//PrimaryExpression returns Expression:
		//	BlockExpression | ParenthesizedExpression | IfExpression | WhileExpression | DoWhileExpression | ForLoopExpression |
		//	ReturnExpression | BreakExpression | ContinueExpression | ThrowExpression | TryCatchExpression | SwitchExpression |
		//	FunctionExpression | FeatureCall | ConstructorCall | Literal;
		public ParserRule getRule() { return rule; }

		//BlockExpression | ParenthesizedExpression | IfExpression | WhileExpression | DoWhileExpression | ForLoopExpression |
		//ReturnExpression | BreakExpression | ContinueExpression | ThrowExpression | TryCatchExpression | SwitchExpression |
		//FunctionExpression | FeatureCall | ConstructorCall | Literal
		public Alternatives getAlternatives() { return cAlternatives; }

		//BlockExpression
		public RuleCall getBlockExpressionParserRuleCall_0() { return cBlockExpressionParserRuleCall_0; }

		//ParenthesizedExpression
		public RuleCall getParenthesizedExpressionParserRuleCall_1() { return cParenthesizedExpressionParserRuleCall_1; }

		//IfExpression
		public RuleCall getIfExpressionParserRuleCall_2() { return cIfExpressionParserRuleCall_2; }

		//WhileExpression
		public RuleCall getWhileExpressionParserRuleCall_3() { return cWhileExpressionParserRuleCall_3; }

		//DoWhileExpression
		public RuleCall getDoWhileExpressionParserRuleCall_4() { return cDoWhileExpressionParserRuleCall_4; }

		//ForLoopExpression
		public RuleCall getForLoopExpressionParserRuleCall_5() { return cForLoopExpressionParserRuleCall_5; }

		//ReturnExpression
		public RuleCall getReturnExpressionParserRuleCall_6() { return cReturnExpressionParserRuleCall_6; }

		//BreakExpression
		public RuleCall getBreakExpressionParserRuleCall_7() { return cBreakExpressionParserRuleCall_7; }

		//ContinueExpression
		public RuleCall getContinueExpressionParserRuleCall_8() { return cContinueExpressionParserRuleCall_8; }

		//ThrowExpression
		public RuleCall getThrowExpressionParserRuleCall_9() { return cThrowExpressionParserRuleCall_9; }

		//TryCatchExpression
		public RuleCall getTryCatchExpressionParserRuleCall_10() { return cTryCatchExpressionParserRuleCall_10; }

		//SwitchExpression
		public RuleCall getSwitchExpressionParserRuleCall_11() { return cSwitchExpressionParserRuleCall_11; }

		//FunctionExpression
		public RuleCall getFunctionExpressionParserRuleCall_12() { return cFunctionExpressionParserRuleCall_12; }

		//FeatureCall
		public RuleCall getFeatureCallParserRuleCall_13() { return cFeatureCallParserRuleCall_13; }

		//ConstructorCall
		public RuleCall getConstructorCallParserRuleCall_14() { return cConstructorCallParserRuleCall_14; }

		//Literal
		public RuleCall getLiteralParserRuleCall_15() { return cLiteralParserRuleCall_15; }
	}

	public class BlockExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BlockExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBlockExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cExpressionsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cExpressionsExpressionInsideBlockParserRuleCall_2_0_0 = (RuleCall)cExpressionsAssignment_2_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//BlockExpression returns Expression:
		//	{BlockExpression} "{" (expressions+=ExpressionInsideBlock ";"?)* "}";
		public ParserRule getRule() { return rule; }

		//{BlockExpression} "{" (expressions+=ExpressionInsideBlock ";"?)* "}"
		public Group getGroup() { return cGroup; }

		//{BlockExpression}
		public Action getBlockExpressionAction_0() { return cBlockExpressionAction_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//(expressions+=ExpressionInsideBlock ";"?)*
		public Group getGroup_2() { return cGroup_2; }

		//expressions+=ExpressionInsideBlock
		public Assignment getExpressionsAssignment_2_0() { return cExpressionsAssignment_2_0; }

		//ExpressionInsideBlock
		public RuleCall getExpressionsExpressionInsideBlockParserRuleCall_2_0_0() { return cExpressionsExpressionInsideBlockParserRuleCall_2_0_0; }

		//";"?
		public Keyword getSemicolonKeyword_2_1() { return cSemicolonKeyword_2_1; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class ExpressionInsideBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExpressionInsideBlock");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cVariableDeclarationsParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ExpressionInsideBlock returns Expression:
		//	VariableDeclarations | Expression;
		public ParserRule getRule() { return rule; }

		//VariableDeclarations | Expression
		public Alternatives getAlternatives() { return cAlternatives; }

		//VariableDeclarations
		public RuleCall getVariableDeclarationsParserRuleCall_0() { return cVariableDeclarationsParserRuleCall_0; }

		//Expression
		public RuleCall getExpressionParserRuleCall_1() { return cExpressionParserRuleCall_1; }
	}

	public class VariableDeclarationsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VariableDeclarations");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cVariableDeclarationsAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cVarKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cDeclarationsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDeclarationsVariableDeclarationParserRuleCall_2_0 = (RuleCall)cDeclarationsAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cDeclarationsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cDeclarationsVariableDeclarationParserRuleCall_3_1_0 = (RuleCall)cDeclarationsAssignment_3_1.eContents().get(0);
		
		//VariableDeclarations returns Expression:
		//	{VariableDeclarations} "var" declarations+=VariableDeclaration ("," declarations+=VariableDeclaration)*;
		public ParserRule getRule() { return rule; }

		//{VariableDeclarations} "var" declarations+=VariableDeclaration ("," declarations+=VariableDeclaration)*
		public Group getGroup() { return cGroup; }

		//{VariableDeclarations}
		public Action getVariableDeclarationsAction_0() { return cVariableDeclarationsAction_0; }

		//"var"
		public Keyword getVarKeyword_1() { return cVarKeyword_1; }

		//declarations+=VariableDeclaration
		public Assignment getDeclarationsAssignment_2() { return cDeclarationsAssignment_2; }

		//VariableDeclaration
		public RuleCall getDeclarationsVariableDeclarationParserRuleCall_2_0() { return cDeclarationsVariableDeclarationParserRuleCall_2_0; }

		//("," declarations+=VariableDeclaration)*
		public Group getGroup_3() { return cGroup_3; }

		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//declarations+=VariableDeclaration
		public Assignment getDeclarationsAssignment_3_1() { return cDeclarationsAssignment_3_1; }

		//VariableDeclaration
		public RuleCall getDeclarationsVariableDeclarationParserRuleCall_3_1_0() { return cDeclarationsVariableDeclarationParserRuleCall_3_1_0; }
	}

	public class VariableDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VariableDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cVariableDeclarationAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameValidIDParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cColonKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cTypeAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cTypeTypeReferenceParserRuleCall_2_1_0 = (RuleCall)cTypeAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cEqualsSignKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cExpressionAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_3_1_0 = (RuleCall)cExpressionAssignment_3_1.eContents().get(0);
		
		//VariableDeclaration:
		//	{VariableDeclaration} name=ValidID (":" type=TypeReference)? ("=" expression=Expression)?;
		public ParserRule getRule() { return rule; }

		//{VariableDeclaration} name=ValidID (":" type=TypeReference)? ("=" expression=Expression)?
		public Group getGroup() { return cGroup; }

		//{VariableDeclaration}
		public Action getVariableDeclarationAction_0() { return cVariableDeclarationAction_0; }

		//name=ValidID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ValidID
		public RuleCall getNameValidIDParserRuleCall_1_0() { return cNameValidIDParserRuleCall_1_0; }

		//(":" type=TypeReference)?
		public Group getGroup_2() { return cGroup_2; }

		//":"
		public Keyword getColonKeyword_2_0() { return cColonKeyword_2_0; }

		//type=TypeReference
		public Assignment getTypeAssignment_2_1() { return cTypeAssignment_2_1; }

		//TypeReference
		public RuleCall getTypeTypeReferenceParserRuleCall_2_1_0() { return cTypeTypeReferenceParserRuleCall_2_1_0; }

		//("=" expression=Expression)?
		public Group getGroup_3() { return cGroup_3; }

		//"="
		public Keyword getEqualsSignKeyword_3_0() { return cEqualsSignKeyword_3_0; }

		//expression=Expression
		public Assignment getExpressionAssignment_3_1() { return cExpressionAssignment_3_1; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_3_1_0() { return cExpressionExpressionParserRuleCall_3_1_0; }
	}

	public class ParenthesizedExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ParenthesizedExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//ParenthesizedExpression returns Expression:
		//	"(" Expression ")";
		public ParserRule getRule() { return rule; }

		//"(" Expression ")"
		public Group getGroup() { return cGroup; }

		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }

		//Expression
		public RuleCall getExpressionParserRuleCall_1() { return cExpressionParserRuleCall_1; }

		//")"
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}

	public class FunctionExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FunctionExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFunctionExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cFunctionKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cParametersAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cParametersOptionalParameterParserRuleCall_3_0_0 = (RuleCall)cParametersAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cParametersAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cParametersOptionalParameterParserRuleCall_3_1_1_0 = (RuleCall)cParametersAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cColonKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cReturnTypeAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cReturnTypeTypeReferenceParserRuleCall_5_1_0 = (RuleCall)cReturnTypeAssignment_5_1.eContents().get(0);
		private final Assignment cBodyAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cBodyBlockExpressionParserRuleCall_6_0 = (RuleCall)cBodyAssignment_6.eContents().get(0);
		
		//FunctionExpression returns Expression:
		//	{FunctionExpression} "function" "(" (parameters+=OptionalParameter ("," parameters+=OptionalParameter)*)? ")" (":"
		//	returnType=TypeReference)? body=BlockExpression;
		public ParserRule getRule() { return rule; }

		//{FunctionExpression} "function" "(" (parameters+=OptionalParameter ("," parameters+=OptionalParameter)*)? ")" (":"
		//returnType=TypeReference)? body=BlockExpression
		public Group getGroup() { return cGroup; }

		//{FunctionExpression}
		public Action getFunctionExpressionAction_0() { return cFunctionExpressionAction_0; }

		//"function"
		public Keyword getFunctionKeyword_1() { return cFunctionKeyword_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//(parameters+=OptionalParameter ("," parameters+=OptionalParameter)*)?
		public Group getGroup_3() { return cGroup_3; }

		//parameters+=OptionalParameter
		public Assignment getParametersAssignment_3_0() { return cParametersAssignment_3_0; }

		//OptionalParameter
		public RuleCall getParametersOptionalParameterParserRuleCall_3_0_0() { return cParametersOptionalParameterParserRuleCall_3_0_0; }

		//("," parameters+=OptionalParameter)*
		public Group getGroup_3_1() { return cGroup_3_1; }

		//","
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }

		//parameters+=OptionalParameter
		public Assignment getParametersAssignment_3_1_1() { return cParametersAssignment_3_1_1; }

		//OptionalParameter
		public RuleCall getParametersOptionalParameterParserRuleCall_3_1_1_0() { return cParametersOptionalParameterParserRuleCall_3_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }

		//(":" returnType=TypeReference)?
		public Group getGroup_5() { return cGroup_5; }

		//":"
		public Keyword getColonKeyword_5_0() { return cColonKeyword_5_0; }

		//returnType=TypeReference
		public Assignment getReturnTypeAssignment_5_1() { return cReturnTypeAssignment_5_1; }

		//TypeReference
		public RuleCall getReturnTypeTypeReferenceParserRuleCall_5_1_0() { return cReturnTypeTypeReferenceParserRuleCall_5_1_0; }

		//body=BlockExpression
		public Assignment getBodyAssignment_6() { return cBodyAssignment_6; }

		//BlockExpression
		public RuleCall getBodyBlockExpressionParserRuleCall_6_0() { return cBodyBlockExpressionParserRuleCall_6_0; }
	}

	public class FeatureCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FeatureCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFeatureCallAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cFeatureAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cFeatureFeatureCrossReference_1_0 = (CrossReference)cFeatureAssignment_1.eContents().get(0);
		private final RuleCall cFeatureFeatureFeatureIDParserRuleCall_1_0_1 = (RuleCall)cFeatureFeatureCrossReference_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cExplicitOperationCallAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final Keyword cExplicitOperationCallLeftParenthesisKeyword_2_0_0 = (Keyword)cExplicitOperationCallAssignment_2_0.eContents().get(0);
		private final Assignment cArgumentsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cArgumentsExpressionParserRuleCall_2_1_0 = (RuleCall)cArgumentsAssignment_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cCommaKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cArgumentsAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cArgumentsExpressionParserRuleCall_2_2_1_0 = (RuleCall)cArgumentsAssignment_2_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		
		//FeatureCall returns Expression:
		//	{FeatureCall} feature=[Feature|FeatureID] (=> explicitOperationCall?="(" arguments+=Expression? (","
		//	arguments+=Expression)* ")")?;
		public ParserRule getRule() { return rule; }

		//{FeatureCall} feature=[Feature|FeatureID] (=> explicitOperationCall?="(" arguments+=Expression? (","
		//arguments+=Expression)* ")")?
		public Group getGroup() { return cGroup; }

		//{FeatureCall}
		public Action getFeatureCallAction_0() { return cFeatureCallAction_0; }

		//feature=[Feature|FeatureID]
		public Assignment getFeatureAssignment_1() { return cFeatureAssignment_1; }

		//[Feature|FeatureID]
		public CrossReference getFeatureFeatureCrossReference_1_0() { return cFeatureFeatureCrossReference_1_0; }

		//FeatureID
		public RuleCall getFeatureFeatureFeatureIDParserRuleCall_1_0_1() { return cFeatureFeatureFeatureIDParserRuleCall_1_0_1; }

		//(=> explicitOperationCall?="(" arguments+=Expression? ("," arguments+=Expression)* ")")?
		public Group getGroup_2() { return cGroup_2; }

		//=> explicitOperationCall?="("
		public Assignment getExplicitOperationCallAssignment_2_0() { return cExplicitOperationCallAssignment_2_0; }

		//"("
		public Keyword getExplicitOperationCallLeftParenthesisKeyword_2_0_0() { return cExplicitOperationCallLeftParenthesisKeyword_2_0_0; }

		//arguments+=Expression?
		public Assignment getArgumentsAssignment_2_1() { return cArgumentsAssignment_2_1; }

		//Expression
		public RuleCall getArgumentsExpressionParserRuleCall_2_1_0() { return cArgumentsExpressionParserRuleCall_2_1_0; }

		//("," arguments+=Expression)*
		public Group getGroup_2_2() { return cGroup_2_2; }

		//","
		public Keyword getCommaKeyword_2_2_0() { return cCommaKeyword_2_2_0; }

		//arguments+=Expression
		public Assignment getArgumentsAssignment_2_2_1() { return cArgumentsAssignment_2_2_1; }

		//Expression
		public RuleCall getArgumentsExpressionParserRuleCall_2_2_1_0() { return cArgumentsExpressionParserRuleCall_2_2_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_2_3() { return cRightParenthesisKeyword_2_3; }
	}

	public class ConstructorCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ConstructorCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cConstructorCallAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cNewKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cConstructorAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cConstructorParameterizedTypeReferenceParserRuleCall_2_0 = (RuleCall)cConstructorAssignment_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cArgumentsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cArgumentsExpressionParserRuleCall_4_0 = (RuleCall)cArgumentsAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cArgumentsAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cArgumentsExpressionParserRuleCall_5_1_0 = (RuleCall)cArgumentsAssignment_5_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//ConstructorCall returns Expression:
		//	{ConstructorCall} "new" constructor=ParameterizedTypeReference "(" arguments+=Expression? ("," arguments+=Expression)*
		//	")";
		public ParserRule getRule() { return rule; }

		//{ConstructorCall} "new" constructor=ParameterizedTypeReference "(" arguments+=Expression? ("," arguments+=Expression)*
		//")"
		public Group getGroup() { return cGroup; }

		//{ConstructorCall}
		public Action getConstructorCallAction_0() { return cConstructorCallAction_0; }

		//"new"
		public Keyword getNewKeyword_1() { return cNewKeyword_1; }

		//constructor=ParameterizedTypeReference
		public Assignment getConstructorAssignment_2() { return cConstructorAssignment_2; }

		//ParameterizedTypeReference
		public RuleCall getConstructorParameterizedTypeReferenceParserRuleCall_2_0() { return cConstructorParameterizedTypeReferenceParserRuleCall_2_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }

		//arguments+=Expression?
		public Assignment getArgumentsAssignment_4() { return cArgumentsAssignment_4; }

		//Expression
		public RuleCall getArgumentsExpressionParserRuleCall_4_0() { return cArgumentsExpressionParserRuleCall_4_0; }

		//("," arguments+=Expression)*
		public Group getGroup_5() { return cGroup_5; }

		//","
		public Keyword getCommaKeyword_5_0() { return cCommaKeyword_5_0; }

		//arguments+=Expression
		public Assignment getArgumentsAssignment_5_1() { return cArgumentsAssignment_5_1; }

		//Expression
		public RuleCall getArgumentsExpressionParserRuleCall_5_1_0() { return cArgumentsExpressionParserRuleCall_5_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
	}

	public class IfExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IfExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIfExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cIfKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cIfAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cIfExpressionParserRuleCall_3_0 = (RuleCall)cIfAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cThenAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cThenExpressionParserRuleCall_5_0 = (RuleCall)cThenAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Group cGroup_6_0 = (Group)cGroup_6.eContents().get(0);
		private final Keyword cSemicolonKeyword_6_0_0 = (Keyword)cGroup_6_0.eContents().get(0);
		private final Keyword cElseKeyword_6_0_1 = (Keyword)cGroup_6_0.eContents().get(1);
		private final Assignment cElseAssignment_6_0_2 = (Assignment)cGroup_6_0.eContents().get(2);
		private final RuleCall cElseExpressionParserRuleCall_6_0_2_0 = (RuleCall)cElseAssignment_6_0_2.eContents().get(0);
		
		/// **********************
		// * EXPRESSIONS - CONTROL FLOW
		// * / IfExpression returns Expression:
		//	{IfExpression} "if" "(" if=Expression ")" then=Expression => (";"? "else" else=Expression)?;
		public ParserRule getRule() { return rule; }

		//{IfExpression} "if" "(" if=Expression ")" then=Expression => (";"? "else" else=Expression)?
		public Group getGroup() { return cGroup; }

		//{IfExpression}
		public Action getIfExpressionAction_0() { return cIfExpressionAction_0; }

		//"if"
		public Keyword getIfKeyword_1() { return cIfKeyword_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//if=Expression
		public Assignment getIfAssignment_3() { return cIfAssignment_3; }

		//Expression
		public RuleCall getIfExpressionParserRuleCall_3_0() { return cIfExpressionParserRuleCall_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }

		//then=Expression
		public Assignment getThenAssignment_5() { return cThenAssignment_5; }

		//Expression
		public RuleCall getThenExpressionParserRuleCall_5_0() { return cThenExpressionParserRuleCall_5_0; }

		//=> (";"? "else" else=Expression)?
		public Group getGroup_6() { return cGroup_6; }

		//";"? "else" else=Expression
		public Group getGroup_6_0() { return cGroup_6_0; }

		//";"?
		public Keyword getSemicolonKeyword_6_0_0() { return cSemicolonKeyword_6_0_0; }

		//"else"
		public Keyword getElseKeyword_6_0_1() { return cElseKeyword_6_0_1; }

		//else=Expression
		public Assignment getElseAssignment_6_0_2() { return cElseAssignment_6_0_2; }

		//Expression
		public RuleCall getElseExpressionParserRuleCall_6_0_2_0() { return cElseExpressionParserRuleCall_6_0_2_0; }
	}

	public class WhileExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "WhileExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cWhileExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cWhileKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cPredicateAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPredicateExpressionParserRuleCall_3_0 = (RuleCall)cPredicateAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cBodyAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cBodyExpressionParserRuleCall_5_0 = (RuleCall)cBodyAssignment_5.eContents().get(0);
		
		//WhileExpression returns Expression:
		//	{WhileExpression} "while" "(" predicate=Expression ")" body=Expression;
		public ParserRule getRule() { return rule; }

		//{WhileExpression} "while" "(" predicate=Expression ")" body=Expression
		public Group getGroup() { return cGroup; }

		//{WhileExpression}
		public Action getWhileExpressionAction_0() { return cWhileExpressionAction_0; }

		//"while"
		public Keyword getWhileKeyword_1() { return cWhileKeyword_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//predicate=Expression
		public Assignment getPredicateAssignment_3() { return cPredicateAssignment_3; }

		//Expression
		public RuleCall getPredicateExpressionParserRuleCall_3_0() { return cPredicateExpressionParserRuleCall_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }

		//body=Expression
		public Assignment getBodyAssignment_5() { return cBodyAssignment_5; }

		//Expression
		public RuleCall getBodyExpressionParserRuleCall_5_0() { return cBodyExpressionParserRuleCall_5_0; }
	}

	public class DoWhileExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DoWhileExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDoWhileExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cDoKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cBodyAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cBodyExpressionParserRuleCall_2_0 = (RuleCall)cBodyAssignment_2.eContents().get(0);
		private final Keyword cWhileKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cPredicateAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cPredicateExpressionParserRuleCall_5_0 = (RuleCall)cPredicateAssignment_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//DoWhileExpression returns Expression:
		//	{DoWhileExpression} "do" body=Expression "while" "(" predicate=Expression ")";
		public ParserRule getRule() { return rule; }

		//{DoWhileExpression} "do" body=Expression "while" "(" predicate=Expression ")"
		public Group getGroup() { return cGroup; }

		//{DoWhileExpression}
		public Action getDoWhileExpressionAction_0() { return cDoWhileExpressionAction_0; }

		//"do"
		public Keyword getDoKeyword_1() { return cDoKeyword_1; }

		//body=Expression
		public Assignment getBodyAssignment_2() { return cBodyAssignment_2; }

		//Expression
		public RuleCall getBodyExpressionParserRuleCall_2_0() { return cBodyExpressionParserRuleCall_2_0; }

		//"while"
		public Keyword getWhileKeyword_3() { return cWhileKeyword_3; }

		//"("
		public Keyword getLeftParenthesisKeyword_4() { return cLeftParenthesisKeyword_4; }

		//predicate=Expression
		public Assignment getPredicateAssignment_5() { return cPredicateAssignment_5; }

		//Expression
		public RuleCall getPredicateExpressionParserRuleCall_5_0() { return cPredicateExpressionParserRuleCall_5_0; }

		//")"
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
	}

	public class ForLoopExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ForLoopExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cForLoopExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Keyword cForKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final Assignment cDeclaredParamAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final RuleCall cDeclaredParamParameterParserRuleCall_1_0_2_0 = (RuleCall)cDeclaredParamAssignment_1_0_2.eContents().get(0);
		private final Keyword cInKeyword_1_0_3 = (Keyword)cGroup_1_0.eContents().get(3);
		private final Assignment cForExpressionAssignment_1_0_4 = (Assignment)cGroup_1_0.eContents().get(4);
		private final RuleCall cForExpressionExpressionParserRuleCall_1_0_4_0 = (RuleCall)cForExpressionAssignment_1_0_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_0_5 = (Keyword)cGroup_1_0.eContents().get(5);
		private final Assignment cBodyAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cBodyExpressionParserRuleCall_2_0 = (RuleCall)cBodyAssignment_2.eContents().get(0);
		
		//ForLoopExpression returns Expression:
		//	{ForLoopExpression} => ("for" "(" declaredParam=Parameter "in" forExpression=Expression ")") body=Expression;
		public ParserRule getRule() { return rule; }

		//{ForLoopExpression} => ("for" "(" declaredParam=Parameter "in" forExpression=Expression ")") body=Expression
		public Group getGroup() { return cGroup; }

		//{ForLoopExpression}
		public Action getForLoopExpressionAction_0() { return cForLoopExpressionAction_0; }

		//=> ("for" "(" declaredParam=Parameter "in" forExpression=Expression ")")
		public Group getGroup_1() { return cGroup_1; }

		//"for" "(" declaredParam=Parameter "in" forExpression=Expression ")"
		public Group getGroup_1_0() { return cGroup_1_0; }

		//"for"
		public Keyword getForKeyword_1_0_0() { return cForKeyword_1_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_0_1() { return cLeftParenthesisKeyword_1_0_1; }

		//declaredParam=Parameter
		public Assignment getDeclaredParamAssignment_1_0_2() { return cDeclaredParamAssignment_1_0_2; }

		//Parameter
		public RuleCall getDeclaredParamParameterParserRuleCall_1_0_2_0() { return cDeclaredParamParameterParserRuleCall_1_0_2_0; }

		//"in"
		public Keyword getInKeyword_1_0_3() { return cInKeyword_1_0_3; }

		//forExpression=Expression
		public Assignment getForExpressionAssignment_1_0_4() { return cForExpressionAssignment_1_0_4; }

		//Expression
		public RuleCall getForExpressionExpressionParserRuleCall_1_0_4_0() { return cForExpressionExpressionParserRuleCall_1_0_4_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_0_5() { return cRightParenthesisKeyword_1_0_5; }

		//body=Expression
		public Assignment getBodyAssignment_2() { return cBodyAssignment_2; }

		//Expression
		public RuleCall getBodyExpressionParserRuleCall_2_0() { return cBodyExpressionParserRuleCall_2_0; }
	}

	public class TryCatchExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TryCatchExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTryCatchExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cTryKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionExpressionParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		private final Assignment cCatchClausesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cCatchClausesCatchClauseParserRuleCall_3_0 = (RuleCall)cCatchClausesAssignment_3.eContents().get(0);
		
		//TryCatchExpression returns Expression:
		//	{TryCatchExpression} "try" expression=Expression catchClauses+=CatchClause+;
		public ParserRule getRule() { return rule; }

		//{TryCatchExpression} "try" expression=Expression catchClauses+=CatchClause+
		public Group getGroup() { return cGroup; }

		//{TryCatchExpression}
		public Action getTryCatchExpressionAction_0() { return cTryCatchExpressionAction_0; }

		//"try"
		public Keyword getTryKeyword_1() { return cTryKeyword_1; }

		//expression=Expression
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_2_0() { return cExpressionExpressionParserRuleCall_2_0; }

		//catchClauses+=CatchClause+
		public Assignment getCatchClausesAssignment_3() { return cCatchClausesAssignment_3; }

		//CatchClause
		public RuleCall getCatchClausesCatchClauseParserRuleCall_3_0() { return cCatchClausesCatchClauseParserRuleCall_3_0; }
	}

	public class CatchClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CatchClause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCatchKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cDeclaredParamAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDeclaredParamParameterParserRuleCall_2_0 = (RuleCall)cDeclaredParamAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cExpressionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cExpressionExpressionParserRuleCall_4_0 = (RuleCall)cExpressionAssignment_4.eContents().get(0);
		
		//CatchClause:
		//	"catch" "(" declaredParam=Parameter ")" expression=Expression;
		public ParserRule getRule() { return rule; }

		//=> "catch" "(" declaredParam=Parameter ")" expression=Expression
		public Group getGroup() { return cGroup; }

		//=> "catch"
		public Keyword getCatchKeyword_0() { return cCatchKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//declaredParam=Parameter
		public Assignment getDeclaredParamAssignment_2() { return cDeclaredParamAssignment_2; }

		//Parameter
		public RuleCall getDeclaredParamParameterParserRuleCall_2_0() { return cDeclaredParamParameterParserRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }

		//expression=Expression
		public Assignment getExpressionAssignment_4() { return cExpressionAssignment_4; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_4_0() { return cExpressionExpressionParserRuleCall_4_0; }
	}

	public class SwitchExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SwitchExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSwitchExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSwitchKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cSwitchAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSwitchExpressionParserRuleCall_2_0 = (RuleCall)cSwitchAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cCasesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cCasesCasePartParserRuleCall_4_0 = (RuleCall)cCasesAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cDefaultKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cColonKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cDefaultAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cDefaultCasePartExpressionsParserRuleCall_5_2_0 = (RuleCall)cDefaultAssignment_5_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//SwitchExpression returns Expression:
		//	{SwitchExpression} "switch" switch=Expression "{" cases+=CasePart+ ("default" ":" default=CasePartExpressions)? "}";
		public ParserRule getRule() { return rule; }

		//{SwitchExpression} "switch" switch=Expression "{" cases+=CasePart+ ("default" ":" default=CasePartExpressions)? "}"
		public Group getGroup() { return cGroup; }

		//{SwitchExpression}
		public Action getSwitchExpressionAction_0() { return cSwitchExpressionAction_0; }

		//"switch"
		public Keyword getSwitchKeyword_1() { return cSwitchKeyword_1; }

		//switch=Expression
		public Assignment getSwitchAssignment_2() { return cSwitchAssignment_2; }

		//Expression
		public RuleCall getSwitchExpressionParserRuleCall_2_0() { return cSwitchExpressionParserRuleCall_2_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//cases+=CasePart+
		public Assignment getCasesAssignment_4() { return cCasesAssignment_4; }

		//CasePart
		public RuleCall getCasesCasePartParserRuleCall_4_0() { return cCasesCasePartParserRuleCall_4_0; }

		//("default" ":" default=CasePartExpressions)?
		public Group getGroup_5() { return cGroup_5; }

		//"default"
		public Keyword getDefaultKeyword_5_0() { return cDefaultKeyword_5_0; }

		//":"
		public Keyword getColonKeyword_5_1() { return cColonKeyword_5_1; }

		//default=CasePartExpressions
		public Assignment getDefaultAssignment_5_2() { return cDefaultAssignment_5_2; }

		//CasePartExpressions
		public RuleCall getDefaultCasePartExpressionsParserRuleCall_5_2_0() { return cDefaultCasePartExpressionsParserRuleCall_5_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}

	public class CasePartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CasePart");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCaseKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cCasesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCasesExpressionParserRuleCall_1_0 = (RuleCall)cCasesAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cCasesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cCasesExpressionParserRuleCall_2_1_0 = (RuleCall)cCasesAssignment_2_1.eContents().get(0);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cThenAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cThenCasePartExpressionsParserRuleCall_4_0 = (RuleCall)cThenAssignment_4.eContents().get(0);
		
		//CasePart:
		//	"case" cases+=Expression ("," cases+=Expression)? ":" then=CasePartExpressions;
		public ParserRule getRule() { return rule; }

		//=> "case" cases+=Expression ("," cases+=Expression)? ":" then=CasePartExpressions
		public Group getGroup() { return cGroup; }

		//=> "case"
		public Keyword getCaseKeyword_0() { return cCaseKeyword_0; }

		//cases+=Expression
		public Assignment getCasesAssignment_1() { return cCasesAssignment_1; }

		//Expression
		public RuleCall getCasesExpressionParserRuleCall_1_0() { return cCasesExpressionParserRuleCall_1_0; }

		//("," cases+=Expression)?
		public Group getGroup_2() { return cGroup_2; }

		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//cases+=Expression
		public Assignment getCasesAssignment_2_1() { return cCasesAssignment_2_1; }

		//Expression
		public RuleCall getCasesExpressionParserRuleCall_2_1_0() { return cCasesExpressionParserRuleCall_2_1_0; }

		//":"
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }

		//then=CasePartExpressions
		public Assignment getThenAssignment_4() { return cThenAssignment_4; }

		//CasePartExpressions
		public RuleCall getThenCasePartExpressionsParserRuleCall_4_0() { return cThenCasePartExpressionsParserRuleCall_4_0; }
	}

	public class CasePartExpressionsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CasePartExpressions");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCasePartExpressionsAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cExpressionsAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cExpressionsExpressionInsideBlockParserRuleCall_1_0_0 = (RuleCall)cExpressionsAssignment_1_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		
		//CasePartExpressions:
		//	{CasePartExpressions} (expressions+=ExpressionInsideBlock ";"?)*;
		public ParserRule getRule() { return rule; }

		//{CasePartExpressions} (expressions+=ExpressionInsideBlock ";"?)*
		public Group getGroup() { return cGroup; }

		//{CasePartExpressions}
		public Action getCasePartExpressionsAction_0() { return cCasePartExpressionsAction_0; }

		//(expressions+=ExpressionInsideBlock ";"?)*
		public Group getGroup_1() { return cGroup_1; }

		//expressions+=ExpressionInsideBlock
		public Assignment getExpressionsAssignment_1_0() { return cExpressionsAssignment_1_0; }

		//ExpressionInsideBlock
		public RuleCall getExpressionsExpressionInsideBlockParserRuleCall_1_0_0() { return cExpressionsExpressionInsideBlockParserRuleCall_1_0_0; }

		//";"?
		public Keyword getSemicolonKeyword_1_1() { return cSemicolonKeyword_1_1; }
	}

	public class ReturnExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ReturnExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cReturnExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cReturnKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionExpressionParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		
		//ReturnExpression returns Expression:
		//	{ReturnExpression} "return" => expression=Expression?;
		public ParserRule getRule() { return rule; }

		//{ReturnExpression} "return" => expression=Expression?
		public Group getGroup() { return cGroup; }

		//{ReturnExpression}
		public Action getReturnExpressionAction_0() { return cReturnExpressionAction_0; }

		//"return"
		public Keyword getReturnKeyword_1() { return cReturnKeyword_1; }

		//=> expression=Expression?
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_2_0() { return cExpressionExpressionParserRuleCall_2_0; }
	}

	public class BreakExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BreakExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBreakExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cBreakKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//BreakExpression returns Expression:
		//	{BreakExpression} "break";
		public ParserRule getRule() { return rule; }

		//{BreakExpression} "break"
		public Group getGroup() { return cGroup; }

		//{BreakExpression}
		public Action getBreakExpressionAction_0() { return cBreakExpressionAction_0; }

		//"break"
		public Keyword getBreakKeyword_1() { return cBreakKeyword_1; }
	}

	public class ContinueExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ContinueExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBreakExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cContinueKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//ContinueExpression returns Expression:
		//	{BreakExpression} "continue";
		public ParserRule getRule() { return rule; }

		//{BreakExpression} "continue"
		public Group getGroup() { return cGroup; }

		//{BreakExpression}
		public Action getBreakExpressionAction_0() { return cBreakExpressionAction_0; }

		//"continue"
		public Keyword getContinueKeyword_1() { return cContinueKeyword_1; }
	}

	public class ThrowExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ThrowExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cThrowExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cThrowKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionExpressionParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		
		//ThrowExpression returns Expression:
		//	{ThrowExpression} "throw" expression=Expression;
		public ParserRule getRule() { return rule; }

		//{ThrowExpression} "throw" expression=Expression
		public Group getGroup() { return cGroup; }

		//{ThrowExpression}
		public Action getThrowExpressionAction_0() { return cThrowExpressionAction_0; }

		//"throw"
		public Keyword getThrowKeyword_1() { return cThrowKeyword_1; }

		//expression=Expression
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_2_0() { return cExpressionExpressionParserRuleCall_2_0; }
	}

	public class LiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Literal");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNullLiteralParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cStringLiteralParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cNumberLiteralParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cRegularExpressionLiteralParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cArrayLiteralParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cObjectLiteralParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		/// **********************
		// * EXPRESSIONS - LITERALS
		// * / Literal returns Expression:
		//	NullLiteral | StringLiteral | NumberLiteral | RegularExpressionLiteral | ArrayLiteral | ObjectLiteral;
		public ParserRule getRule() { return rule; }

		//NullLiteral | StringLiteral | NumberLiteral | RegularExpressionLiteral | ArrayLiteral | ObjectLiteral
		public Alternatives getAlternatives() { return cAlternatives; }

		//NullLiteral
		public RuleCall getNullLiteralParserRuleCall_0() { return cNullLiteralParserRuleCall_0; }

		//StringLiteral
		public RuleCall getStringLiteralParserRuleCall_1() { return cStringLiteralParserRuleCall_1; }

		//NumberLiteral
		public RuleCall getNumberLiteralParserRuleCall_2() { return cNumberLiteralParserRuleCall_2; }

		//RegularExpressionLiteral
		public RuleCall getRegularExpressionLiteralParserRuleCall_3() { return cRegularExpressionLiteralParserRuleCall_3; }

		//ArrayLiteral
		public RuleCall getArrayLiteralParserRuleCall_4() { return cArrayLiteralParserRuleCall_4; }

		//ObjectLiteral
		public RuleCall getObjectLiteralParserRuleCall_5() { return cObjectLiteralParserRuleCall_5; }
	}

	public class NullLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NullLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cNullLiteralAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cNullKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//NullLiteral returns Expression:
		//	{NullLiteral} "null";
		public ParserRule getRule() { return rule; }

		//{NullLiteral} "null"
		public Group getGroup() { return cGroup; }

		//{NullLiteral}
		public Action getNullLiteralAction_0() { return cNullLiteralAction_0; }

		//"null"
		public Keyword getNullKeyword_1() { return cNullKeyword_1; }
	}

	public class NumberLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NumberLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cNumberLiteralAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueNumberParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//NumberLiteral returns Expression:
		//	{NumberLiteral} value=Number;
		public ParserRule getRule() { return rule; }

		//{NumberLiteral} value=Number
		public Group getGroup() { return cGroup; }

		//{NumberLiteral}
		public Action getNumberLiteralAction_0() { return cNumberLiteralAction_0; }

		//value=Number
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//Number
		public RuleCall getValueNumberParserRuleCall_1_0() { return cValueNumberParserRuleCall_1_0; }
	}

	public class NumberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Number");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cGroup_0.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_0_0_0 = (RuleCall)cGroup_0_0.eContents().get(0);
		private final Keyword cFullStopKeyword_0_0_1 = (Keyword)cGroup_0_0.eContents().get(1);
		private final Alternatives cAlternatives_0_0_2 = (Alternatives)cGroup_0_0.eContents().get(2);
		private final RuleCall cINTTerminalRuleCall_0_0_2_0 = (RuleCall)cAlternatives_0_0_2.eContents().get(0);
		private final RuleCall cEXPONENT_FLOATTerminalRuleCall_0_0_2_1 = (RuleCall)cAlternatives_0_0_2.eContents().get(1);
		private final RuleCall cHEXTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cEXPONENT_FLOATTerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cINTTerminalRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Number hidden():
		//	=> (INT? "." (INT | EXPONENT_FLOAT)) | HEX | EXPONENT_FLOAT | INT;
		public ParserRule getRule() { return rule; }

		//=> (INT? "." (INT | EXPONENT_FLOAT)) | HEX | EXPONENT_FLOAT | INT
		public Alternatives getAlternatives() { return cAlternatives; }

		//=> (INT? "." (INT | EXPONENT_FLOAT))
		public Group getGroup_0() { return cGroup_0; }

		//INT? "." (INT | EXPONENT_FLOAT)
		public Group getGroup_0_0() { return cGroup_0_0; }

		//INT?
		public RuleCall getINTTerminalRuleCall_0_0_0() { return cINTTerminalRuleCall_0_0_0; }

		//"."
		public Keyword getFullStopKeyword_0_0_1() { return cFullStopKeyword_0_0_1; }

		//INT | EXPONENT_FLOAT
		public Alternatives getAlternatives_0_0_2() { return cAlternatives_0_0_2; }

		//INT
		public RuleCall getINTTerminalRuleCall_0_0_2_0() { return cINTTerminalRuleCall_0_0_2_0; }

		//EXPONENT_FLOAT
		public RuleCall getEXPONENT_FLOATTerminalRuleCall_0_0_2_1() { return cEXPONENT_FLOATTerminalRuleCall_0_0_2_1; }

		//HEX
		public RuleCall getHEXTerminalRuleCall_1() { return cHEXTerminalRuleCall_1; }

		//EXPONENT_FLOAT
		public RuleCall getEXPONENT_FLOATTerminalRuleCall_2() { return cEXPONENT_FLOATTerminalRuleCall_2; }

		//INT
		public RuleCall getINTTerminalRuleCall_3() { return cINTTerminalRuleCall_3; }
	}

	public class StringLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StringLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStringLiteralAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//StringLiteral returns Expression:
		//	{StringLiteral} value=STRING;
		public ParserRule getRule() { return rule; }

		//{StringLiteral} value=STRING
		public Group getGroup() { return cGroup; }

		//{StringLiteral}
		public Action getStringLiteralAction_0() { return cStringLiteralAction_0; }

		//value=STRING
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_1_0() { return cValueSTRINGTerminalRuleCall_1_0; }
	}

	public class RegularExpressionLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RegularExpressionLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRegularExpressionLiteralAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueREGULAR_EXPRESSIONTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//RegularExpressionLiteral returns Expression:
		//	{RegularExpressionLiteral} value=REGULAR_EXPRESSION;
		public ParserRule getRule() { return rule; }

		//{RegularExpressionLiteral} value=REGULAR_EXPRESSION
		public Group getGroup() { return cGroup; }

		//{RegularExpressionLiteral}
		public Action getRegularExpressionLiteralAction_0() { return cRegularExpressionLiteralAction_0; }

		//value=REGULAR_EXPRESSION
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//REGULAR_EXPRESSION
		public RuleCall getValueREGULAR_EXPRESSIONTerminalRuleCall_1_0() { return cValueREGULAR_EXPRESSIONTerminalRuleCall_1_0; }
	}

	public class ArrayLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ArrayLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cArrayLiteralAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cElementsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cElementsExpressionParserRuleCall_2_0 = (RuleCall)cElementsAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cElementsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cElementsExpressionParserRuleCall_3_1_0 = (RuleCall)cElementsAssignment_3_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ArrayLiteral returns Expression:
		//	{ArrayLiteral} "[" elements+=Expression? ("," elements+=Expression)* "]";
		public ParserRule getRule() { return rule; }

		//{ArrayLiteral} "[" elements+=Expression? ("," elements+=Expression)* "]"
		public Group getGroup() { return cGroup; }

		//{ArrayLiteral}
		public Action getArrayLiteralAction_0() { return cArrayLiteralAction_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }

		//elements+=Expression?
		public Assignment getElementsAssignment_2() { return cElementsAssignment_2; }

		//Expression
		public RuleCall getElementsExpressionParserRuleCall_2_0() { return cElementsExpressionParserRuleCall_2_0; }

		//("," elements+=Expression)*
		public Group getGroup_3() { return cGroup_3; }

		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//elements+=Expression
		public Assignment getElementsAssignment_3_1() { return cElementsAssignment_3_1; }

		//Expression
		public RuleCall getElementsExpressionParserRuleCall_3_1_0() { return cElementsExpressionParserRuleCall_3_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_4() { return cRightSquareBracketKeyword_4; }
	}

	public class ObjectLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ObjectLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cObjectLiteralAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cElementsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cElementsObjectElementParserRuleCall_2_0 = (RuleCall)cElementsAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cElementsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cElementsObjectElementParserRuleCall_3_1_0 = (RuleCall)cElementsAssignment_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ObjectLiteral returns Expression:
		//	{ObjectLiteral} "{" elements+=ObjectElement ("," elements+=ObjectElement)* "}";
		public ParserRule getRule() { return rule; }

		//{ObjectLiteral} "{" elements+=ObjectElement ("," elements+=ObjectElement)* "}"
		public Group getGroup() { return cGroup; }

		//{ObjectLiteral}
		public Action getObjectLiteralAction_0() { return cObjectLiteralAction_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//elements+=ObjectElement
		public Assignment getElementsAssignment_2() { return cElementsAssignment_2; }

		//ObjectElement
		public RuleCall getElementsObjectElementParserRuleCall_2_0() { return cElementsObjectElementParserRuleCall_2_0; }

		//("," elements+=ObjectElement)*
		public Group getGroup_3() { return cGroup_3; }

		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//elements+=ObjectElement
		public Assignment getElementsAssignment_3_1() { return cElementsAssignment_3_1; }

		//ObjectElement
		public RuleCall getElementsObjectElementParserRuleCall_3_1_0() { return cElementsObjectElementParserRuleCall_3_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class ObjectElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ObjectElement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKeyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cKeyValidIDParserRuleCall_0_0 = (RuleCall)cKeyAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueExpressionParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//ObjectElement:
		//	key=ValidID ":" value=Expression;
		public ParserRule getRule() { return rule; }

		//key=ValidID ":" value=Expression
		public Group getGroup() { return cGroup; }

		//key=ValidID
		public Assignment getKeyAssignment_0() { return cKeyAssignment_0; }

		//ValidID
		public RuleCall getKeyValidIDParserRuleCall_0_0() { return cKeyValidIDParserRuleCall_0_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//value=Expression
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		//Expression
		public RuleCall getValueExpressionParserRuleCall_2_0() { return cValueExpressionParserRuleCall_2_0; }
	}

	public class QualifiedNameWithWildcardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QualifiedNameWithWildcard");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cQualifiedNameParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFullStopAsteriskKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		/// **********************
		// * NAMES AND IDS
		// * / QualifiedNameWithWildcard:
		//	QualifiedName ".*"?;
		public ParserRule getRule() { return rule; }

		//QualifiedName ".*"?
		public Group getGroup() { return cGroup; }

		//QualifiedName
		public RuleCall getQualifiedNameParserRuleCall_0() { return cQualifiedNameParserRuleCall_0; }

		//".*"?
		public Keyword getFullStopAsteriskKeyword_1() { return cFullStopAsteriskKeyword_1; }
	}

	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cValidIDParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cValidIDParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QualifiedName:
		//	ValidID ("." ValidID)*;
		public ParserRule getRule() { return rule; }

		//ValidID ("." ValidID)*
		public Group getGroup() { return cGroup; }

		//ValidID
		public RuleCall getValidIDParserRuleCall_0() { return cValidIDParserRuleCall_0; }

		//("." ValidID)*
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//ValidID
		public RuleCall getValidIDParserRuleCall_1_1() { return cValidIDParserRuleCall_1_1; }
	}

	public class ValidIDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ValidID");
		private final RuleCall cIDTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//ValidID:
		//	ID;
		public ParserRule getRule() { return rule; }

		//ID
		public RuleCall getIDTerminalRuleCall() { return cIDTerminalRuleCall; }
	}

	public class FeatureIDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FeatureID");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cValidIDParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Keyword cSuperKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cThisKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		//FeatureID:
		//	ValidID | "super" | "this";
		public ParserRule getRule() { return rule; }

		//ValidID | "super" | "this"
		public Alternatives getAlternatives() { return cAlternatives; }

		//ValidID
		public RuleCall getValidIDParserRuleCall_0() { return cValidIDParserRuleCall_0; }

		//"super"
		public Keyword getSuperKeyword_1() { return cSuperKeyword_1; }

		//"this"
		public Keyword getThisKeyword_2() { return cThisKeyword_2; }
	}
	
	
	public class VisibilityElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "Visibility");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cPRIVATEEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cPRIVATEPrivateKeyword_0_0 = (Keyword)cPRIVATEEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cPUBLICEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cPUBLICPublicKeyword_1_0 = (Keyword)cPUBLICEnumLiteralDeclaration_1.eContents().get(0);
		
		/// **********************
		// * MEMBERS
		// * / enum Visibility:
		//	PRIVATE="private" | PUBLIC="public";
		public EnumRule getRule() { return rule; }

		//PRIVATE="private" | PUBLIC="public"
		public Alternatives getAlternatives() { return cAlternatives; }

		//PRIVATE="private"
		public EnumLiteralDeclaration getPRIVATEEnumLiteralDeclaration_0() { return cPRIVATEEnumLiteralDeclaration_0; }

		//"private"
		public Keyword getPRIVATEPrivateKeyword_0_0() { return cPRIVATEPrivateKeyword_0_0; }

		//PUBLIC="public"
		public EnumLiteralDeclaration getPUBLICEnumLiteralDeclaration_1() { return cPUBLICEnumLiteralDeclaration_1; }

		//"public"
		public Keyword getPUBLICPublicKeyword_1_0() { return cPUBLICPublicKeyword_1_0; }
	}
	
	private PackageElements pPackage;
	private ImportElements pImport;
	private UsingElements pUsing;
	private TerminalRule tCONDITIONAL_IF;
	private TerminalRule tCONDITIONAL_ELSE;
	private TerminalRule tCONDITIONAL_ELSE_IF;
	private TerminalRule tCONDITIONAL_EXPRESSION;
	private TerminalRule tCONDITIONAL_END;
	private TypeElements pType;
	private ClassElements pClass;
	private InterfaceElements pInterface;
	private TypedefElements pTypedef;
	private EnumElements pEnum;
	private ExternClassElements pExternClass;
	private TypeParametersElements pTypeParameters;
	private TypeParameterElements pTypeParameter;
	private TypeReferenceElements pTypeReference;
	private MethodSignatureElements pMethodSignature;
	private ParameterizedTypeReferenceElements pParameterizedTypeReference;
	private TypedefTypeElements pTypedefType;
	private TypedefTypePropertyElements pTypedefTypeProperty;
	private MetadataElements pMetadata;
	private MetadataExpressionElements pMetadataExpression;
	private VisibilityElements unknownRuleVisibility;
	private MethodModifierElements pMethodModifier;
	private PropertyModifierElements pPropertyModifier;
	private ParameterElements pParameter;
	private OptionalParameterElements pOptionalParameter;
	private ClassConstructorElements pClassConstructor;
	private ClassPropertyElements pClassProperty;
	private ClassMethodElements pClassMethod;
	private InterfacePropertyElements pInterfaceProperty;
	private InterfaceMethodElements pInterfaceMethod;
	private TypedefPropertyElements pTypedefProperty;
	private TypedefMethodElements pTypedefMethod;
	private EnumConstructorElements pEnumConstructor;
	private ExternClassConstructorElements pExternClassConstructor;
	private ExternClassPropertyElements pExternClassProperty;
	private ExternClassMethodElements pExternClassMethod;
	private GetterSetterElements pGetterSetter;
	private ClassMethodReferenceElements pClassMethodReference;
	private GetterSetterLiteralElements pGetterSetterLiteral;
	private FeatureElements pFeature;
	private ExpressionElements pExpression;
	private ShortIfExpressionElements pShortIfExpression;
	private AssignmentElements pAssignment;
	private OpSingleAssignElements pOpSingleAssign;
	private OpMultiAssignElements pOpMultiAssign;
	private OrExpressionElements pOrExpression;
	private OpOrElements pOpOr;
	private AndExpressionElements pAndExpression;
	private OpAndElements pOpAnd;
	private OtherOperatorExpressionElements pOtherOperatorExpression;
	private OpOtherElements pOpOther;
	private CompareExpressionElements pCompareExpression;
	private OpCompareElements pOpCompare;
	private BitwiseExpressionElements pBitwiseExpression;
	private OpBitwiseElements pOpBitwise;
	private BitshiftExpressionElements pBitshiftExpression;
	private OpBitshiftElements pOpBitshift;
	private AddExpressionElements pAddExpression;
	private OpAddElements pOpAdd;
	private SubtractExpressionElements pSubtractExpression;
	private OpSubtractElements pOpSubtract;
	private MultiplyExpressionElements pMultiplyExpression;
	private OpMultiplyElements pOpMultiply;
	private DivideExpressionElements pDivideExpression;
	private OpDivideElements pOpDivide;
	private ModuloExpressionElements pModuloExpression;
	private OpModuloElements pOpModulo;
	private UnaryOperationElements pUnaryOperation;
	private OpUnaryElements pOpUnary;
	private PreIncrementOperationElements pPreIncrementOperation;
	private PostIncrementOperationElements pPostIncrementOperation;
	private OpIncrementElements pOpIncrement;
	private MemberFeatureCallElements pMemberFeatureCall;
	private PrimaryExpressionElements pPrimaryExpression;
	private BlockExpressionElements pBlockExpression;
	private ExpressionInsideBlockElements pExpressionInsideBlock;
	private VariableDeclarationsElements pVariableDeclarations;
	private VariableDeclarationElements pVariableDeclaration;
	private ParenthesizedExpressionElements pParenthesizedExpression;
	private FunctionExpressionElements pFunctionExpression;
	private FeatureCallElements pFeatureCall;
	private ConstructorCallElements pConstructorCall;
	private IfExpressionElements pIfExpression;
	private WhileExpressionElements pWhileExpression;
	private DoWhileExpressionElements pDoWhileExpression;
	private ForLoopExpressionElements pForLoopExpression;
	private TryCatchExpressionElements pTryCatchExpression;
	private CatchClauseElements pCatchClause;
	private SwitchExpressionElements pSwitchExpression;
	private CasePartElements pCasePart;
	private CasePartExpressionsElements pCasePartExpressions;
	private ReturnExpressionElements pReturnExpression;
	private BreakExpressionElements pBreakExpression;
	private ContinueExpressionElements pContinueExpression;
	private ThrowExpressionElements pThrowExpression;
	private LiteralElements pLiteral;
	private NullLiteralElements pNullLiteral;
	private NumberLiteralElements pNumberLiteral;
	private NumberElements pNumber;
	private StringLiteralElements pStringLiteral;
	private RegularExpressionLiteralElements pRegularExpressionLiteral;
	private ArrayLiteralElements pArrayLiteral;
	private ObjectLiteralElements pObjectLiteral;
	private ObjectElementElements pObjectElement;
	private QualifiedNameWithWildcardElements pQualifiedNameWithWildcard;
	private QualifiedNameElements pQualifiedName;
	private ValidIDElements pValidID;
	private FeatureIDElements pFeatureID;
	private TerminalRule tID;
	private TerminalRule tEXPONENT_FLOAT;
	private TerminalRule tEXPONENT;
	private TerminalRule tHEX;
	private TerminalRule tHEX_DIGIT;
	private TerminalRule tINT;
	private TerminalRule tREGULAR_EXPRESSION;
	private TerminalRule tSTRING;
	private TerminalRule tML_COMMENT;
	private TerminalRule tSL_COMMENT;
	private TerminalRule tWS;
	private TerminalRule tANY_OTHER;
	
	private final GrammarProvider grammarProvider;

	@Inject
	public HaxeGrammarAccess(GrammarProvider grammarProvider) {
		this.grammarProvider = grammarProvider;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	
	/// *
	// * TODO list:
	// * 
	// * - Implement else if
	// * 
	// * - Check the ref for validation
	// * - Add validation for types. Think of the types that can be extended and implemented
	// * - Add validation for variables. non-static variables may not have an initial value
	// * - Add default visibility. This depends on the context: example: default for Typedef is public where default for Class is private
	// * - Add validation for metadata
	// * / Package:
	//	("package" name=QualifiedName ";")? (imports+=Import | using+=Using)* (classes+=Class | interfaces+=Interface |
	//	typedefs+=Typedef | enums+=Enum | externClasses+=ExternClass)*;
	public PackageElements getPackageAccess() {
		return (pPackage != null) ? pPackage : (pPackage = new PackageElements());
	}
	
	public ParserRule getPackageRule() {
		return getPackageAccess().getRule();
	}

	//Import:
	//	"import" importedNamespace=QualifiedNameWithWildcard ";";
	public ImportElements getImportAccess() {
		return (pImport != null) ? pImport : (pImport = new ImportElements());
	}
	
	public ParserRule getImportRule() {
		return getImportAccess().getRule();
	}

	//Using:
	//	"using" importedClass=QualifiedName ";";
	public UsingElements getUsingAccess() {
		return (pUsing != null) ? pUsing : (pUsing = new UsingElements());
	}
	
	public ParserRule getUsingRule() {
		return getUsingAccess().getRule();
	}

	/// **********************
	// * CONDITIONAL COMPILATION (just the parsing)
	// * / terminal CONDITIONAL_IF:
	//	"#if" WS? CONDITIONAL_EXPRESSION;
	public TerminalRule getCONDITIONAL_IFRule() {
		return (tCONDITIONAL_IF != null) ? tCONDITIONAL_IF : (tCONDITIONAL_IF = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "CONDITIONAL_IF"));
	} 

	//terminal CONDITIONAL_ELSE:
	//	"#else";
	public TerminalRule getCONDITIONAL_ELSERule() {
		return (tCONDITIONAL_ELSE != null) ? tCONDITIONAL_ELSE : (tCONDITIONAL_ELSE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "CONDITIONAL_ELSE"));
	} 

	//terminal CONDITIONAL_ELSE_IF:
	//	"#elseif" WS? CONDITIONAL_EXPRESSION;
	public TerminalRule getCONDITIONAL_ELSE_IFRule() {
		return (tCONDITIONAL_ELSE_IF != null) ? tCONDITIONAL_ELSE_IF : (tCONDITIONAL_ELSE_IF = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "CONDITIONAL_ELSE_IF"));
	} 

	//terminal fragment CONDITIONAL_EXPRESSION:
	//	"!"? ("(" !")"+ ")" | ID);
	public TerminalRule getCONDITIONAL_EXPRESSIONRule() {
		return (tCONDITIONAL_EXPRESSION != null) ? tCONDITIONAL_EXPRESSION : (tCONDITIONAL_EXPRESSION = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "CONDITIONAL_EXPRESSION"));
	} 

	//terminal CONDITIONAL_END:
	//	"#end";
	public TerminalRule getCONDITIONAL_ENDRule() {
		return (tCONDITIONAL_END != null) ? tCONDITIONAL_END : (tCONDITIONAL_END = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "CONDITIONAL_END"));
	} 

	/// **********************
	// * CLASSES AND TYPES
	// * / Type:
	//	Class | Interface | Typedef | Enum | ExternClass | TypeParameter;
	public TypeElements getTypeAccess() {
		return (pType != null) ? pType : (pType = new TypeElements());
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}

	//Class:
	//	metadata=Metadata? visibility=Visibility? "class" name=ValidID typeParameters=TypeParameters? (("extends"
	//	extends=ParameterizedTypeReference | "implements" implements+=ParameterizedTypeReference) ("," "implements"
	//	implements+=ParameterizedTypeReference)*)? "{" (constructor=ClassConstructor? & (properties+=ClassProperty |
	//	methods+=ClassMethod)*) "}";
	public ClassElements getClassAccess() {
		return (pClass != null) ? pClass : (pClass = new ClassElements());
	}
	
	public ParserRule getClassRule() {
		return getClassAccess().getRule();
	}

	//Interface:
	//	metadata=Metadata? extern="extern"? visibility=Visibility? "interface" name=ValidID typeParameters=TypeParameters?
	//	("implements" implements+=ParameterizedTypeReference ("," "implements" implements+=ParameterizedTypeReference)*)? "{"
	//	(properties+=InterfaceProperty | methods+=InterfaceMethod)* "}";
	public InterfaceElements getInterfaceAccess() {
		return (pInterface != null) ? pInterface : (pInterface = new InterfaceElements());
	}
	
	public ParserRule getInterfaceRule() {
		return getInterfaceAccess().getRule();
	}

	//Typedef:
	//	metadata=Metadata? visibility=Visibility? "typedef" name=ValidID typeParameters=TypeParameters? "=" ("{" (">"
	//	extends=ParameterizedTypeReference ",")? (properties+=TypedefProperty | methods+=TypedefMethod)* "}" |
	//	type=ParameterizedTypeReference);
	public TypedefElements getTypedefAccess() {
		return (pTypedef != null) ? pTypedef : (pTypedef = new TypedefElements());
	}
	
	public ParserRule getTypedefRule() {
		return getTypedefAccess().getRule();
	}

	//Enum:
	//	metadata=Metadata? extern="extern"? visibility=Visibility? "enum" name=ValidID typeParameters=TypeParameters? "{"
	//	constructors+=EnumConstructor* "}";
	public EnumElements getEnumAccess() {
		return (pEnum != null) ? pEnum : (pEnum = new EnumElements());
	}
	
	public ParserRule getEnumRule() {
		return getEnumAccess().getRule();
	}

	//ExternClass:
	//	metadata=Metadata? visibility=Visibility? "extern" "class" name=ValidID typeParameters=TypeParameters? (("extends"
	//	extends=ParameterizedTypeReference | "implements" implements+=ParameterizedTypeReference) ("," "implements"
	//	implements+=ParameterizedTypeReference)*)? "{" (constructor=ExternClassConstructor? & properties+=ExternClassProperty*
	//	& methods+=ExternClassMethod*) "}";
	public ExternClassElements getExternClassAccess() {
		return (pExternClass != null) ? pExternClass : (pExternClass = new ExternClassElements());
	}
	
	public ParserRule getExternClassRule() {
		return getExternClassAccess().getRule();
	}

	//TypeParameters:
	//	"<" parameters+=TypeParameter ("," parameters+=TypeParameter)* ">";
	public TypeParametersElements getTypeParametersAccess() {
		return (pTypeParameters != null) ? pTypeParameters : (pTypeParameters = new TypeParametersElements());
	}
	
	public ParserRule getTypeParametersRule() {
		return getTypeParametersAccess().getRule();
	}

	//TypeParameter:
	//	name=ValidID (":" "(" constraints+=ParameterizedTypeReference ("," constraints+=ParameterizedTypeReference)* ")")?;
	public TypeParameterElements getTypeParameterAccess() {
		return (pTypeParameter != null) ? pTypeParameter : (pTypeParameter = new TypeParameterElements());
	}
	
	public ParserRule getTypeParameterRule() {
		return getTypeParameterAccess().getRule();
	}

	//TypeReference:
	//	MethodSignature | TypedefType;
	public TypeReferenceElements getTypeReferenceAccess() {
		return (pTypeReference != null) ? pTypeReference : (pTypeReference = new TypeReferenceElements());
	}
	
	public ParserRule getTypeReferenceRule() {
		return getTypeReferenceAccess().getRule();
	}

	//MethodSignature returns Reference:
	//	ParameterizedTypeReference (=> ({MethodSignature.argumentTypes+=current} "->") =>
	//	(argumentTypes+=ParameterizedTypeReference "->")* returnType=ParameterizedTypeReference)?;
	public MethodSignatureElements getMethodSignatureAccess() {
		return (pMethodSignature != null) ? pMethodSignature : (pMethodSignature = new MethodSignatureElements());
	}
	
	public ParserRule getMethodSignatureRule() {
		return getMethodSignatureAccess().getRule();
	}

	//ParameterizedTypeReference returns Reference:
	//	{ParameterizedTypeReference} => (type=[Type|QualifiedName] ("<" arguments+=TypeReference (","
	//	arguments+=TypeReference)* ">")?);
	public ParameterizedTypeReferenceElements getParameterizedTypeReferenceAccess() {
		return (pParameterizedTypeReference != null) ? pParameterizedTypeReference : (pParameterizedTypeReference = new ParameterizedTypeReferenceElements());
	}
	
	public ParserRule getParameterizedTypeReferenceRule() {
		return getParameterizedTypeReferenceAccess().getRule();
	}

	//TypedefType returns Reference:
	//	{TypedefType} ("{" properties+=TypedefTypeProperty ("," properties+=TypedefTypeProperty)* "}");
	public TypedefTypeElements getTypedefTypeAccess() {
		return (pTypedefType != null) ? pTypedefType : (pTypedefType = new TypedefTypeElements());
	}
	
	public ParserRule getTypedefTypeRule() {
		return getTypedefTypeAccess().getRule();
	}

	//TypedefTypeProperty:
	//	name=ValidID ":" type=TypeReference;
	public TypedefTypePropertyElements getTypedefTypePropertyAccess() {
		return (pTypedefTypeProperty != null) ? pTypedefTypeProperty : (pTypedefTypeProperty = new TypedefTypePropertyElements());
	}
	
	public ParserRule getTypedefTypePropertyRule() {
		return getTypedefTypePropertyAccess().getRule();
	}

	/// **********************
	// * METADATA
	// * / Metadata:
	//	"@" compiler?=":" name=ValidID => ("(" body=MetadataExpression? ")")?;
	public MetadataElements getMetadataAccess() {
		return (pMetadata != null) ? pMetadata : (pMetadata = new MetadataElements());
	}
	
	public ParserRule getMetadataRule() {
		return getMetadataAccess().getRule();
	}

	//MetadataExpression returns Expression:
	//	StringLiteral | NumberLiteral | RegularExpressionLiteral;
	public MetadataExpressionElements getMetadataExpressionAccess() {
		return (pMetadataExpression != null) ? pMetadataExpression : (pMetadataExpression = new MetadataExpressionElements());
	}
	
	public ParserRule getMetadataExpressionRule() {
		return getMetadataExpressionAccess().getRule();
	}

	/// **********************
	// * MEMBERS
	// * / enum Visibility:
	//	PRIVATE="private" | PUBLIC="public";
	public VisibilityElements getVisibilityAccess() {
		return (unknownRuleVisibility != null) ? unknownRuleVisibility : (unknownRuleVisibility = new VisibilityElements());
	}
	
	public EnumRule getVisibilityRule() {
		return getVisibilityAccess().getRule();
	}

	//MethodModifier:
	//	{Modifier} (static?="static"? & final?="final"? & dynamic?="dynamic"? & override?="override"? & inline?="inline"? &
	//	visibility=Visibility?);
	public MethodModifierElements getMethodModifierAccess() {
		return (pMethodModifier != null) ? pMethodModifier : (pMethodModifier = new MethodModifierElements());
	}
	
	public ParserRule getMethodModifierRule() {
		return getMethodModifierAccess().getRule();
	}

	//PropertyModifier:
	//	{Modifier} (static?="static"? & visibility=Visibility?);
	public PropertyModifierElements getPropertyModifierAccess() {
		return (pPropertyModifier != null) ? pPropertyModifier : (pPropertyModifier = new PropertyModifierElements());
	}
	
	public ParserRule getPropertyModifierRule() {
		return getPropertyModifierAccess().getRule();
	}

	//Parameter:
	//	name=ValidID (":" type=TypeReference)? ("=" defaultValue=Literal)?;
	public ParameterElements getParameterAccess() {
		return (pParameter != null) ? pParameter : (pParameter = new ParameterElements());
	}
	
	public ParserRule getParameterRule() {
		return getParameterAccess().getRule();
	}

	//OptionalParameter returns Parameter:
	//	optional?="?"? name=ValidID (":" type=TypeReference)? ("=" defaultValue=Literal)?;
	public OptionalParameterElements getOptionalParameterAccess() {
		return (pOptionalParameter != null) ? pOptionalParameter : (pOptionalParameter = new OptionalParameterElements());
	}
	
	public ParserRule getOptionalParameterRule() {
		return getOptionalParameterAccess().getRule();
	}

	//ClassConstructor:
	//	{ClassConstructor} metadata=Metadata? visibility=Visibility? "function" "new" "(" (parameters+=OptionalParameter (","
	//	parameters+=OptionalParameter)*)? ")" (":" returnType=TypeReference)? body=BlockExpression ";"?;
	public ClassConstructorElements getClassConstructorAccess() {
		return (pClassConstructor != null) ? pClassConstructor : (pClassConstructor = new ClassConstructorElements());
	}
	
	public ParserRule getClassConstructorRule() {
		return getClassConstructorAccess().getRule();
	}

	//ClassProperty:
	//	metadata=Metadata? modifier=PropertyModifier "var" name=ValidID ("(" getter=GetterSetter "," setter=GetterSetter ")")?
	//	(":" type=TypeReference)? ("=" expression=Expression)? ";"?;
	public ClassPropertyElements getClassPropertyAccess() {
		return (pClassProperty != null) ? pClassProperty : (pClassProperty = new ClassPropertyElements());
	}
	
	public ParserRule getClassPropertyRule() {
		return getClassPropertyAccess().getRule();
	}

	//ClassMethod returns Method:
	//	metadata=Metadata? modifier=MethodModifier "function" name=ValidID typeParameters=TypeParameters? "("
	//	(parameters+=OptionalParameter ("," parameters+=OptionalParameter)*)? ")" (":" returnType=TypeReference)?
	//	untyped?="untyped"? body=BlockExpression ";"?;
	public ClassMethodElements getClassMethodAccess() {
		return (pClassMethod != null) ? pClassMethod : (pClassMethod = new ClassMethodElements());
	}
	
	public ParserRule getClassMethodRule() {
		return getClassMethodAccess().getRule();
	}

	//InterfaceProperty:
	//	metadata=Metadata? "var" name=ValidID ("(" getter=GetterSetter "," setter=GetterSetter ")")? ":" type=TypeReference
	//	";"?;
	public InterfacePropertyElements getInterfacePropertyAccess() {
		return (pInterfaceProperty != null) ? pInterfaceProperty : (pInterfaceProperty = new InterfacePropertyElements());
	}
	
	public ParserRule getInterfacePropertyRule() {
		return getInterfacePropertyAccess().getRule();
	}

	//InterfaceMethod returns Method:
	//	metadata=Metadata? "function" name=ValidID typeParameters=TypeParameters? "(" (parameters+=OptionalParameter (","
	//	parameters+=OptionalParameter)*)? ")" (":" returnType=TypeReference)? ";"?;
	public InterfaceMethodElements getInterfaceMethodAccess() {
		return (pInterfaceMethod != null) ? pInterfaceMethod : (pInterfaceMethod = new InterfaceMethodElements());
	}
	
	public ParserRule getInterfaceMethodRule() {
		return getInterfaceMethodAccess().getRule();
	}

	//TypedefProperty:
	//	metadata=Metadata? visibility=Visibility? "var" name=ValidID ("(" getter=GetterSetter "," setter=GetterSetter ")")?
	//	(":" type=TypeReference)? ";"?;
	public TypedefPropertyElements getTypedefPropertyAccess() {
		return (pTypedefProperty != null) ? pTypedefProperty : (pTypedefProperty = new TypedefPropertyElements());
	}
	
	public ParserRule getTypedefPropertyRule() {
		return getTypedefPropertyAccess().getRule();
	}

	//TypedefMethod returns Method:
	//	metadata=Metadata? visibility=Visibility? "function" name=ValidID typeParameters=TypeParameters? "("
	//	(parameters+=OptionalParameter ("," parameters+=OptionalParameter)*)? ")" (":" returnType=TypeReference)? ";"?;
	public TypedefMethodElements getTypedefMethodAccess() {
		return (pTypedefMethod != null) ? pTypedefMethod : (pTypedefMethod = new TypedefMethodElements());
	}
	
	public ParserRule getTypedefMethodRule() {
		return getTypedefMethodAccess().getRule();
	}

	//EnumConstructor:
	//	metadata=Metadata? name=ValidID ("(" parameters+=OptionalParameter ("," parameters+=OptionalParameter)* ")")? ";"?;
	public EnumConstructorElements getEnumConstructorAccess() {
		return (pEnumConstructor != null) ? pEnumConstructor : (pEnumConstructor = new EnumConstructorElements());
	}
	
	public ParserRule getEnumConstructorRule() {
		return getEnumConstructorAccess().getRule();
	}

	//ExternClassConstructor:
	//	{ExternClassConstructor} metadata=Metadata? visibility=Visibility? "function" "new" "(" (parameters+=OptionalParameter
	//	("," parameters+=OptionalParameter)*)? ")" (":" returnType=TypeReference)? ";"?;
	public ExternClassConstructorElements getExternClassConstructorAccess() {
		return (pExternClassConstructor != null) ? pExternClassConstructor : (pExternClassConstructor = new ExternClassConstructorElements());
	}
	
	public ParserRule getExternClassConstructorRule() {
		return getExternClassConstructorAccess().getRule();
	}

	//ExternClassProperty:
	//	metadata=Metadata? modifier=PropertyModifier "var" name=ValidID ("(" getter=GetterSetter "," setter=GetterSetter ")")?
	//	(":" type=TypeReference)? ("=" expression=Expression)? ";"?;
	public ExternClassPropertyElements getExternClassPropertyAccess() {
		return (pExternClassProperty != null) ? pExternClassProperty : (pExternClassProperty = new ExternClassPropertyElements());
	}
	
	public ParserRule getExternClassPropertyRule() {
		return getExternClassPropertyAccess().getRule();
	}

	//ExternClassMethod returns Method:
	//	metadata=Metadata? modifier=MethodModifier "function" name=ValidID typeParameters=TypeParameters? "("
	//	(parameters+=OptionalParameter ("," parameters+=OptionalParameter)*)? ")" (":" returnType=TypeReference)? ("untyped"
	//	body=BlockExpression)? ";"?;
	public ExternClassMethodElements getExternClassMethodAccess() {
		return (pExternClassMethod != null) ? pExternClassMethod : (pExternClassMethod = new ExternClassMethodElements());
	}
	
	public ParserRule getExternClassMethodRule() {
		return getExternClassMethodAccess().getRule();
	}

	//GetterSetter:
	//	ClassMethodReference | GetterSetterLiteral;
	public GetterSetterElements getGetterSetterAccess() {
		return (pGetterSetter != null) ? pGetterSetter : (pGetterSetter = new GetterSetterElements());
	}
	
	public ParserRule getGetterSetterRule() {
		return getGetterSetterAccess().getRule();
	}

	//ClassMethodReference:
	//	reference=[Method|ValidID];
	public ClassMethodReferenceElements getClassMethodReferenceAccess() {
		return (pClassMethodReference != null) ? pClassMethodReference : (pClassMethodReference = new ClassMethodReferenceElements());
	}
	
	public ParserRule getClassMethodReferenceRule() {
		return getClassMethodReferenceAccess().getRule();
	}

	//GetterSetterLiteral:
	//	value=("default" | "null" | "dynamic" | "never");
	public GetterSetterLiteralElements getGetterSetterLiteralAccess() {
		return (pGetterSetterLiteral != null) ? pGetterSetterLiteral : (pGetterSetterLiteral = new GetterSetterLiteralElements());
	}
	
	public ParserRule getGetterSetterLiteralRule() {
		return getGetterSetterLiteralAccess().getRule();
	}

	//Feature:
	//	Type | Parameter | VariableDeclaration | ClassMethod | ClassProperty | InterfaceMethod | InterfaceProperty |
	//	TypedefMethod | TypedefProperty | EnumConstructor | ExternClassMethod | ExternClassProperty;
	public FeatureElements getFeatureAccess() {
		return (pFeature != null) ? pFeature : (pFeature = new FeatureElements());
	}
	
	public ParserRule getFeatureRule() {
		return getFeatureAccess().getRule();
	}

	/// **********************
	// * EXPRESSIONS - OPERATORS
	// * / Expression:
	//	ShortIfExpression | {CastExpression} "cast" (target=Expression | => ("(" target=Expression "," type=TypeReference
	//	")")) | {UntypedExpression} "untyped" target=Expression;
	public ExpressionElements getExpressionAccess() {
		return (pExpression != null) ? pExpression : (pExpression = new ExpressionElements());
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}

	//ShortIfExpression returns Expression:
	//	Assignment => ({IfExpression.if=current} "?" then=Expression ":" else=Expression)?;
	public ShortIfExpressionElements getShortIfExpressionAccess() {
		return (pShortIfExpression != null) ? pShortIfExpression : (pShortIfExpression = new ShortIfExpressionElements());
	}
	
	public ParserRule getShortIfExpressionRule() {
		return getShortIfExpressionAccess().getRule();
	}

	//Assignment returns Expression:
	//	{Assignment} feature=[Feature|FeatureID] OpSingleAssign value=Assignment | OrExpression => ({Operation.left=current}
	//	feature=OpMultiAssign right=Assignment)?;
	public AssignmentElements getAssignmentAccess() {
		return (pAssignment != null) ? pAssignment : (pAssignment = new AssignmentElements());
	}
	
	public ParserRule getAssignmentRule() {
		return getAssignmentAccess().getRule();
	}

	//OpSingleAssign:
	//	"=";
	public OpSingleAssignElements getOpSingleAssignAccess() {
		return (pOpSingleAssign != null) ? pOpSingleAssign : (pOpSingleAssign = new OpSingleAssignElements());
	}
	
	public ParserRule getOpSingleAssignRule() {
		return getOpSingleAssignAccess().getRule();
	}

	//OpMultiAssign hidden():
	//	"+=" | "-=" | "*=" | "/=" | "%=" | "&=" | "|=" | "^=" | "<" "<" "=" | ">" ">" ">"? "=";
	public OpMultiAssignElements getOpMultiAssignAccess() {
		return (pOpMultiAssign != null) ? pOpMultiAssign : (pOpMultiAssign = new OpMultiAssignElements());
	}
	
	public ParserRule getOpMultiAssignRule() {
		return getOpMultiAssignAccess().getRule();
	}

	//OrExpression returns Expression:
	//	AndExpression (=> ({Operation.left=current} feature=OpOr) right=AndExpression)*;
	public OrExpressionElements getOrExpressionAccess() {
		return (pOrExpression != null) ? pOrExpression : (pOrExpression = new OrExpressionElements());
	}
	
	public ParserRule getOrExpressionRule() {
		return getOrExpressionAccess().getRule();
	}

	//OpOr:
	//	"||";
	public OpOrElements getOpOrAccess() {
		return (pOpOr != null) ? pOpOr : (pOpOr = new OpOrElements());
	}
	
	public ParserRule getOpOrRule() {
		return getOpOrAccess().getRule();
	}

	//AndExpression returns Expression:
	//	OtherOperatorExpression (=> ({Operation.left=current} feature=OpAnd) right=OtherOperatorExpression)*;
	public AndExpressionElements getAndExpressionAccess() {
		return (pAndExpression != null) ? pAndExpression : (pAndExpression = new AndExpressionElements());
	}
	
	public ParserRule getAndExpressionRule() {
		return getAndExpressionAccess().getRule();
	}

	//OpAnd:
	//	"&&";
	public OpAndElements getOpAndAccess() {
		return (pOpAnd != null) ? pOpAnd : (pOpAnd = new OpAndElements());
	}
	
	public ParserRule getOpAndRule() {
		return getOpAndAccess().getRule();
	}

	//OtherOperatorExpression returns Expression:
	//	CompareExpression (=> ({Operation.left=current} feature=OpOther) right=CompareExpression)*;
	public OtherOperatorExpressionElements getOtherOperatorExpressionAccess() {
		return (pOtherOperatorExpression != null) ? pOtherOperatorExpression : (pOtherOperatorExpression = new OtherOperatorExpressionElements());
	}
	
	public ParserRule getOtherOperatorExpressionRule() {
		return getOtherOperatorExpressionAccess().getRule();
	}

	//OpOther:
	//	"...";
	public OpOtherElements getOpOtherAccess() {
		return (pOpOther != null) ? pOpOther : (pOpOther = new OpOtherElements());
	}
	
	public ParserRule getOpOtherRule() {
		return getOpOtherAccess().getRule();
	}

	//CompareExpression returns Expression:
	//	BitwiseExpression => ({Operation.left=current} feature=OpCompare right=BitwiseExpression)*;
	public CompareExpressionElements getCompareExpressionAccess() {
		return (pCompareExpression != null) ? pCompareExpression : (pCompareExpression = new CompareExpressionElements());
	}
	
	public ParserRule getCompareExpressionRule() {
		return getCompareExpressionAccess().getRule();
	}

	//OpCompare hidden():
	//	"==" | "!=" | ">" "="? | "<" "="?;
	public OpCompareElements getOpCompareAccess() {
		return (pOpCompare != null) ? pOpCompare : (pOpCompare = new OpCompareElements());
	}
	
	public ParserRule getOpCompareRule() {
		return getOpCompareAccess().getRule();
	}

	//BitwiseExpression returns Expression:
	//	BitshiftExpression (=> ({Operation.left=current} feature=OpBitwise) right=BitshiftExpression)*;
	public BitwiseExpressionElements getBitwiseExpressionAccess() {
		return (pBitwiseExpression != null) ? pBitwiseExpression : (pBitwiseExpression = new BitwiseExpressionElements());
	}
	
	public ParserRule getBitwiseExpressionRule() {
		return getBitwiseExpressionAccess().getRule();
	}

	//OpBitwise:
	//	"|" | "&" | "^";
	public OpBitwiseElements getOpBitwiseAccess() {
		return (pOpBitwise != null) ? pOpBitwise : (pOpBitwise = new OpBitwiseElements());
	}
	
	public ParserRule getOpBitwiseRule() {
		return getOpBitwiseAccess().getRule();
	}

	//BitshiftExpression returns Expression:
	//	AddExpression => ({Operation.left=current} feature=OpBitshift right=AddExpression)*;
	public BitshiftExpressionElements getBitshiftExpressionAccess() {
		return (pBitshiftExpression != null) ? pBitshiftExpression : (pBitshiftExpression = new BitshiftExpressionElements());
	}
	
	public ParserRule getBitshiftExpressionRule() {
		return getBitshiftExpressionAccess().getRule();
	}

	//OpBitshift hidden():
	//	"<" "<" | ">" ">" ">"?;
	public OpBitshiftElements getOpBitshiftAccess() {
		return (pOpBitshift != null) ? pOpBitshift : (pOpBitshift = new OpBitshiftElements());
	}
	
	public ParserRule getOpBitshiftRule() {
		return getOpBitshiftAccess().getRule();
	}

	//AddExpression returns Expression:
	//	SubtractExpression (=> ({Operation.left=current} feature=OpAdd) right=SubtractExpression)*;
	public AddExpressionElements getAddExpressionAccess() {
		return (pAddExpression != null) ? pAddExpression : (pAddExpression = new AddExpressionElements());
	}
	
	public ParserRule getAddExpressionRule() {
		return getAddExpressionAccess().getRule();
	}

	//OpAdd:
	//	"+";
	public OpAddElements getOpAddAccess() {
		return (pOpAdd != null) ? pOpAdd : (pOpAdd = new OpAddElements());
	}
	
	public ParserRule getOpAddRule() {
		return getOpAddAccess().getRule();
	}

	//SubtractExpression returns Expression:
	//	MultiplyExpression (=> ({Operation.left=current} feature=OpSubtract) right=MultiplyExpression)*;
	public SubtractExpressionElements getSubtractExpressionAccess() {
		return (pSubtractExpression != null) ? pSubtractExpression : (pSubtractExpression = new SubtractExpressionElements());
	}
	
	public ParserRule getSubtractExpressionRule() {
		return getSubtractExpressionAccess().getRule();
	}

	//OpSubtract:
	//	"-";
	public OpSubtractElements getOpSubtractAccess() {
		return (pOpSubtract != null) ? pOpSubtract : (pOpSubtract = new OpSubtractElements());
	}
	
	public ParserRule getOpSubtractRule() {
		return getOpSubtractAccess().getRule();
	}

	//MultiplyExpression returns Expression:
	//	DivideExpression (=> ({Operation.left=current} feature=OpMultiply) right=DivideExpression)*;
	public MultiplyExpressionElements getMultiplyExpressionAccess() {
		return (pMultiplyExpression != null) ? pMultiplyExpression : (pMultiplyExpression = new MultiplyExpressionElements());
	}
	
	public ParserRule getMultiplyExpressionRule() {
		return getMultiplyExpressionAccess().getRule();
	}

	//OpMultiply:
	//	"*";
	public OpMultiplyElements getOpMultiplyAccess() {
		return (pOpMultiply != null) ? pOpMultiply : (pOpMultiply = new OpMultiplyElements());
	}
	
	public ParserRule getOpMultiplyRule() {
		return getOpMultiplyAccess().getRule();
	}

	//DivideExpression returns Expression:
	//	ModuloExpression (=> ({Operation.left=current} feature=OpDivide) right=ModuloExpression)*;
	public DivideExpressionElements getDivideExpressionAccess() {
		return (pDivideExpression != null) ? pDivideExpression : (pDivideExpression = new DivideExpressionElements());
	}
	
	public ParserRule getDivideExpressionRule() {
		return getDivideExpressionAccess().getRule();
	}

	//OpDivide:
	//	"/";
	public OpDivideElements getOpDivideAccess() {
		return (pOpDivide != null) ? pOpDivide : (pOpDivide = new OpDivideElements());
	}
	
	public ParserRule getOpDivideRule() {
		return getOpDivideAccess().getRule();
	}

	//ModuloExpression returns Expression:
	//	UnaryOperation (=> ({Operation.left=current} feature=OpModulo) right=UnaryOperation)*;
	public ModuloExpressionElements getModuloExpressionAccess() {
		return (pModuloExpression != null) ? pModuloExpression : (pModuloExpression = new ModuloExpressionElements());
	}
	
	public ParserRule getModuloExpressionRule() {
		return getModuloExpressionAccess().getRule();
	}

	//OpModulo:
	//	"%";
	public OpModuloElements getOpModuloAccess() {
		return (pOpModulo != null) ? pOpModulo : (pOpModulo = new OpModuloElements());
	}
	
	public ParserRule getOpModuloRule() {
		return getOpModuloAccess().getRule();
	}

	//UnaryOperation returns Expression:
	//	{UnaryOperation} feature=OpUnary operand=PreIncrementOperation | PreIncrementOperation;
	public UnaryOperationElements getUnaryOperationAccess() {
		return (pUnaryOperation != null) ? pUnaryOperation : (pUnaryOperation = new UnaryOperationElements());
	}
	
	public ParserRule getUnaryOperationRule() {
		return getUnaryOperationAccess().getRule();
	}

	//OpUnary:
	//	"!" | "-" | "~";
	public OpUnaryElements getOpUnaryAccess() {
		return (pOpUnary != null) ? pOpUnary : (pOpUnary = new OpUnaryElements());
	}
	
	public ParserRule getOpUnaryRule() {
		return getOpUnaryAccess().getRule();
	}

	//PreIncrementOperation returns Expression:
	//	=> ({PreIncrementOperation} feature=OpIncrement operand=PostIncrementOperation) | PostIncrementOperation;
	public PreIncrementOperationElements getPreIncrementOperationAccess() {
		return (pPreIncrementOperation != null) ? pPreIncrementOperation : (pPreIncrementOperation = new PreIncrementOperationElements());
	}
	
	public ParserRule getPreIncrementOperationRule() {
		return getPreIncrementOperationAccess().getRule();
	}

	//PostIncrementOperation returns Expression:
	//	=> ({PostIncrementOperation} operand=MemberFeatureCall feature=OpIncrement) | MemberFeatureCall;
	public PostIncrementOperationElements getPostIncrementOperationAccess() {
		return (pPostIncrementOperation != null) ? pPostIncrementOperation : (pPostIncrementOperation = new PostIncrementOperationElements());
	}
	
	public ParserRule getPostIncrementOperationRule() {
		return getPostIncrementOperationAccess().getRule();
	}

	//OpIncrement:
	//	"++" | "--";
	public OpIncrementElements getOpIncrementAccess() {
		return (pOpIncrement != null) ? pOpIncrement : (pOpIncrement = new OpIncrementElements());
	}
	
	public ParserRule getOpIncrementRule() {
		return getOpIncrementAccess().getRule();
	}

	/// **********************
	// * EXPRESSIONS - OTHER
	// * / MemberFeatureCall returns Expression:
	//	PrimaryExpression (=> ({Assignment.assignable=current} "." feature=[Feature|FeatureID] OpSingleAssign)
	//	value=Assignment | => ({ArrayAssignment.assigname=current} "[" feature=Expression "]" OpSingleAssign) value=Assignment
	//	| => ({MemberFeatureCall.target=current} ".") feature=[Feature|FeatureID] (=> explicitOperationCall?="("
	//	(arguments+=Expression ("," arguments+=Expression)*)? ")")? | => ({ArrayAccess.target=current}) "[" feature=Expression
	//	"]" (=> explicitOperationCall?="(" (arguments+=Expression ("," arguments+=Expression)*)? ")")?)*;
	public MemberFeatureCallElements getMemberFeatureCallAccess() {
		return (pMemberFeatureCall != null) ? pMemberFeatureCall : (pMemberFeatureCall = new MemberFeatureCallElements());
	}
	
	public ParserRule getMemberFeatureCallRule() {
		return getMemberFeatureCallAccess().getRule();
	}

	//PrimaryExpression returns Expression:
	//	BlockExpression | ParenthesizedExpression | IfExpression | WhileExpression | DoWhileExpression | ForLoopExpression |
	//	ReturnExpression | BreakExpression | ContinueExpression | ThrowExpression | TryCatchExpression | SwitchExpression |
	//	FunctionExpression | FeatureCall | ConstructorCall | Literal;
	public PrimaryExpressionElements getPrimaryExpressionAccess() {
		return (pPrimaryExpression != null) ? pPrimaryExpression : (pPrimaryExpression = new PrimaryExpressionElements());
	}
	
	public ParserRule getPrimaryExpressionRule() {
		return getPrimaryExpressionAccess().getRule();
	}

	//BlockExpression returns Expression:
	//	{BlockExpression} "{" (expressions+=ExpressionInsideBlock ";"?)* "}";
	public BlockExpressionElements getBlockExpressionAccess() {
		return (pBlockExpression != null) ? pBlockExpression : (pBlockExpression = new BlockExpressionElements());
	}
	
	public ParserRule getBlockExpressionRule() {
		return getBlockExpressionAccess().getRule();
	}

	//ExpressionInsideBlock returns Expression:
	//	VariableDeclarations | Expression;
	public ExpressionInsideBlockElements getExpressionInsideBlockAccess() {
		return (pExpressionInsideBlock != null) ? pExpressionInsideBlock : (pExpressionInsideBlock = new ExpressionInsideBlockElements());
	}
	
	public ParserRule getExpressionInsideBlockRule() {
		return getExpressionInsideBlockAccess().getRule();
	}

	//VariableDeclarations returns Expression:
	//	{VariableDeclarations} "var" declarations+=VariableDeclaration ("," declarations+=VariableDeclaration)*;
	public VariableDeclarationsElements getVariableDeclarationsAccess() {
		return (pVariableDeclarations != null) ? pVariableDeclarations : (pVariableDeclarations = new VariableDeclarationsElements());
	}
	
	public ParserRule getVariableDeclarationsRule() {
		return getVariableDeclarationsAccess().getRule();
	}

	//VariableDeclaration:
	//	{VariableDeclaration} name=ValidID (":" type=TypeReference)? ("=" expression=Expression)?;
	public VariableDeclarationElements getVariableDeclarationAccess() {
		return (pVariableDeclaration != null) ? pVariableDeclaration : (pVariableDeclaration = new VariableDeclarationElements());
	}
	
	public ParserRule getVariableDeclarationRule() {
		return getVariableDeclarationAccess().getRule();
	}

	//ParenthesizedExpression returns Expression:
	//	"(" Expression ")";
	public ParenthesizedExpressionElements getParenthesizedExpressionAccess() {
		return (pParenthesizedExpression != null) ? pParenthesizedExpression : (pParenthesizedExpression = new ParenthesizedExpressionElements());
	}
	
	public ParserRule getParenthesizedExpressionRule() {
		return getParenthesizedExpressionAccess().getRule();
	}

	//FunctionExpression returns Expression:
	//	{FunctionExpression} "function" "(" (parameters+=OptionalParameter ("," parameters+=OptionalParameter)*)? ")" (":"
	//	returnType=TypeReference)? body=BlockExpression;
	public FunctionExpressionElements getFunctionExpressionAccess() {
		return (pFunctionExpression != null) ? pFunctionExpression : (pFunctionExpression = new FunctionExpressionElements());
	}
	
	public ParserRule getFunctionExpressionRule() {
		return getFunctionExpressionAccess().getRule();
	}

	//FeatureCall returns Expression:
	//	{FeatureCall} feature=[Feature|FeatureID] (=> explicitOperationCall?="(" arguments+=Expression? (","
	//	arguments+=Expression)* ")")?;
	public FeatureCallElements getFeatureCallAccess() {
		return (pFeatureCall != null) ? pFeatureCall : (pFeatureCall = new FeatureCallElements());
	}
	
	public ParserRule getFeatureCallRule() {
		return getFeatureCallAccess().getRule();
	}

	//ConstructorCall returns Expression:
	//	{ConstructorCall} "new" constructor=ParameterizedTypeReference "(" arguments+=Expression? ("," arguments+=Expression)*
	//	")";
	public ConstructorCallElements getConstructorCallAccess() {
		return (pConstructorCall != null) ? pConstructorCall : (pConstructorCall = new ConstructorCallElements());
	}
	
	public ParserRule getConstructorCallRule() {
		return getConstructorCallAccess().getRule();
	}

	/// **********************
	// * EXPRESSIONS - CONTROL FLOW
	// * / IfExpression returns Expression:
	//	{IfExpression} "if" "(" if=Expression ")" then=Expression => (";"? "else" else=Expression)?;
	public IfExpressionElements getIfExpressionAccess() {
		return (pIfExpression != null) ? pIfExpression : (pIfExpression = new IfExpressionElements());
	}
	
	public ParserRule getIfExpressionRule() {
		return getIfExpressionAccess().getRule();
	}

	//WhileExpression returns Expression:
	//	{WhileExpression} "while" "(" predicate=Expression ")" body=Expression;
	public WhileExpressionElements getWhileExpressionAccess() {
		return (pWhileExpression != null) ? pWhileExpression : (pWhileExpression = new WhileExpressionElements());
	}
	
	public ParserRule getWhileExpressionRule() {
		return getWhileExpressionAccess().getRule();
	}

	//DoWhileExpression returns Expression:
	//	{DoWhileExpression} "do" body=Expression "while" "(" predicate=Expression ")";
	public DoWhileExpressionElements getDoWhileExpressionAccess() {
		return (pDoWhileExpression != null) ? pDoWhileExpression : (pDoWhileExpression = new DoWhileExpressionElements());
	}
	
	public ParserRule getDoWhileExpressionRule() {
		return getDoWhileExpressionAccess().getRule();
	}

	//ForLoopExpression returns Expression:
	//	{ForLoopExpression} => ("for" "(" declaredParam=Parameter "in" forExpression=Expression ")") body=Expression;
	public ForLoopExpressionElements getForLoopExpressionAccess() {
		return (pForLoopExpression != null) ? pForLoopExpression : (pForLoopExpression = new ForLoopExpressionElements());
	}
	
	public ParserRule getForLoopExpressionRule() {
		return getForLoopExpressionAccess().getRule();
	}

	//TryCatchExpression returns Expression:
	//	{TryCatchExpression} "try" expression=Expression catchClauses+=CatchClause+;
	public TryCatchExpressionElements getTryCatchExpressionAccess() {
		return (pTryCatchExpression != null) ? pTryCatchExpression : (pTryCatchExpression = new TryCatchExpressionElements());
	}
	
	public ParserRule getTryCatchExpressionRule() {
		return getTryCatchExpressionAccess().getRule();
	}

	//CatchClause:
	//	"catch" "(" declaredParam=Parameter ")" expression=Expression;
	public CatchClauseElements getCatchClauseAccess() {
		return (pCatchClause != null) ? pCatchClause : (pCatchClause = new CatchClauseElements());
	}
	
	public ParserRule getCatchClauseRule() {
		return getCatchClauseAccess().getRule();
	}

	//SwitchExpression returns Expression:
	//	{SwitchExpression} "switch" switch=Expression "{" cases+=CasePart+ ("default" ":" default=CasePartExpressions)? "}";
	public SwitchExpressionElements getSwitchExpressionAccess() {
		return (pSwitchExpression != null) ? pSwitchExpression : (pSwitchExpression = new SwitchExpressionElements());
	}
	
	public ParserRule getSwitchExpressionRule() {
		return getSwitchExpressionAccess().getRule();
	}

	//CasePart:
	//	"case" cases+=Expression ("," cases+=Expression)? ":" then=CasePartExpressions;
	public CasePartElements getCasePartAccess() {
		return (pCasePart != null) ? pCasePart : (pCasePart = new CasePartElements());
	}
	
	public ParserRule getCasePartRule() {
		return getCasePartAccess().getRule();
	}

	//CasePartExpressions:
	//	{CasePartExpressions} (expressions+=ExpressionInsideBlock ";"?)*;
	public CasePartExpressionsElements getCasePartExpressionsAccess() {
		return (pCasePartExpressions != null) ? pCasePartExpressions : (pCasePartExpressions = new CasePartExpressionsElements());
	}
	
	public ParserRule getCasePartExpressionsRule() {
		return getCasePartExpressionsAccess().getRule();
	}

	//ReturnExpression returns Expression:
	//	{ReturnExpression} "return" => expression=Expression?;
	public ReturnExpressionElements getReturnExpressionAccess() {
		return (pReturnExpression != null) ? pReturnExpression : (pReturnExpression = new ReturnExpressionElements());
	}
	
	public ParserRule getReturnExpressionRule() {
		return getReturnExpressionAccess().getRule();
	}

	//BreakExpression returns Expression:
	//	{BreakExpression} "break";
	public BreakExpressionElements getBreakExpressionAccess() {
		return (pBreakExpression != null) ? pBreakExpression : (pBreakExpression = new BreakExpressionElements());
	}
	
	public ParserRule getBreakExpressionRule() {
		return getBreakExpressionAccess().getRule();
	}

	//ContinueExpression returns Expression:
	//	{BreakExpression} "continue";
	public ContinueExpressionElements getContinueExpressionAccess() {
		return (pContinueExpression != null) ? pContinueExpression : (pContinueExpression = new ContinueExpressionElements());
	}
	
	public ParserRule getContinueExpressionRule() {
		return getContinueExpressionAccess().getRule();
	}

	//ThrowExpression returns Expression:
	//	{ThrowExpression} "throw" expression=Expression;
	public ThrowExpressionElements getThrowExpressionAccess() {
		return (pThrowExpression != null) ? pThrowExpression : (pThrowExpression = new ThrowExpressionElements());
	}
	
	public ParserRule getThrowExpressionRule() {
		return getThrowExpressionAccess().getRule();
	}

	/// **********************
	// * EXPRESSIONS - LITERALS
	// * / Literal returns Expression:
	//	NullLiteral | StringLiteral | NumberLiteral | RegularExpressionLiteral | ArrayLiteral | ObjectLiteral;
	public LiteralElements getLiteralAccess() {
		return (pLiteral != null) ? pLiteral : (pLiteral = new LiteralElements());
	}
	
	public ParserRule getLiteralRule() {
		return getLiteralAccess().getRule();
	}

	//NullLiteral returns Expression:
	//	{NullLiteral} "null";
	public NullLiteralElements getNullLiteralAccess() {
		return (pNullLiteral != null) ? pNullLiteral : (pNullLiteral = new NullLiteralElements());
	}
	
	public ParserRule getNullLiteralRule() {
		return getNullLiteralAccess().getRule();
	}

	//NumberLiteral returns Expression:
	//	{NumberLiteral} value=Number;
	public NumberLiteralElements getNumberLiteralAccess() {
		return (pNumberLiteral != null) ? pNumberLiteral : (pNumberLiteral = new NumberLiteralElements());
	}
	
	public ParserRule getNumberLiteralRule() {
		return getNumberLiteralAccess().getRule();
	}

	//Number hidden():
	//	=> (INT? "." (INT | EXPONENT_FLOAT)) | HEX | EXPONENT_FLOAT | INT;
	public NumberElements getNumberAccess() {
		return (pNumber != null) ? pNumber : (pNumber = new NumberElements());
	}
	
	public ParserRule getNumberRule() {
		return getNumberAccess().getRule();
	}

	//StringLiteral returns Expression:
	//	{StringLiteral} value=STRING;
	public StringLiteralElements getStringLiteralAccess() {
		return (pStringLiteral != null) ? pStringLiteral : (pStringLiteral = new StringLiteralElements());
	}
	
	public ParserRule getStringLiteralRule() {
		return getStringLiteralAccess().getRule();
	}

	//RegularExpressionLiteral returns Expression:
	//	{RegularExpressionLiteral} value=REGULAR_EXPRESSION;
	public RegularExpressionLiteralElements getRegularExpressionLiteralAccess() {
		return (pRegularExpressionLiteral != null) ? pRegularExpressionLiteral : (pRegularExpressionLiteral = new RegularExpressionLiteralElements());
	}
	
	public ParserRule getRegularExpressionLiteralRule() {
		return getRegularExpressionLiteralAccess().getRule();
	}

	//ArrayLiteral returns Expression:
	//	{ArrayLiteral} "[" elements+=Expression? ("," elements+=Expression)* "]";
	public ArrayLiteralElements getArrayLiteralAccess() {
		return (pArrayLiteral != null) ? pArrayLiteral : (pArrayLiteral = new ArrayLiteralElements());
	}
	
	public ParserRule getArrayLiteralRule() {
		return getArrayLiteralAccess().getRule();
	}

	//ObjectLiteral returns Expression:
	//	{ObjectLiteral} "{" elements+=ObjectElement ("," elements+=ObjectElement)* "}";
	public ObjectLiteralElements getObjectLiteralAccess() {
		return (pObjectLiteral != null) ? pObjectLiteral : (pObjectLiteral = new ObjectLiteralElements());
	}
	
	public ParserRule getObjectLiteralRule() {
		return getObjectLiteralAccess().getRule();
	}

	//ObjectElement:
	//	key=ValidID ":" value=Expression;
	public ObjectElementElements getObjectElementAccess() {
		return (pObjectElement != null) ? pObjectElement : (pObjectElement = new ObjectElementElements());
	}
	
	public ParserRule getObjectElementRule() {
		return getObjectElementAccess().getRule();
	}

	/// **********************
	// * NAMES AND IDS
	// * / QualifiedNameWithWildcard:
	//	QualifiedName ".*"?;
	public QualifiedNameWithWildcardElements getQualifiedNameWithWildcardAccess() {
		return (pQualifiedNameWithWildcard != null) ? pQualifiedNameWithWildcard : (pQualifiedNameWithWildcard = new QualifiedNameWithWildcardElements());
	}
	
	public ParserRule getQualifiedNameWithWildcardRule() {
		return getQualifiedNameWithWildcardAccess().getRule();
	}

	//QualifiedName:
	//	ValidID ("." ValidID)*;
	public QualifiedNameElements getQualifiedNameAccess() {
		return (pQualifiedName != null) ? pQualifiedName : (pQualifiedName = new QualifiedNameElements());
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	//ValidID:
	//	ID;
	public ValidIDElements getValidIDAccess() {
		return (pValidID != null) ? pValidID : (pValidID = new ValidIDElements());
	}
	
	public ParserRule getValidIDRule() {
		return getValidIDAccess().getRule();
	}

	//FeatureID:
	//	ValidID | "super" | "this";
	public FeatureIDElements getFeatureIDAccess() {
		return (pFeatureID != null) ? pFeatureID : (pFeatureID = new FeatureIDElements());
	}
	
	public ParserRule getFeatureIDRule() {
		return getFeatureIDAccess().getRule();
	}

	/// **********************
	// * TERMINALS
	// * / terminal ID:
	//	("a".."z" | "A".."Z" | "$" | "_") ("a".."z" | "A".."Z" | "$" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return (tID != null) ? tID : (tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ID"));
	} 

	//// The hex and exponent float terminals are needed because we would otherwise get INT and ID
	//terminal EXPONENT_FLOAT:
	//	INT EXPONENT;
	public TerminalRule getEXPONENT_FLOATRule() {
		return (tEXPONENT_FLOAT != null) ? tEXPONENT_FLOAT : (tEXPONENT_FLOAT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "EXPONENT_FLOAT"));
	} 

	//terminal fragment EXPONENT:
	//	("e" | "E") ("+" | "-")? INT;
	public TerminalRule getEXPONENTRule() {
		return (tEXPONENT != null) ? tEXPONENT : (tEXPONENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "EXPONENT"));
	} 

	//terminal HEX returns ecore::EInt:
	//	"0" ("x" | "X") HEX_DIGIT+;
	public TerminalRule getHEXRule() {
		return (tHEX != null) ? tHEX : (tHEX = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "HEX"));
	} 

	//terminal fragment HEX_DIGIT:
	//	"0".."9" | "a".."f" | "A".."F";
	public TerminalRule getHEX_DIGITRule() {
		return (tHEX_DIGIT != null) ? tHEX_DIGIT : (tHEX_DIGIT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "HEX_DIGIT"));
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return (tINT != null) ? tINT : (tINT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "INT"));
	} 

	//terminal REGULAR_EXPRESSION:
	//	"~/" ("\\/" | !"/")+ "/" ("i" | "g" | "m" | "s" | "u")*;
	public TerminalRule getREGULAR_EXPRESSIONRule() {
		return (tREGULAR_EXPRESSION != null) ? tREGULAR_EXPRESSION : (tREGULAR_EXPRESSION = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "REGULAR_EXPRESSION"));
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return (tSTRING != null) ? tSTRING : (tSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "STRING"));
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return (tML_COMMENT != null) ? tML_COMMENT : (tML_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ML_COMMENT"));
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return (tSL_COMMENT != null) ? tSL_COMMENT : (tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SL_COMMENT"));
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return (tWS != null) ? tWS : (tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "WS"));
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return (tANY_OTHER != null) ? tANY_OTHER : (tANY_OTHER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ANY_OTHER"));
	} 
}
