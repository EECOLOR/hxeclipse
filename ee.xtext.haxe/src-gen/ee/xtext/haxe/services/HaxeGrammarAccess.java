/*
* generated by Xtext
*/

package ee.xtext.haxe.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;


@Singleton
public class HaxeGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class FileElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "File");
		private final Assignment cBlockExpressionAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cBlockExpressionBlockExpressionParserRuleCall_0 = (RuleCall)cBlockExpressionAssignment.eContents().get(0);
		
		//File:
		//	blockExpression+=BlockExpression*;
		public ParserRule getRule() { return rule; }

		//blockExpression+=BlockExpression*
		public Assignment getBlockExpressionAssignment() { return cBlockExpressionAssignment; }

		//BlockExpression
		public RuleCall getBlockExpressionBlockExpressionParserRuleCall_0() { return cBlockExpressionBlockExpressionParserRuleCall_0; }
	}

	public class TypeReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TypeReference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeQualifiedNameParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLessThanSignKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cArgumentsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cArgumentsTypeReferenceParserRuleCall_1_1_0 = (RuleCall)cArgumentsAssignment_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cCommaKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cArgumentsAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cArgumentsTypeReferenceParserRuleCall_1_2_1_0 = (RuleCall)cArgumentsAssignment_1_2_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		
		//TypeReference:
		//	type=QualifiedName ("<" arguments+=TypeReference ("," arguments+=TypeReference)* ">")?;
		public ParserRule getRule() { return rule; }

		//type=QualifiedName ("<" arguments+=TypeReference ("," arguments+=TypeReference)* ">")?
		public Group getGroup() { return cGroup; }

		//type=QualifiedName
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//QualifiedName
		public RuleCall getTypeQualifiedNameParserRuleCall_0_0() { return cTypeQualifiedNameParserRuleCall_0_0; }

		//(=> "<" arguments+=TypeReference ("," arguments+=TypeReference)* ">")?
		public Group getGroup_1() { return cGroup_1; }

		//=> "<"
		public Keyword getLessThanSignKeyword_1_0() { return cLessThanSignKeyword_1_0; }

		//arguments+=TypeReference
		public Assignment getArgumentsAssignment_1_1() { return cArgumentsAssignment_1_1; }

		//TypeReference
		public RuleCall getArgumentsTypeReferenceParserRuleCall_1_1_0() { return cArgumentsTypeReferenceParserRuleCall_1_1_0; }

		//("," arguments+=TypeReference)*
		public Group getGroup_1_2() { return cGroup_1_2; }

		//","
		public Keyword getCommaKeyword_1_2_0() { return cCommaKeyword_1_2_0; }

		//arguments+=TypeReference
		public Assignment getArgumentsAssignment_1_2_1() { return cArgumentsAssignment_1_2_1; }

		//TypeReference
		public RuleCall getArgumentsTypeReferenceParserRuleCall_1_2_1_0() { return cArgumentsTypeReferenceParserRuleCall_1_2_1_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_1_3() { return cGreaterThanSignKeyword_1_3; }
	}

	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Expression");
		private final RuleCall cAssignmentParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Expression:
		//	Assignment;
		public ParserRule getRule() { return rule; }

		//Assignment
		public RuleCall getAssignmentParserRuleCall() { return cAssignmentParserRuleCall; }
	}

	public class AssignmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Assignment");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cAssignmentAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cFeatureAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final CrossReference cFeatureFeatureCrossReference_0_1_0 = (CrossReference)cFeatureAssignment_0_1.eContents().get(0);
		private final RuleCall cFeatureFeatureIdOrSuperParserRuleCall_0_1_0_1 = (RuleCall)cFeatureFeatureCrossReference_0_1_0.eContents().get(1);
		private final RuleCall cOpSingleAssignParserRuleCall_0_2 = (RuleCall)cGroup_0.eContents().get(2);
		private final Assignment cValueAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cValueAssignmentParserRuleCall_0_3_0 = (RuleCall)cValueAssignment_0_3.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cOrExpressionParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Group cGroup_1_1_0 = (Group)cGroup_1_1.eContents().get(0);
		private final Group cGroup_1_1_0_0 = (Group)cGroup_1_1_0.eContents().get(0);
		private final Action cOperationLeftAction_1_1_0_0_0 = (Action)cGroup_1_1_0_0.eContents().get(0);
		private final Assignment cFeatureAssignment_1_1_0_0_1 = (Assignment)cGroup_1_1_0_0.eContents().get(1);
		private final RuleCall cFeatureOpMultiAssignParserRuleCall_1_1_0_0_1_0 = (RuleCall)cFeatureAssignment_1_1_0_0_1.eContents().get(0);
		private final Assignment cRightAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cRightAssignmentParserRuleCall_1_1_1_0 = (RuleCall)cRightAssignment_1_1_1.eContents().get(0);
		
		//Assignment returns Expression:
		//	{Assignment} feature=[Feature|IdOrSuper] OpSingleAssign value=Assignment | OrExpression (=> ({Operation.left=current}
		//	feature=OpMultiAssign) right=Assignment)?;
		public ParserRule getRule() { return rule; }

		//{Assignment} feature=[Feature|IdOrSuper] OpSingleAssign value=Assignment | OrExpression (=> ({Operation.left=current}
		//feature=OpMultiAssign) right=Assignment)?
		public Alternatives getAlternatives() { return cAlternatives; }

		//{Assignment} feature=[Feature|IdOrSuper] OpSingleAssign value=Assignment
		public Group getGroup_0() { return cGroup_0; }

		//{Assignment}
		public Action getAssignmentAction_0_0() { return cAssignmentAction_0_0; }

		//feature=[Feature|IdOrSuper]
		public Assignment getFeatureAssignment_0_1() { return cFeatureAssignment_0_1; }

		//[Feature|IdOrSuper]
		public CrossReference getFeatureFeatureCrossReference_0_1_0() { return cFeatureFeatureCrossReference_0_1_0; }

		//IdOrSuper
		public RuleCall getFeatureFeatureIdOrSuperParserRuleCall_0_1_0_1() { return cFeatureFeatureIdOrSuperParserRuleCall_0_1_0_1; }

		//OpSingleAssign
		public RuleCall getOpSingleAssignParserRuleCall_0_2() { return cOpSingleAssignParserRuleCall_0_2; }

		//value=Assignment
		public Assignment getValueAssignment_0_3() { return cValueAssignment_0_3; }

		//Assignment
		public RuleCall getValueAssignmentParserRuleCall_0_3_0() { return cValueAssignmentParserRuleCall_0_3_0; }

		//OrExpression (=> ({Operation.left=current} feature=OpMultiAssign) right=Assignment)?
		public Group getGroup_1() { return cGroup_1; }

		//OrExpression
		public RuleCall getOrExpressionParserRuleCall_1_0() { return cOrExpressionParserRuleCall_1_0; }

		//(=> ({Operation.left=current} feature=OpMultiAssign) right=Assignment)?
		public Group getGroup_1_1() { return cGroup_1_1; }

		//=> ({Operation.left=current} feature=OpMultiAssign)
		public Group getGroup_1_1_0() { return cGroup_1_1_0; }

		//{Operation.left=current} feature=OpMultiAssign
		public Group getGroup_1_1_0_0() { return cGroup_1_1_0_0; }

		//{Operation.left=current}
		public Action getOperationLeftAction_1_1_0_0_0() { return cOperationLeftAction_1_1_0_0_0; }

		//feature=OpMultiAssign
		public Assignment getFeatureAssignment_1_1_0_0_1() { return cFeatureAssignment_1_1_0_0_1; }

		//OpMultiAssign
		public RuleCall getFeatureOpMultiAssignParserRuleCall_1_1_0_0_1_0() { return cFeatureOpMultiAssignParserRuleCall_1_1_0_0_1_0; }

		//right=Assignment
		public Assignment getRightAssignment_1_1_1() { return cRightAssignment_1_1_1; }

		//Assignment
		public RuleCall getRightAssignmentParserRuleCall_1_1_1_0() { return cRightAssignmentParserRuleCall_1_1_1_0; }
	}

	public class OpSingleAssignElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OpSingleAssign");
		private final Keyword cEqualsSignKeyword = (Keyword)rule.eContents().get(1);
		
		//OpSingleAssign:
		//	"=";
		public ParserRule getRule() { return rule; }

		//"="
		public Keyword getEqualsSignKeyword() { return cEqualsSignKeyword; }
	}

	public class OpMultiAssignElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OpMultiAssign");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cPlusSignEqualsSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cHyphenMinusEqualsSignKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cAsteriskEqualsSignKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cSolidusEqualsSignKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cPercentSignEqualsSignKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cAmpersandEqualsSignKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cVerticalLineEqualsSignKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cCircumflexAccentEqualsSignKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final Keyword cLessThanSignLessThanSignEqualsSignKeyword_8 = (Keyword)cAlternatives.eContents().get(8);
		private final Keyword cGreaterThanSignGreaterThanSignEqualsSignKeyword_9 = (Keyword)cAlternatives.eContents().get(9);
		private final Keyword cGreaterThanSignGreaterThanSignGreaterThanSignEqualsSignKeyword_10 = (Keyword)cAlternatives.eContents().get(10);
		
		//OpMultiAssign:
		//	"+=" | "-=" | "*=" | "/=" | "%=" | "&=" | "|=" | "^=" | "<<=" | ">>=" | ">>>=";
		public ParserRule getRule() { return rule; }

		//"+=" | "-=" | "*=" | "/=" | "%=" | "&=" | "|=" | "^=" | "<<=" | ">>=" | ">>>="
		public Alternatives getAlternatives() { return cAlternatives; }

		//"+="
		public Keyword getPlusSignEqualsSignKeyword_0() { return cPlusSignEqualsSignKeyword_0; }

		//"-="
		public Keyword getHyphenMinusEqualsSignKeyword_1() { return cHyphenMinusEqualsSignKeyword_1; }

		//"*="
		public Keyword getAsteriskEqualsSignKeyword_2() { return cAsteriskEqualsSignKeyword_2; }

		//"/="
		public Keyword getSolidusEqualsSignKeyword_3() { return cSolidusEqualsSignKeyword_3; }

		//"%="
		public Keyword getPercentSignEqualsSignKeyword_4() { return cPercentSignEqualsSignKeyword_4; }

		//"&="
		public Keyword getAmpersandEqualsSignKeyword_5() { return cAmpersandEqualsSignKeyword_5; }

		//"|="
		public Keyword getVerticalLineEqualsSignKeyword_6() { return cVerticalLineEqualsSignKeyword_6; }

		//"^="
		public Keyword getCircumflexAccentEqualsSignKeyword_7() { return cCircumflexAccentEqualsSignKeyword_7; }

		//"<<="
		public Keyword getLessThanSignLessThanSignEqualsSignKeyword_8() { return cLessThanSignLessThanSignEqualsSignKeyword_8; }

		//">>="
		public Keyword getGreaterThanSignGreaterThanSignEqualsSignKeyword_9() { return cGreaterThanSignGreaterThanSignEqualsSignKeyword_9; }

		//">>>="
		public Keyword getGreaterThanSignGreaterThanSignGreaterThanSignEqualsSignKeyword_10() { return cGreaterThanSignGreaterThanSignGreaterThanSignEqualsSignKeyword_10; }
	}

	public class OrExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OrExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAndExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cOperationLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Assignment cFeatureAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final RuleCall cFeatureOpOrParserRuleCall_1_0_0_1_0 = (RuleCall)cFeatureAssignment_1_0_0_1.eContents().get(0);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightAndExpressionParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//OrExpression returns Expression:
		//	AndExpression (=> ({Operation.left=current} feature=OpOr) right=AndExpression)*;
		public ParserRule getRule() { return rule; }

		//AndExpression (=> ({Operation.left=current} feature=OpOr) right=AndExpression)*
		public Group getGroup() { return cGroup; }

		//AndExpression
		public RuleCall getAndExpressionParserRuleCall_0() { return cAndExpressionParserRuleCall_0; }

		//(=> ({Operation.left=current} feature=OpOr) right=AndExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//=> ({Operation.left=current} feature=OpOr)
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{Operation.left=current} feature=OpOr
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{Operation.left=current}
		public Action getOperationLeftAction_1_0_0_0() { return cOperationLeftAction_1_0_0_0; }

		//feature=OpOr
		public Assignment getFeatureAssignment_1_0_0_1() { return cFeatureAssignment_1_0_0_1; }

		//OpOr
		public RuleCall getFeatureOpOrParserRuleCall_1_0_0_1_0() { return cFeatureOpOrParserRuleCall_1_0_0_1_0; }

		//right=AndExpression
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//AndExpression
		public RuleCall getRightAndExpressionParserRuleCall_1_1_0() { return cRightAndExpressionParserRuleCall_1_1_0; }
	}

	public class OpOrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OpOr");
		private final Keyword cVerticalLineVerticalLineKeyword = (Keyword)rule.eContents().get(1);
		
		//OpOr:
		//	"||";
		public ParserRule getRule() { return rule; }

		//"||"
		public Keyword getVerticalLineVerticalLineKeyword() { return cVerticalLineVerticalLineKeyword; }
	}

	public class AndExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AndExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cOtherOperatorExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cOperationLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Assignment cFeatureAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final RuleCall cFeatureOpAndParserRuleCall_1_0_0_1_0 = (RuleCall)cFeatureAssignment_1_0_0_1.eContents().get(0);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightOtherOperatorExpressionParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//AndExpression returns Expression:
		//	OtherOperatorExpression (=> ({Operation.left=current} feature=OpAnd) right=OtherOperatorExpression)*;
		public ParserRule getRule() { return rule; }

		//OtherOperatorExpression (=> ({Operation.left=current} feature=OpAnd) right=OtherOperatorExpression)*
		public Group getGroup() { return cGroup; }

		//OtherOperatorExpression
		public RuleCall getOtherOperatorExpressionParserRuleCall_0() { return cOtherOperatorExpressionParserRuleCall_0; }

		//(=> ({Operation.left=current} feature=OpAnd) right=OtherOperatorExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//=> ({Operation.left=current} feature=OpAnd)
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{Operation.left=current} feature=OpAnd
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{Operation.left=current}
		public Action getOperationLeftAction_1_0_0_0() { return cOperationLeftAction_1_0_0_0; }

		//feature=OpAnd
		public Assignment getFeatureAssignment_1_0_0_1() { return cFeatureAssignment_1_0_0_1; }

		//OpAnd
		public RuleCall getFeatureOpAndParserRuleCall_1_0_0_1_0() { return cFeatureOpAndParserRuleCall_1_0_0_1_0; }

		//right=OtherOperatorExpression
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//OtherOperatorExpression
		public RuleCall getRightOtherOperatorExpressionParserRuleCall_1_1_0() { return cRightOtherOperatorExpressionParserRuleCall_1_1_0; }
	}

	public class OpAndElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OpAnd");
		private final Keyword cAmpersandAmpersandKeyword = (Keyword)rule.eContents().get(1);
		
		//OpAnd:
		//	"&&";
		public ParserRule getRule() { return rule; }

		//"&&"
		public Keyword getAmpersandAmpersandKeyword() { return cAmpersandAmpersandKeyword; }
	}

	public class OtherOperatorExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OtherOperatorExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cCompareExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cOperationLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Assignment cFeatureAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final RuleCall cFeatureOpOtherParserRuleCall_1_0_0_1_0 = (RuleCall)cFeatureAssignment_1_0_0_1.eContents().get(0);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightCompareExpressionParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//OtherOperatorExpression returns Expression:
		//	CompareExpression (=> ({Operation.left=current} feature=OpOther) right=CompareExpression)*;
		public ParserRule getRule() { return rule; }

		//CompareExpression (=> ({Operation.left=current} feature=OpOther) right=CompareExpression)*
		public Group getGroup() { return cGroup; }

		//CompareExpression
		public RuleCall getCompareExpressionParserRuleCall_0() { return cCompareExpressionParserRuleCall_0; }

		//(=> ({Operation.left=current} feature=OpOther) right=CompareExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//=> ({Operation.left=current} feature=OpOther)
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{Operation.left=current} feature=OpOther
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{Operation.left=current}
		public Action getOperationLeftAction_1_0_0_0() { return cOperationLeftAction_1_0_0_0; }

		//feature=OpOther
		public Assignment getFeatureAssignment_1_0_0_1() { return cFeatureAssignment_1_0_0_1; }

		//OpOther
		public RuleCall getFeatureOpOtherParserRuleCall_1_0_0_1_0() { return cFeatureOpOtherParserRuleCall_1_0_0_1_0; }

		//right=CompareExpression
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//CompareExpression
		public RuleCall getRightCompareExpressionParserRuleCall_1_1_0() { return cRightCompareExpressionParserRuleCall_1_1_0; }
	}

	public class OpOtherElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OpOther");
		private final Keyword cFullStopFullStopFullStopKeyword = (Keyword)rule.eContents().get(1);
		
		//OpOther:
		//	"...";
		public ParserRule getRule() { return rule; }

		//"..."
		public Keyword getFullStopFullStopFullStopKeyword() { return cFullStopFullStopFullStopKeyword; }
	}

	public class CompareExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CompareExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cBitwiseExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cOperationLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Assignment cFeatureAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final RuleCall cFeatureOpCompareParserRuleCall_1_0_0_1_0 = (RuleCall)cFeatureAssignment_1_0_0_1.eContents().get(0);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightBitwiseExpressionParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//CompareExpression returns Expression:
		//	BitwiseExpression (=> ({Operation.left=current} feature=OpCompare) right=BitwiseExpression)*;
		public ParserRule getRule() { return rule; }

		//BitwiseExpression (=> ({Operation.left=current} feature=OpCompare) right=BitwiseExpression)*
		public Group getGroup() { return cGroup; }

		//BitwiseExpression
		public RuleCall getBitwiseExpressionParserRuleCall_0() { return cBitwiseExpressionParserRuleCall_0; }

		//(=> ({Operation.left=current} feature=OpCompare) right=BitwiseExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//=> ({Operation.left=current} feature=OpCompare)
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{Operation.left=current} feature=OpCompare
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{Operation.left=current}
		public Action getOperationLeftAction_1_0_0_0() { return cOperationLeftAction_1_0_0_0; }

		//feature=OpCompare
		public Assignment getFeatureAssignment_1_0_0_1() { return cFeatureAssignment_1_0_0_1; }

		//OpCompare
		public RuleCall getFeatureOpCompareParserRuleCall_1_0_0_1_0() { return cFeatureOpCompareParserRuleCall_1_0_0_1_0; }

		//right=BitwiseExpression
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//BitwiseExpression
		public RuleCall getRightBitwiseExpressionParserRuleCall_1_1_0() { return cRightBitwiseExpressionParserRuleCall_1_1_0; }
	}

	public class OpCompareElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OpCompare");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cEqualsSignEqualsSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cExclamationMarkEqualsSignKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cGreaterThanSignEqualsSignKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cLessThanSignEqualsSignKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cGreaterThanSignKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cLessThanSignKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		
		//OpCompare:
		//	"==" | "!=" | ">=" | "<=" | ">" | "<";
		public ParserRule getRule() { return rule; }

		//"==" | "!=" | ">=" | "<=" | ">" | "<"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"=="
		public Keyword getEqualsSignEqualsSignKeyword_0() { return cEqualsSignEqualsSignKeyword_0; }

		//"!="
		public Keyword getExclamationMarkEqualsSignKeyword_1() { return cExclamationMarkEqualsSignKeyword_1; }

		//">="
		public Keyword getGreaterThanSignEqualsSignKeyword_2() { return cGreaterThanSignEqualsSignKeyword_2; }

		//"<="
		public Keyword getLessThanSignEqualsSignKeyword_3() { return cLessThanSignEqualsSignKeyword_3; }

		//">"
		public Keyword getGreaterThanSignKeyword_4() { return cGreaterThanSignKeyword_4; }

		//"<"
		public Keyword getLessThanSignKeyword_5() { return cLessThanSignKeyword_5; }
	}

	public class BitwiseExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BitwiseExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cBitshiftExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cOperationLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Assignment cFeatureAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final RuleCall cFeatureOpBitwiseParserRuleCall_1_0_0_1_0 = (RuleCall)cFeatureAssignment_1_0_0_1.eContents().get(0);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightBitshiftExpressionParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//BitwiseExpression returns Expression:
		//	BitshiftExpression (=> ({Operation.left=current} feature=OpBitwise) right=BitshiftExpression)*;
		public ParserRule getRule() { return rule; }

		//BitshiftExpression (=> ({Operation.left=current} feature=OpBitwise) right=BitshiftExpression)*
		public Group getGroup() { return cGroup; }

		//BitshiftExpression
		public RuleCall getBitshiftExpressionParserRuleCall_0() { return cBitshiftExpressionParserRuleCall_0; }

		//(=> ({Operation.left=current} feature=OpBitwise) right=BitshiftExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//=> ({Operation.left=current} feature=OpBitwise)
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{Operation.left=current} feature=OpBitwise
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{Operation.left=current}
		public Action getOperationLeftAction_1_0_0_0() { return cOperationLeftAction_1_0_0_0; }

		//feature=OpBitwise
		public Assignment getFeatureAssignment_1_0_0_1() { return cFeatureAssignment_1_0_0_1; }

		//OpBitwise
		public RuleCall getFeatureOpBitwiseParserRuleCall_1_0_0_1_0() { return cFeatureOpBitwiseParserRuleCall_1_0_0_1_0; }

		//right=BitshiftExpression
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//BitshiftExpression
		public RuleCall getRightBitshiftExpressionParserRuleCall_1_1_0() { return cRightBitshiftExpressionParserRuleCall_1_1_0; }
	}

	public class OpBitwiseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OpBitwise");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cVerticalLineKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cAmpersandKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cCircumflexAccentKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		//OpBitwise:
		//	"|" | "&" | "^";
		public ParserRule getRule() { return rule; }

		//"|" | "&" | "^"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"|"
		public Keyword getVerticalLineKeyword_0() { return cVerticalLineKeyword_0; }

		//"&"
		public Keyword getAmpersandKeyword_1() { return cAmpersandKeyword_1; }

		//"^"
		public Keyword getCircumflexAccentKeyword_2() { return cCircumflexAccentKeyword_2; }
	}

	public class BitshiftExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BitshiftExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAddExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cOperationLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Assignment cFeatureAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final RuleCall cFeatureOpBitshiftParserRuleCall_1_0_0_1_0 = (RuleCall)cFeatureAssignment_1_0_0_1.eContents().get(0);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightAddExpressionParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//BitshiftExpression returns Expression:
		//	AddExpression (=> ({Operation.left=current} feature=OpBitshift) right=AddExpression)*;
		public ParserRule getRule() { return rule; }

		//AddExpression (=> ({Operation.left=current} feature=OpBitshift) right=AddExpression)*
		public Group getGroup() { return cGroup; }

		//AddExpression
		public RuleCall getAddExpressionParserRuleCall_0() { return cAddExpressionParserRuleCall_0; }

		//(=> ({Operation.left=current} feature=OpBitshift) right=AddExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//=> ({Operation.left=current} feature=OpBitshift)
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{Operation.left=current} feature=OpBitshift
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{Operation.left=current}
		public Action getOperationLeftAction_1_0_0_0() { return cOperationLeftAction_1_0_0_0; }

		//feature=OpBitshift
		public Assignment getFeatureAssignment_1_0_0_1() { return cFeatureAssignment_1_0_0_1; }

		//OpBitshift
		public RuleCall getFeatureOpBitshiftParserRuleCall_1_0_0_1_0() { return cFeatureOpBitshiftParserRuleCall_1_0_0_1_0; }

		//right=AddExpression
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//AddExpression
		public RuleCall getRightAddExpressionParserRuleCall_1_1_0() { return cRightAddExpressionParserRuleCall_1_1_0; }
	}

	public class OpBitshiftElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OpBitshift");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cLessThanSignLessThanSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cGreaterThanSignGreaterThanSignKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cGreaterThanSignGreaterThanSignGreaterThanSignKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		//OpBitshift:
		//	"<<" | ">>" | ">>>";
		public ParserRule getRule() { return rule; }

		//"<<" | ">>" | ">>>"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"<<"
		public Keyword getLessThanSignLessThanSignKeyword_0() { return cLessThanSignLessThanSignKeyword_0; }

		//">>"
		public Keyword getGreaterThanSignGreaterThanSignKeyword_1() { return cGreaterThanSignGreaterThanSignKeyword_1; }

		//">>>"
		public Keyword getGreaterThanSignGreaterThanSignGreaterThanSignKeyword_2() { return cGreaterThanSignGreaterThanSignGreaterThanSignKeyword_2; }
	}

	public class AddExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AddExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cSubtractExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cOperationLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Assignment cFeatureAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final RuleCall cFeatureOpAddParserRuleCall_1_0_0_1_0 = (RuleCall)cFeatureAssignment_1_0_0_1.eContents().get(0);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightSubtractExpressionParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//AddExpression returns Expression:
		//	SubtractExpression (=> ({Operation.left=current} feature=OpAdd) right=SubtractExpression)*;
		public ParserRule getRule() { return rule; }

		//SubtractExpression (=> ({Operation.left=current} feature=OpAdd) right=SubtractExpression)*
		public Group getGroup() { return cGroup; }

		//SubtractExpression
		public RuleCall getSubtractExpressionParserRuleCall_0() { return cSubtractExpressionParserRuleCall_0; }

		//(=> ({Operation.left=current} feature=OpAdd) right=SubtractExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//=> ({Operation.left=current} feature=OpAdd)
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{Operation.left=current} feature=OpAdd
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{Operation.left=current}
		public Action getOperationLeftAction_1_0_0_0() { return cOperationLeftAction_1_0_0_0; }

		//feature=OpAdd
		public Assignment getFeatureAssignment_1_0_0_1() { return cFeatureAssignment_1_0_0_1; }

		//OpAdd
		public RuleCall getFeatureOpAddParserRuleCall_1_0_0_1_0() { return cFeatureOpAddParserRuleCall_1_0_0_1_0; }

		//right=SubtractExpression
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//SubtractExpression
		public RuleCall getRightSubtractExpressionParserRuleCall_1_1_0() { return cRightSubtractExpressionParserRuleCall_1_1_0; }
	}

	public class OpAddElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OpAdd");
		private final Keyword cPlusSignKeyword = (Keyword)rule.eContents().get(1);
		
		//OpAdd:
		//	"+";
		public ParserRule getRule() { return rule; }

		//"+"
		public Keyword getPlusSignKeyword() { return cPlusSignKeyword; }
	}

	public class SubtractExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SubtractExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMultiplyExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cOperationLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Assignment cFeatureAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final RuleCall cFeatureOpSubtractParserRuleCall_1_0_0_1_0 = (RuleCall)cFeatureAssignment_1_0_0_1.eContents().get(0);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightMultiplyExpressionParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//SubtractExpression returns Expression:
		//	MultiplyExpression (=> ({Operation.left=current} feature=OpSubtract) right=MultiplyExpression)*;
		public ParserRule getRule() { return rule; }

		//MultiplyExpression (=> ({Operation.left=current} feature=OpSubtract) right=MultiplyExpression)*
		public Group getGroup() { return cGroup; }

		//MultiplyExpression
		public RuleCall getMultiplyExpressionParserRuleCall_0() { return cMultiplyExpressionParserRuleCall_0; }

		//(=> ({Operation.left=current} feature=OpSubtract) right=MultiplyExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//=> ({Operation.left=current} feature=OpSubtract)
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{Operation.left=current} feature=OpSubtract
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{Operation.left=current}
		public Action getOperationLeftAction_1_0_0_0() { return cOperationLeftAction_1_0_0_0; }

		//feature=OpSubtract
		public Assignment getFeatureAssignment_1_0_0_1() { return cFeatureAssignment_1_0_0_1; }

		//OpSubtract
		public RuleCall getFeatureOpSubtractParserRuleCall_1_0_0_1_0() { return cFeatureOpSubtractParserRuleCall_1_0_0_1_0; }

		//right=MultiplyExpression
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//MultiplyExpression
		public RuleCall getRightMultiplyExpressionParserRuleCall_1_1_0() { return cRightMultiplyExpressionParserRuleCall_1_1_0; }
	}

	public class OpSubtractElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OpSubtract");
		private final Keyword cHyphenMinusKeyword = (Keyword)rule.eContents().get(1);
		
		//OpSubtract:
		//	"-";
		public ParserRule getRule() { return rule; }

		//"-"
		public Keyword getHyphenMinusKeyword() { return cHyphenMinusKeyword; }
	}

	public class MultiplyExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MultiplyExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cDivideExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cOperationLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Assignment cFeatureAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final RuleCall cFeatureOpMultiplyParserRuleCall_1_0_0_1_0 = (RuleCall)cFeatureAssignment_1_0_0_1.eContents().get(0);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightDivideExpressionParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//MultiplyExpression returns Expression:
		//	DivideExpression (=> ({Operation.left=current} feature=OpMultiply) right=DivideExpression)*;
		public ParserRule getRule() { return rule; }

		//DivideExpression (=> ({Operation.left=current} feature=OpMultiply) right=DivideExpression)*
		public Group getGroup() { return cGroup; }

		//DivideExpression
		public RuleCall getDivideExpressionParserRuleCall_0() { return cDivideExpressionParserRuleCall_0; }

		//(=> ({Operation.left=current} feature=OpMultiply) right=DivideExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//=> ({Operation.left=current} feature=OpMultiply)
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{Operation.left=current} feature=OpMultiply
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{Operation.left=current}
		public Action getOperationLeftAction_1_0_0_0() { return cOperationLeftAction_1_0_0_0; }

		//feature=OpMultiply
		public Assignment getFeatureAssignment_1_0_0_1() { return cFeatureAssignment_1_0_0_1; }

		//OpMultiply
		public RuleCall getFeatureOpMultiplyParserRuleCall_1_0_0_1_0() { return cFeatureOpMultiplyParserRuleCall_1_0_0_1_0; }

		//right=DivideExpression
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//DivideExpression
		public RuleCall getRightDivideExpressionParserRuleCall_1_1_0() { return cRightDivideExpressionParserRuleCall_1_1_0; }
	}

	public class OpMultiplyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OpMultiply");
		private final Keyword cAsteriskKeyword = (Keyword)rule.eContents().get(1);
		
		//OpMultiply:
		//	"*";
		public ParserRule getRule() { return rule; }

		//"*"
		public Keyword getAsteriskKeyword() { return cAsteriskKeyword; }
	}

	public class DivideExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DivideExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cModuloExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cOperationLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Assignment cFeatureAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final RuleCall cFeatureOpDivideParserRuleCall_1_0_0_1_0 = (RuleCall)cFeatureAssignment_1_0_0_1.eContents().get(0);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightModuloExpressionParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//DivideExpression returns Expression:
		//	ModuloExpression (=> ({Operation.left=current} feature=OpDivide) right=ModuloExpression)*;
		public ParserRule getRule() { return rule; }

		//ModuloExpression (=> ({Operation.left=current} feature=OpDivide) right=ModuloExpression)*
		public Group getGroup() { return cGroup; }

		//ModuloExpression
		public RuleCall getModuloExpressionParserRuleCall_0() { return cModuloExpressionParserRuleCall_0; }

		//(=> ({Operation.left=current} feature=OpDivide) right=ModuloExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//=> ({Operation.left=current} feature=OpDivide)
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{Operation.left=current} feature=OpDivide
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{Operation.left=current}
		public Action getOperationLeftAction_1_0_0_0() { return cOperationLeftAction_1_0_0_0; }

		//feature=OpDivide
		public Assignment getFeatureAssignment_1_0_0_1() { return cFeatureAssignment_1_0_0_1; }

		//OpDivide
		public RuleCall getFeatureOpDivideParserRuleCall_1_0_0_1_0() { return cFeatureOpDivideParserRuleCall_1_0_0_1_0; }

		//right=ModuloExpression
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//ModuloExpression
		public RuleCall getRightModuloExpressionParserRuleCall_1_1_0() { return cRightModuloExpressionParserRuleCall_1_1_0; }
	}

	public class OpDivideElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OpDivide");
		private final Keyword cSolidusKeyword = (Keyword)rule.eContents().get(1);
		
		//OpDivide:
		//	"/";
		public ParserRule getRule() { return rule; }

		//"/"
		public Keyword getSolidusKeyword() { return cSolidusKeyword; }
	}

	public class ModuloExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ModuloExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cUnaryOperationParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cOperationLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Assignment cFeatureAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final RuleCall cFeatureOpModuloParserRuleCall_1_0_0_1_0 = (RuleCall)cFeatureAssignment_1_0_0_1.eContents().get(0);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightUnaryOperationParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//ModuloExpression returns Expression:
		//	UnaryOperation (=> ({Operation.left=current} feature=OpModulo) right=UnaryOperation)*;
		public ParserRule getRule() { return rule; }

		//UnaryOperation (=> ({Operation.left=current} feature=OpModulo) right=UnaryOperation)*
		public Group getGroup() { return cGroup; }

		//UnaryOperation
		public RuleCall getUnaryOperationParserRuleCall_0() { return cUnaryOperationParserRuleCall_0; }

		//(=> ({Operation.left=current} feature=OpModulo) right=UnaryOperation)*
		public Group getGroup_1() { return cGroup_1; }

		//=> ({Operation.left=current} feature=OpModulo)
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{Operation.left=current} feature=OpModulo
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{Operation.left=current}
		public Action getOperationLeftAction_1_0_0_0() { return cOperationLeftAction_1_0_0_0; }

		//feature=OpModulo
		public Assignment getFeatureAssignment_1_0_0_1() { return cFeatureAssignment_1_0_0_1; }

		//OpModulo
		public RuleCall getFeatureOpModuloParserRuleCall_1_0_0_1_0() { return cFeatureOpModuloParserRuleCall_1_0_0_1_0; }

		//right=UnaryOperation
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//UnaryOperation
		public RuleCall getRightUnaryOperationParserRuleCall_1_1_0() { return cRightUnaryOperationParserRuleCall_1_1_0; }
	}

	public class OpModuloElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OpModulo");
		private final Keyword cPercentSignKeyword = (Keyword)rule.eContents().get(1);
		
		//OpModulo:
		//	"%";
		public ParserRule getRule() { return rule; }

		//"%"
		public Keyword getPercentSignKeyword() { return cPercentSignKeyword; }
	}

	public class UnaryOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UnaryOperation");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cUnaryOperationAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cFeatureAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cFeatureOpUnaryParserRuleCall_0_1_0 = (RuleCall)cFeatureAssignment_0_1.eContents().get(0);
		private final Assignment cOperandAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cOperandPreIncrementOperationParserRuleCall_0_2_0 = (RuleCall)cOperandAssignment_0_2.eContents().get(0);
		private final RuleCall cPreIncrementOperationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//UnaryOperation returns Expression:
		//	{UnaryOperation} feature=OpUnary operand=PreIncrementOperation | PreIncrementOperation;
		public ParserRule getRule() { return rule; }

		//{UnaryOperation} feature=OpUnary operand=PreIncrementOperation | PreIncrementOperation
		public Alternatives getAlternatives() { return cAlternatives; }

		//{UnaryOperation} feature=OpUnary operand=PreIncrementOperation
		public Group getGroup_0() { return cGroup_0; }

		//{UnaryOperation}
		public Action getUnaryOperationAction_0_0() { return cUnaryOperationAction_0_0; }

		//feature=OpUnary
		public Assignment getFeatureAssignment_0_1() { return cFeatureAssignment_0_1; }

		//OpUnary
		public RuleCall getFeatureOpUnaryParserRuleCall_0_1_0() { return cFeatureOpUnaryParserRuleCall_0_1_0; }

		//operand=PreIncrementOperation
		public Assignment getOperandAssignment_0_2() { return cOperandAssignment_0_2; }

		//PreIncrementOperation
		public RuleCall getOperandPreIncrementOperationParserRuleCall_0_2_0() { return cOperandPreIncrementOperationParserRuleCall_0_2_0; }

		//PreIncrementOperation
		public RuleCall getPreIncrementOperationParserRuleCall_1() { return cPreIncrementOperationParserRuleCall_1; }
	}

	public class OpUnaryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OpUnary");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cExclamationMarkKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cTildeKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		//OpUnary:
		//	"!" | "-" | "~";
		public ParserRule getRule() { return rule; }

		//"!" | "-" | "~"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"!"
		public Keyword getExclamationMarkKeyword_0() { return cExclamationMarkKeyword_0; }

		//"-"
		public Keyword getHyphenMinusKeyword_1() { return cHyphenMinusKeyword_1; }

		//"~"
		public Keyword getTildeKeyword_2() { return cTildeKeyword_2; }
	}

	public class PreIncrementOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PreIncrementOperation");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cGroup_0.eContents().get(0);
		private final Action cPreIncrementOperationAction_0_0_0 = (Action)cGroup_0_0.eContents().get(0);
		private final Assignment cFeatureAssignment_0_0_1 = (Assignment)cGroup_0_0.eContents().get(1);
		private final RuleCall cFeatureOpIncrementParserRuleCall_0_0_1_0 = (RuleCall)cFeatureAssignment_0_0_1.eContents().get(0);
		private final Assignment cOperandAssignment_0_0_2 = (Assignment)cGroup_0_0.eContents().get(2);
		private final RuleCall cOperandPostIncrementOperationParserRuleCall_0_0_2_0 = (RuleCall)cOperandAssignment_0_0_2.eContents().get(0);
		private final RuleCall cPostIncrementOperationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//PreIncrementOperation returns Expression:
		//	=> ({PreIncrementOperation} feature=OpIncrement operand=PostIncrementOperation) | PostIncrementOperation;
		public ParserRule getRule() { return rule; }

		//=> ({PreIncrementOperation} feature=OpIncrement operand=PostIncrementOperation) | PostIncrementOperation
		public Alternatives getAlternatives() { return cAlternatives; }

		//=> ({PreIncrementOperation} feature=OpIncrement operand=PostIncrementOperation)
		public Group getGroup_0() { return cGroup_0; }

		//{PreIncrementOperation} feature=OpIncrement operand=PostIncrementOperation
		public Group getGroup_0_0() { return cGroup_0_0; }

		//{PreIncrementOperation}
		public Action getPreIncrementOperationAction_0_0_0() { return cPreIncrementOperationAction_0_0_0; }

		//feature=OpIncrement
		public Assignment getFeatureAssignment_0_0_1() { return cFeatureAssignment_0_0_1; }

		//OpIncrement
		public RuleCall getFeatureOpIncrementParserRuleCall_0_0_1_0() { return cFeatureOpIncrementParserRuleCall_0_0_1_0; }

		//operand=PostIncrementOperation
		public Assignment getOperandAssignment_0_0_2() { return cOperandAssignment_0_0_2; }

		//PostIncrementOperation
		public RuleCall getOperandPostIncrementOperationParserRuleCall_0_0_2_0() { return cOperandPostIncrementOperationParserRuleCall_0_0_2_0; }

		//PostIncrementOperation
		public RuleCall getPostIncrementOperationParserRuleCall_1() { return cPostIncrementOperationParserRuleCall_1; }
	}

	public class PostIncrementOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PostIncrementOperation");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cGroup_0.eContents().get(0);
		private final Action cPostIncrementOperationAction_0_0_0 = (Action)cGroup_0_0.eContents().get(0);
		private final Assignment cOperandAssignment_0_0_1 = (Assignment)cGroup_0_0.eContents().get(1);
		private final RuleCall cOperandMemberFeatureCallParserRuleCall_0_0_1_0 = (RuleCall)cOperandAssignment_0_0_1.eContents().get(0);
		private final Assignment cFeatureAssignment_0_0_2 = (Assignment)cGroup_0_0.eContents().get(2);
		private final RuleCall cFeatureOpIncrementParserRuleCall_0_0_2_0 = (RuleCall)cFeatureAssignment_0_0_2.eContents().get(0);
		private final RuleCall cMemberFeatureCallParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//PostIncrementOperation returns Expression:
		//	=> ({PostIncrementOperation} operand=MemberFeatureCall feature=OpIncrement) | MemberFeatureCall;
		public ParserRule getRule() { return rule; }

		//=> ({PostIncrementOperation} operand=MemberFeatureCall feature=OpIncrement) | MemberFeatureCall
		public Alternatives getAlternatives() { return cAlternatives; }

		//=> ({PostIncrementOperation} operand=MemberFeatureCall feature=OpIncrement)
		public Group getGroup_0() { return cGroup_0; }

		//{PostIncrementOperation} operand=MemberFeatureCall feature=OpIncrement
		public Group getGroup_0_0() { return cGroup_0_0; }

		//{PostIncrementOperation}
		public Action getPostIncrementOperationAction_0_0_0() { return cPostIncrementOperationAction_0_0_0; }

		//operand=MemberFeatureCall
		public Assignment getOperandAssignment_0_0_1() { return cOperandAssignment_0_0_1; }

		//MemberFeatureCall
		public RuleCall getOperandMemberFeatureCallParserRuleCall_0_0_1_0() { return cOperandMemberFeatureCallParserRuleCall_0_0_1_0; }

		//feature=OpIncrement
		public Assignment getFeatureAssignment_0_0_2() { return cFeatureAssignment_0_0_2; }

		//OpIncrement
		public RuleCall getFeatureOpIncrementParserRuleCall_0_0_2_0() { return cFeatureOpIncrementParserRuleCall_0_0_2_0; }

		//MemberFeatureCall
		public RuleCall getMemberFeatureCallParserRuleCall_1() { return cMemberFeatureCallParserRuleCall_1; }
	}

	public class OpIncrementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OpIncrement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cPlusSignPlusSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cHyphenMinusHyphenMinusKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//OpIncrement:
		//	"++" | "--";
		public ParserRule getRule() { return rule; }

		//"++" | "--"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"++"
		public Keyword getPlusSignPlusSignKeyword_0() { return cPlusSignPlusSignKeyword_0; }

		//"--"
		public Keyword getHyphenMinusHyphenMinusKeyword_1() { return cHyphenMinusHyphenMinusKeyword_1; }
	}

	public class MemberFeatureCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MemberFeatureCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPrimaryExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Group cGroup_1_0_0_0 = (Group)cGroup_1_0_0.eContents().get(0);
		private final Action cAssignmentAssignableAction_1_0_0_0_0 = (Action)cGroup_1_0_0_0.eContents().get(0);
		private final Keyword cFullStopKeyword_1_0_0_0_1 = (Keyword)cGroup_1_0_0_0.eContents().get(1);
		private final Assignment cFeatureAssignment_1_0_0_0_2 = (Assignment)cGroup_1_0_0_0.eContents().get(2);
		private final CrossReference cFeatureFeatureCrossReference_1_0_0_0_2_0 = (CrossReference)cFeatureAssignment_1_0_0_0_2.eContents().get(0);
		private final RuleCall cFeatureFeatureValidIDParserRuleCall_1_0_0_0_2_0_1 = (RuleCall)cFeatureFeatureCrossReference_1_0_0_0_2_0.eContents().get(1);
		private final RuleCall cOpSingleAssignParserRuleCall_1_0_0_0_3 = (RuleCall)cGroup_1_0_0_0.eContents().get(3);
		private final Assignment cValueAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cValueAssignmentParserRuleCall_1_0_1_0 = (RuleCall)cValueAssignment_1_0_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Group cGroup_1_1_0 = (Group)cGroup_1_1.eContents().get(0);
		private final Group cGroup_1_1_0_0 = (Group)cGroup_1_1_0.eContents().get(0);
		private final Action cMemberFeatureCallTargetAction_1_1_0_0_0 = (Action)cGroup_1_1_0_0.eContents().get(0);
		private final Keyword cFullStopKeyword_1_1_0_0_1 = (Keyword)cGroup_1_1_0_0.eContents().get(1);
		private final Assignment cFeatureAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cFeatureValidIDParserRuleCall_1_1_1_0 = (RuleCall)cFeatureAssignment_1_1_1.eContents().get(0);
		private final Group cGroup_1_1_2 = (Group)cGroup_1_1.eContents().get(2);
		private final Assignment cExplicitOperationCallAssignment_1_1_2_0 = (Assignment)cGroup_1_1_2.eContents().get(0);
		private final Keyword cExplicitOperationCallLeftParenthesisKeyword_1_1_2_0_0 = (Keyword)cExplicitOperationCallAssignment_1_1_2_0.eContents().get(0);
		private final Group cGroup_1_1_2_1 = (Group)cGroup_1_1_2.eContents().get(1);
		private final Assignment cArgumentsAssignment_1_1_2_1_0 = (Assignment)cGroup_1_1_2_1.eContents().get(0);
		private final RuleCall cArgumentsExpressionParserRuleCall_1_1_2_1_0_0 = (RuleCall)cArgumentsAssignment_1_1_2_1_0.eContents().get(0);
		private final Group cGroup_1_1_2_1_1 = (Group)cGroup_1_1_2_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_1_2_1_1_0 = (Keyword)cGroup_1_1_2_1_1.eContents().get(0);
		private final Assignment cArgumentsAssignment_1_1_2_1_1_1 = (Assignment)cGroup_1_1_2_1_1.eContents().get(1);
		private final RuleCall cArgumentsExpressionParserRuleCall_1_1_2_1_1_1_0 = (RuleCall)cArgumentsAssignment_1_1_2_1_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_1_2_2 = (Keyword)cGroup_1_1_2.eContents().get(2);
		
		//MemberFeatureCall returns Expression:
		//	PrimaryExpression (=> ({Assignment.assignable=current} "." feature=[Feature|ValidID] OpSingleAssign) value=Assignment
		//	| => ({MemberFeatureCall.target=current} ".") feature=ValidID (=> explicitOperationCall?="(" //memberCallArguments+=XShortClosure |
		//	(arguments+=Expression ("," arguments+=Expression)*)? ")")?)*;
		public ParserRule getRule() { return rule; }

		//PrimaryExpression (=> ({Assignment.assignable=current} "." feature=[Feature|ValidID] OpSingleAssign) value=Assignment |
		//=> ({MemberFeatureCall.target=current} ".") feature=ValidID (=> explicitOperationCall?="(" //memberCallArguments+=XShortClosure |
		//(arguments+=Expression ("," arguments+=Expression)*)? ")")?)*
		public Group getGroup() { return cGroup; }

		//PrimaryExpression
		public RuleCall getPrimaryExpressionParserRuleCall_0() { return cPrimaryExpressionParserRuleCall_0; }

		//(=> ({Assignment.assignable=current} "." feature=[Feature|ValidID] OpSingleAssign) value=Assignment | =>
		//({MemberFeatureCall.target=current} ".") feature=ValidID (=> explicitOperationCall?="(" //memberCallArguments+=XShortClosure |
		//(arguments+=Expression ("," arguments+=Expression)*)? ")")?)*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//=> ({Assignment.assignable=current} "." feature=[Feature|ValidID] OpSingleAssign) value=Assignment
		public Group getGroup_1_0() { return cGroup_1_0; }

		//=> ({Assignment.assignable=current} "." feature=[Feature|ValidID] OpSingleAssign)
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{Assignment.assignable=current} "." feature=[Feature|ValidID] OpSingleAssign
		public Group getGroup_1_0_0_0() { return cGroup_1_0_0_0; }

		//{Assignment.assignable=current}
		public Action getAssignmentAssignableAction_1_0_0_0_0() { return cAssignmentAssignableAction_1_0_0_0_0; }

		//"."
		public Keyword getFullStopKeyword_1_0_0_0_1() { return cFullStopKeyword_1_0_0_0_1; }

		//feature=[Feature|ValidID]
		public Assignment getFeatureAssignment_1_0_0_0_2() { return cFeatureAssignment_1_0_0_0_2; }

		//[Feature|ValidID]
		public CrossReference getFeatureFeatureCrossReference_1_0_0_0_2_0() { return cFeatureFeatureCrossReference_1_0_0_0_2_0; }

		//ValidID
		public RuleCall getFeatureFeatureValidIDParserRuleCall_1_0_0_0_2_0_1() { return cFeatureFeatureValidIDParserRuleCall_1_0_0_0_2_0_1; }

		//OpSingleAssign
		public RuleCall getOpSingleAssignParserRuleCall_1_0_0_0_3() { return cOpSingleAssignParserRuleCall_1_0_0_0_3; }

		//value=Assignment
		public Assignment getValueAssignment_1_0_1() { return cValueAssignment_1_0_1; }

		//Assignment
		public RuleCall getValueAssignmentParserRuleCall_1_0_1_0() { return cValueAssignmentParserRuleCall_1_0_1_0; }

		//=> ({MemberFeatureCall.target=current} ".") feature=ValidID (=> explicitOperationCall?="(" //memberCallArguments+=XShortClosure |
		//(arguments+=Expression ("," arguments+=Expression)*)? ")")?
		public Group getGroup_1_1() { return cGroup_1_1; }

		//=> ({MemberFeatureCall.target=current} ".")
		public Group getGroup_1_1_0() { return cGroup_1_1_0; }

		//{MemberFeatureCall.target=current} "."
		public Group getGroup_1_1_0_0() { return cGroup_1_1_0_0; }

		//{MemberFeatureCall.target=current}
		public Action getMemberFeatureCallTargetAction_1_1_0_0_0() { return cMemberFeatureCallTargetAction_1_1_0_0_0; }

		//"."
		public Keyword getFullStopKeyword_1_1_0_0_1() { return cFullStopKeyword_1_1_0_0_1; }

		//feature=ValidID
		public Assignment getFeatureAssignment_1_1_1() { return cFeatureAssignment_1_1_1; }

		//ValidID
		public RuleCall getFeatureValidIDParserRuleCall_1_1_1_0() { return cFeatureValidIDParserRuleCall_1_1_1_0; }

		//(=> explicitOperationCall?="(" //memberCallArguments+=XShortClosure |
		//(arguments+=Expression ("," arguments+=Expression)*)? ")")?
		public Group getGroup_1_1_2() { return cGroup_1_1_2; }

		//=> explicitOperationCall?="("
		public Assignment getExplicitOperationCallAssignment_1_1_2_0() { return cExplicitOperationCallAssignment_1_1_2_0; }

		//"("
		public Keyword getExplicitOperationCallLeftParenthesisKeyword_1_1_2_0_0() { return cExplicitOperationCallLeftParenthesisKeyword_1_1_2_0_0; }

		////memberCallArguments+=XShortClosure |
		//(arguments+=Expression ("," arguments+=Expression)*)?
		public Group getGroup_1_1_2_1() { return cGroup_1_1_2_1; }

		////memberCallArguments+=XShortClosure |
		//arguments+=Expression
		public Assignment getArgumentsAssignment_1_1_2_1_0() { return cArgumentsAssignment_1_1_2_1_0; }

		//Expression
		public RuleCall getArgumentsExpressionParserRuleCall_1_1_2_1_0_0() { return cArgumentsExpressionParserRuleCall_1_1_2_1_0_0; }

		//("," arguments+=Expression)*
		public Group getGroup_1_1_2_1_1() { return cGroup_1_1_2_1_1; }

		//","
		public Keyword getCommaKeyword_1_1_2_1_1_0() { return cCommaKeyword_1_1_2_1_1_0; }

		//arguments+=Expression
		public Assignment getArgumentsAssignment_1_1_2_1_1_1() { return cArgumentsAssignment_1_1_2_1_1_1; }

		//Expression
		public RuleCall getArgumentsExpressionParserRuleCall_1_1_2_1_1_1_0() { return cArgumentsExpressionParserRuleCall_1_1_2_1_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_1_2_2() { return cRightParenthesisKeyword_1_1_2_2; }
	}

	public class PrimaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PrimaryExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLiteralParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBlockExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cParenthesizedExpressionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cFeatureCallParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cConstructorCallParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//PrimaryExpression returns Expression:
		//	Literal | BlockExpression | ParenthesizedExpression | FeatureCall | ConstructorCall;
		public ParserRule getRule() { return rule; }

		//Literal | BlockExpression | ParenthesizedExpression | FeatureCall | ConstructorCall
		public Alternatives getAlternatives() { return cAlternatives; }

		//Literal
		public RuleCall getLiteralParserRuleCall_0() { return cLiteralParserRuleCall_0; }

		//BlockExpression
		public RuleCall getBlockExpressionParserRuleCall_1() { return cBlockExpressionParserRuleCall_1; }

		//ParenthesizedExpression
		public RuleCall getParenthesizedExpressionParserRuleCall_2() { return cParenthesizedExpressionParserRuleCall_2; }

		//FeatureCall
		public RuleCall getFeatureCallParserRuleCall_3() { return cFeatureCallParserRuleCall_3; }

		//ConstructorCall
		public RuleCall getConstructorCallParserRuleCall_4() { return cConstructorCallParserRuleCall_4; }
	}

	public class LiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Literal");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBooleanLiteralParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIntLiteralParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cNullLiteralParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cStringLiteralParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cFloatLiteralParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cRegularExpressionLiteralParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cArrayLiteralParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		
		//Literal returns Expression:
		//	BooleanLiteral | IntLiteral | NullLiteral | StringLiteral | FloatLiteral | RegularExpressionLiteral | ArrayLiteral;
		public ParserRule getRule() { return rule; }

		//BooleanLiteral | IntLiteral | NullLiteral | StringLiteral | FloatLiteral | RegularExpressionLiteral | ArrayLiteral
		public Alternatives getAlternatives() { return cAlternatives; }

		//BooleanLiteral
		public RuleCall getBooleanLiteralParserRuleCall_0() { return cBooleanLiteralParserRuleCall_0; }

		//IntLiteral
		public RuleCall getIntLiteralParserRuleCall_1() { return cIntLiteralParserRuleCall_1; }

		//NullLiteral
		public RuleCall getNullLiteralParserRuleCall_2() { return cNullLiteralParserRuleCall_2; }

		//StringLiteral
		public RuleCall getStringLiteralParserRuleCall_3() { return cStringLiteralParserRuleCall_3; }

		//FloatLiteral
		public RuleCall getFloatLiteralParserRuleCall_4() { return cFloatLiteralParserRuleCall_4; }

		//RegularExpressionLiteral
		public RuleCall getRegularExpressionLiteralParserRuleCall_5() { return cRegularExpressionLiteralParserRuleCall_5; }

		//ArrayLiteral
		public RuleCall getArrayLiteralParserRuleCall_6() { return cArrayLiteralParserRuleCall_6; }
	}

	public class BlockExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BlockExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBlockExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cExpressionsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cExpressionsExpressionInsideBlockParserRuleCall_2_0_0 = (RuleCall)cExpressionsAssignment_2_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//BlockExpression returns Expression:
		//	{BlockExpression} "{" (expressions+=ExpressionInsideBlock ";"?)* "}";
		public ParserRule getRule() { return rule; }

		//{BlockExpression} "{" (expressions+=ExpressionInsideBlock ";"?)* "}"
		public Group getGroup() { return cGroup; }

		//{BlockExpression}
		public Action getBlockExpressionAction_0() { return cBlockExpressionAction_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//(expressions+=ExpressionInsideBlock ";"?)*
		public Group getGroup_2() { return cGroup_2; }

		//expressions+=ExpressionInsideBlock
		public Assignment getExpressionsAssignment_2_0() { return cExpressionsAssignment_2_0; }

		//ExpressionInsideBlock
		public RuleCall getExpressionsExpressionInsideBlockParserRuleCall_2_0_0() { return cExpressionsExpressionInsideBlockParserRuleCall_2_0_0; }

		//";"?
		public Keyword getSemicolonKeyword_2_1() { return cSemicolonKeyword_2_1; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class ExpressionInsideBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExpressionInsideBlock");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cVariableDeclarationsParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ExpressionInsideBlock returns Expression:
		//	VariableDeclarations | Expression;
		public ParserRule getRule() { return rule; }

		//VariableDeclarations | Expression
		public Alternatives getAlternatives() { return cAlternatives; }

		//VariableDeclarations
		public RuleCall getVariableDeclarationsParserRuleCall_0() { return cVariableDeclarationsParserRuleCall_0; }

		//Expression
		public RuleCall getExpressionParserRuleCall_1() { return cExpressionParserRuleCall_1; }
	}

	public class VariableDeclarationsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VariableDeclarations");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cVariableDeclarationsAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cVarKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cDeclarationsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDeclarationsVariableDeclarationParserRuleCall_2_0 = (RuleCall)cDeclarationsAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cDeclarationsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cDeclarationsVariableDeclarationParserRuleCall_3_1_0 = (RuleCall)cDeclarationsAssignment_3_1.eContents().get(0);
		
		//VariableDeclarations returns Expression:
		//	{VariableDeclarations} "var" declarations+=VariableDeclaration ("," declarations+=VariableDeclaration)*;
		public ParserRule getRule() { return rule; }

		//{VariableDeclarations} "var" declarations+=VariableDeclaration ("," declarations+=VariableDeclaration)*
		public Group getGroup() { return cGroup; }

		//{VariableDeclarations}
		public Action getVariableDeclarationsAction_0() { return cVariableDeclarationsAction_0; }

		//"var"
		public Keyword getVarKeyword_1() { return cVarKeyword_1; }

		//declarations+=VariableDeclaration
		public Assignment getDeclarationsAssignment_2() { return cDeclarationsAssignment_2; }

		//VariableDeclaration
		public RuleCall getDeclarationsVariableDeclarationParserRuleCall_2_0() { return cDeclarationsVariableDeclarationParserRuleCall_2_0; }

		//("," declarations+=VariableDeclaration)*
		public Group getGroup_3() { return cGroup_3; }

		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//declarations+=VariableDeclaration
		public Assignment getDeclarationsAssignment_3_1() { return cDeclarationsAssignment_3_1; }

		//VariableDeclaration
		public RuleCall getDeclarationsVariableDeclarationParserRuleCall_3_1_0() { return cDeclarationsVariableDeclarationParserRuleCall_3_1_0; }
	}

	public class VariableDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VariableDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cVariableDeclarationAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameValidIDParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cColonKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cTypeAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cTypeTypeReferenceParserRuleCall_2_1_0 = (RuleCall)cTypeAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cEqualsSignKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cExpressionAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_3_1_0 = (RuleCall)cExpressionAssignment_3_1.eContents().get(0);
		
		//VariableDeclaration:
		//	{VariableDeclaration} name=ValidID (":" type=TypeReference)? ("=" expression=Expression)?;
		public ParserRule getRule() { return rule; }

		//{VariableDeclaration} name=ValidID (":" type=TypeReference)? ("=" expression=Expression)?
		public Group getGroup() { return cGroup; }

		//{VariableDeclaration}
		public Action getVariableDeclarationAction_0() { return cVariableDeclarationAction_0; }

		//name=ValidID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ValidID
		public RuleCall getNameValidIDParserRuleCall_1_0() { return cNameValidIDParserRuleCall_1_0; }

		//(":" type=TypeReference)?
		public Group getGroup_2() { return cGroup_2; }

		//":"
		public Keyword getColonKeyword_2_0() { return cColonKeyword_2_0; }

		//type=TypeReference
		public Assignment getTypeAssignment_2_1() { return cTypeAssignment_2_1; }

		//TypeReference
		public RuleCall getTypeTypeReferenceParserRuleCall_2_1_0() { return cTypeTypeReferenceParserRuleCall_2_1_0; }

		//("=" expression=Expression)?
		public Group getGroup_3() { return cGroup_3; }

		//"="
		public Keyword getEqualsSignKeyword_3_0() { return cEqualsSignKeyword_3_0; }

		//expression=Expression
		public Assignment getExpressionAssignment_3_1() { return cExpressionAssignment_3_1; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_3_1_0() { return cExpressionExpressionParserRuleCall_3_1_0; }
	}

	public class ParenthesizedExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ParenthesizedExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//ParenthesizedExpression returns Expression:
		//	"(" Expression ")";
		public ParserRule getRule() { return rule; }

		//"(" Expression ")"
		public Group getGroup() { return cGroup; }

		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }

		//Expression
		public RuleCall getExpressionParserRuleCall_1() { return cExpressionParserRuleCall_1; }

		//")"
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}

	public class FeatureCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FeatureCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFeatureCallAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cFeatureAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cFeatureFeatureCrossReference_1_0 = (CrossReference)cFeatureAssignment_1.eContents().get(0);
		private final RuleCall cFeatureFeatureIdOrSuperParserRuleCall_1_0_1 = (RuleCall)cFeatureFeatureCrossReference_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cExplicitOperationCallAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final Keyword cExplicitOperationCallLeftParenthesisKeyword_2_0_0 = (Keyword)cExplicitOperationCallAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Assignment cArgumentsAssignment_2_1_0 = (Assignment)cGroup_2_1.eContents().get(0);
		private final RuleCall cArgumentsExpressionParserRuleCall_2_1_0_0 = (RuleCall)cArgumentsAssignment_2_1_0.eContents().get(0);
		private final Group cGroup_2_1_1 = (Group)cGroup_2_1.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_1_0 = (Keyword)cGroup_2_1_1.eContents().get(0);
		private final Assignment cArgumentsAssignment_2_1_1_1 = (Assignment)cGroup_2_1_1.eContents().get(1);
		private final RuleCall cArgumentsExpressionParserRuleCall_2_1_1_1_0 = (RuleCall)cArgumentsAssignment_2_1_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		
		//FeatureCall returns Expression:
		//	{FeatureCall} feature=[Feature|IdOrSuper] (=> explicitOperationCall?="(" //featureCallArguments+=XShortClosure |
		//	(arguments+=Expression ("," arguments+=Expression)*)? ")")?;
		public ParserRule getRule() { return rule; }

		//{FeatureCall} feature=[Feature|IdOrSuper] (=> explicitOperationCall?="(" //featureCallArguments+=XShortClosure |
		//(arguments+=Expression ("," arguments+=Expression)*)? ")")?
		public Group getGroup() { return cGroup; }

		//{FeatureCall}
		public Action getFeatureCallAction_0() { return cFeatureCallAction_0; }

		//feature=[Feature|IdOrSuper]
		public Assignment getFeatureAssignment_1() { return cFeatureAssignment_1; }

		//[Feature|IdOrSuper]
		public CrossReference getFeatureFeatureCrossReference_1_0() { return cFeatureFeatureCrossReference_1_0; }

		//IdOrSuper
		public RuleCall getFeatureFeatureIdOrSuperParserRuleCall_1_0_1() { return cFeatureFeatureIdOrSuperParserRuleCall_1_0_1; }

		//(=> explicitOperationCall?="(" //featureCallArguments+=XShortClosure |
		//(arguments+=Expression ("," arguments+=Expression)*)? ")")?
		public Group getGroup_2() { return cGroup_2; }

		//=> explicitOperationCall?="("
		public Assignment getExplicitOperationCallAssignment_2_0() { return cExplicitOperationCallAssignment_2_0; }

		//"("
		public Keyword getExplicitOperationCallLeftParenthesisKeyword_2_0_0() { return cExplicitOperationCallLeftParenthesisKeyword_2_0_0; }

		////featureCallArguments+=XShortClosure |
		//(arguments+=Expression ("," arguments+=Expression)*)?
		public Group getGroup_2_1() { return cGroup_2_1; }

		////featureCallArguments+=XShortClosure |
		//arguments+=Expression
		public Assignment getArgumentsAssignment_2_1_0() { return cArgumentsAssignment_2_1_0; }

		//Expression
		public RuleCall getArgumentsExpressionParserRuleCall_2_1_0_0() { return cArgumentsExpressionParserRuleCall_2_1_0_0; }

		//("," arguments+=Expression)*
		public Group getGroup_2_1_1() { return cGroup_2_1_1; }

		//","
		public Keyword getCommaKeyword_2_1_1_0() { return cCommaKeyword_2_1_1_0; }

		//arguments+=Expression
		public Assignment getArgumentsAssignment_2_1_1_1() { return cArgumentsAssignment_2_1_1_1; }

		//Expression
		public RuleCall getArgumentsExpressionParserRuleCall_2_1_1_1_0() { return cArgumentsExpressionParserRuleCall_2_1_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_2_2() { return cRightParenthesisKeyword_2_2; }
	}

	public class FeatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Feature");
		private final RuleCall cVariableDeclarationParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Feature:
		//	VariableDeclaration;
		public ParserRule getRule() { return rule; }

		//VariableDeclaration
		public RuleCall getVariableDeclarationParserRuleCall() { return cVariableDeclarationParserRuleCall; }
	}

	public class ConstructorCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ConstructorCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cConstructorCallAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cNewKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cConstructorAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cConstructorQualifiedNameParserRuleCall_2_0 = (RuleCall)cConstructorAssignment_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cArgumentsAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cArgumentsExpressionParserRuleCall_4_0_0 = (RuleCall)cArgumentsAssignment_4_0.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cGroup_4.eContents().get(1);
		private final Keyword cCommaKeyword_4_1_0 = (Keyword)cGroup_4_1.eContents().get(0);
		private final Assignment cArgumentsAssignment_4_1_1 = (Assignment)cGroup_4_1.eContents().get(1);
		private final RuleCall cArgumentsExpressionParserRuleCall_4_1_1_0 = (RuleCall)cArgumentsAssignment_4_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//ConstructorCall returns XExpression:
		//	{ConstructorCall} "new" constructor=QualifiedName "(" //arguments+=XShortClosure |
		//	(arguments+=Expression ("," arguments+=Expression)*)? ")";
		public ParserRule getRule() { return rule; }

		//{ConstructorCall} "new" constructor=QualifiedName "(" //arguments+=XShortClosure |
		//(arguments+=Expression ("," arguments+=Expression)*)? ")"
		public Group getGroup() { return cGroup; }

		//{ConstructorCall}
		public Action getConstructorCallAction_0() { return cConstructorCallAction_0; }

		//"new"
		public Keyword getNewKeyword_1() { return cNewKeyword_1; }

		//constructor=QualifiedName
		public Assignment getConstructorAssignment_2() { return cConstructorAssignment_2; }

		//QualifiedName
		public RuleCall getConstructorQualifiedNameParserRuleCall_2_0() { return cConstructorQualifiedNameParserRuleCall_2_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }

		////arguments+=XShortClosure |
		//(arguments+=Expression ("," arguments+=Expression)*)?
		public Group getGroup_4() { return cGroup_4; }

		////arguments+=XShortClosure |
		//arguments+=Expression
		public Assignment getArgumentsAssignment_4_0() { return cArgumentsAssignment_4_0; }

		//Expression
		public RuleCall getArgumentsExpressionParserRuleCall_4_0_0() { return cArgumentsExpressionParserRuleCall_4_0_0; }

		//("," arguments+=Expression)*
		public Group getGroup_4_1() { return cGroup_4_1; }

		//","
		public Keyword getCommaKeyword_4_1_0() { return cCommaKeyword_4_1_0; }

		//arguments+=Expression
		public Assignment getArgumentsAssignment_4_1_1() { return cArgumentsAssignment_4_1_1; }

		//Expression
		public RuleCall getArgumentsExpressionParserRuleCall_4_1_1_0() { return cArgumentsExpressionParserRuleCall_4_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}

	public class IdOrSuperElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IdOrSuper");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cValidIDParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Keyword cSuperKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//IdOrSuper:
		//	ValidID | "super";
		public ParserRule getRule() { return rule; }

		//ValidID | "super"
		public Alternatives getAlternatives() { return cAlternatives; }

		//ValidID
		public RuleCall getValidIDParserRuleCall_0() { return cValidIDParserRuleCall_0; }

		//"super"
		public Keyword getSuperKeyword_1() { return cSuperKeyword_1; }
	}

	public class BooleanLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BooleanLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBooleanLiteralAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cFalseKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Assignment cIsTrueAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final Keyword cIsTrueTrueKeyword_1_1_0 = (Keyword)cIsTrueAssignment_1_1.eContents().get(0);
		
		//BooleanLiteral returns Expression:
		//	{BooleanLiteral} ("false" | isTrue?="true");
		public ParserRule getRule() { return rule; }

		//{BooleanLiteral} ("false" | isTrue?="true")
		public Group getGroup() { return cGroup; }

		//{BooleanLiteral}
		public Action getBooleanLiteralAction_0() { return cBooleanLiteralAction_0; }

		//"false" | isTrue?="true"
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//"false"
		public Keyword getFalseKeyword_1_0() { return cFalseKeyword_1_0; }

		//isTrue?="true"
		public Assignment getIsTrueAssignment_1_1() { return cIsTrueAssignment_1_1; }

		//"true"
		public Keyword getIsTrueTrueKeyword_1_1_0() { return cIsTrueTrueKeyword_1_1_0; }
	}

	public class NullLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NullLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cNullLiteralAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cNullKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//NullLiteral returns Expression:
		//	{NullLiteral} "null";
		public ParserRule getRule() { return rule; }

		//{NullLiteral} "null"
		public Group getGroup() { return cGroup; }

		//{NullLiteral}
		public Action getNullLiteralAction_0() { return cNullLiteralAction_0; }

		//"null"
		public Keyword getNullKeyword_1() { return cNullKeyword_1; }
	}

	public class IntLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IntLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIntLiteralAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cValueINTTerminalRuleCall_1_0_0 = (RuleCall)cValueAssignment_1_0.eContents().get(0);
		private final RuleCall cHEXTerminalRuleCall_1_1 = (RuleCall)cAlternatives_1.eContents().get(1);
		
		//IntLiteral returns Expression:
		//	{IntLiteral} (value=INT | HEX);
		public ParserRule getRule() { return rule; }

		//{IntLiteral} (value=INT | HEX)
		public Group getGroup() { return cGroup; }

		//{IntLiteral}
		public Action getIntLiteralAction_0() { return cIntLiteralAction_0; }

		//value=INT | HEX
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//value=INT
		public Assignment getValueAssignment_1_0() { return cValueAssignment_1_0; }

		//INT
		public RuleCall getValueINTTerminalRuleCall_1_0_0() { return cValueINTTerminalRuleCall_1_0_0; }

		//HEX
		public RuleCall getHEXTerminalRuleCall_1_1() { return cHEXTerminalRuleCall_1_1; }
	}

	public class FloatLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FloatLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFloatLiteralAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueFLOATTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//FloatLiteral returns Expression:
		//	{FloatLiteral} value=FLOAT;
		public ParserRule getRule() { return rule; }

		//{FloatLiteral} value=FLOAT
		public Group getGroup() { return cGroup; }

		//{FloatLiteral}
		public Action getFloatLiteralAction_0() { return cFloatLiteralAction_0; }

		//value=FLOAT
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//FLOAT
		public RuleCall getValueFLOATTerminalRuleCall_1_0() { return cValueFLOATTerminalRuleCall_1_0; }
	}

	public class StringLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StringLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStringLiteralAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//StringLiteral returns Expression:
		//	{StringLiteral} value=STRING;
		public ParserRule getRule() { return rule; }

		//{StringLiteral} value=STRING
		public Group getGroup() { return cGroup; }

		//{StringLiteral}
		public Action getStringLiteralAction_0() { return cStringLiteralAction_0; }

		//value=STRING
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_1_0() { return cValueSTRINGTerminalRuleCall_1_0; }
	}

	public class RegularExpressionLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RegularExpressionLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRegularExpressionLiteralAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueREGULAR_EXPRESSIONTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//RegularExpressionLiteral returns Expression:
		//	{RegularExpressionLiteral} value=REGULAR_EXPRESSION;
		public ParserRule getRule() { return rule; }

		//{RegularExpressionLiteral} value=REGULAR_EXPRESSION
		public Group getGroup() { return cGroup; }

		//{RegularExpressionLiteral}
		public Action getRegularExpressionLiteralAction_0() { return cRegularExpressionLiteralAction_0; }

		//value=REGULAR_EXPRESSION
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//REGULAR_EXPRESSION
		public RuleCall getValueREGULAR_EXPRESSIONTerminalRuleCall_1_0() { return cValueREGULAR_EXPRESSIONTerminalRuleCall_1_0; }
	}

	public class ArrayLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ArrayLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cArrayLiteralAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cElementsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cElementsExpressionParserRuleCall_2_0 = (RuleCall)cElementsAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cElementsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cElementsExpressionParserRuleCall_3_1_0 = (RuleCall)cElementsAssignment_3_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ArrayLiteral returns Expression:
		//	{ArrayLiteral} "[" elements+=Expression? ("," elements+=Expression)* "]";
		public ParserRule getRule() { return rule; }

		//{ArrayLiteral} "[" elements+=Expression? ("," elements+=Expression)* "]"
		public Group getGroup() { return cGroup; }

		//{ArrayLiteral}
		public Action getArrayLiteralAction_0() { return cArrayLiteralAction_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }

		//elements+=Expression?
		public Assignment getElementsAssignment_2() { return cElementsAssignment_2; }

		//Expression
		public RuleCall getElementsExpressionParserRuleCall_2_0() { return cElementsExpressionParserRuleCall_2_0; }

		//("," elements+=Expression)*
		public Group getGroup_3() { return cGroup_3; }

		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//elements+=Expression
		public Assignment getElementsAssignment_3_1() { return cElementsAssignment_3_1; }

		//Expression
		public RuleCall getElementsExpressionParserRuleCall_3_1_0() { return cElementsExpressionParserRuleCall_3_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_4() { return cRightSquareBracketKeyword_4; }
	}

	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cValidIDParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cValidIDParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QualifiedName:
		//	ValidID ("." ValidID)*;
		public ParserRule getRule() { return rule; }

		//ValidID ("." ValidID)*
		public Group getGroup() { return cGroup; }

		//ValidID
		public RuleCall getValidIDParserRuleCall_0() { return cValidIDParserRuleCall_0; }

		//("." ValidID)*
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//ValidID
		public RuleCall getValidIDParserRuleCall_1_1() { return cValidIDParserRuleCall_1_1; }
	}

	public class ValidIDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ValidID");
		private final RuleCall cIDTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//ValidID:
		//	ID;
		public ParserRule getRule() { return rule; }

		//ID
		public RuleCall getIDTerminalRuleCall() { return cIDTerminalRuleCall; }
	}
	
	
	private FileElements pFile;
	private TypeReferenceElements pTypeReference;
	private ExpressionElements pExpression;
	private AssignmentElements pAssignment;
	private OpSingleAssignElements pOpSingleAssign;
	private OpMultiAssignElements pOpMultiAssign;
	private OrExpressionElements pOrExpression;
	private OpOrElements pOpOr;
	private AndExpressionElements pAndExpression;
	private OpAndElements pOpAnd;
	private OtherOperatorExpressionElements pOtherOperatorExpression;
	private OpOtherElements pOpOther;
	private CompareExpressionElements pCompareExpression;
	private OpCompareElements pOpCompare;
	private BitwiseExpressionElements pBitwiseExpression;
	private OpBitwiseElements pOpBitwise;
	private BitshiftExpressionElements pBitshiftExpression;
	private OpBitshiftElements pOpBitshift;
	private AddExpressionElements pAddExpression;
	private OpAddElements pOpAdd;
	private SubtractExpressionElements pSubtractExpression;
	private OpSubtractElements pOpSubtract;
	private MultiplyExpressionElements pMultiplyExpression;
	private OpMultiplyElements pOpMultiply;
	private DivideExpressionElements pDivideExpression;
	private OpDivideElements pOpDivide;
	private ModuloExpressionElements pModuloExpression;
	private OpModuloElements pOpModulo;
	private UnaryOperationElements pUnaryOperation;
	private OpUnaryElements pOpUnary;
	private PreIncrementOperationElements pPreIncrementOperation;
	private PostIncrementOperationElements pPostIncrementOperation;
	private OpIncrementElements pOpIncrement;
	private MemberFeatureCallElements pMemberFeatureCall;
	private PrimaryExpressionElements pPrimaryExpression;
	private LiteralElements pLiteral;
	private BlockExpressionElements pBlockExpression;
	private ExpressionInsideBlockElements pExpressionInsideBlock;
	private VariableDeclarationsElements pVariableDeclarations;
	private VariableDeclarationElements pVariableDeclaration;
	private ParenthesizedExpressionElements pParenthesizedExpression;
	private FeatureCallElements pFeatureCall;
	private FeatureElements pFeature;
	private ConstructorCallElements pConstructorCall;
	private IdOrSuperElements pIdOrSuper;
	private BooleanLiteralElements pBooleanLiteral;
	private NullLiteralElements pNullLiteral;
	private IntLiteralElements pIntLiteral;
	private FloatLiteralElements pFloatLiteral;
	private StringLiteralElements pStringLiteral;
	private RegularExpressionLiteralElements pRegularExpressionLiteral;
	private ArrayLiteralElements pArrayLiteral;
	private QualifiedNameElements pQualifiedName;
	private ValidIDElements pValidID;
	private TerminalRule tID;
	private TerminalRule tFLOAT;
	private TerminalRule tHEX;
	private TerminalRule tINT;
	private TerminalRule tREGULAR_EXPRESSION;
	private TerminalRule tSTRING;
	private TerminalRule tML_COMMENT;
	private TerminalRule tSL_COMMENT;
	private TerminalRule tWS;
	private TerminalRule tANY_OTHER;
	
	private final GrammarProvider grammarProvider;

	@Inject
	public HaxeGrammarAccess(GrammarProvider grammarProvider) {
		this.grammarProvider = grammarProvider;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	
	//File:
	//	blockExpression+=BlockExpression*;
	public FileElements getFileAccess() {
		return (pFile != null) ? pFile : (pFile = new FileElements());
	}
	
	public ParserRule getFileRule() {
		return getFileAccess().getRule();
	}

	//TypeReference:
	//	type=QualifiedName ("<" arguments+=TypeReference ("," arguments+=TypeReference)* ">")?;
	public TypeReferenceElements getTypeReferenceAccess() {
		return (pTypeReference != null) ? pTypeReference : (pTypeReference = new TypeReferenceElements());
	}
	
	public ParserRule getTypeReferenceRule() {
		return getTypeReferenceAccess().getRule();
	}

	//Expression:
	//	Assignment;
	public ExpressionElements getExpressionAccess() {
		return (pExpression != null) ? pExpression : (pExpression = new ExpressionElements());
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}

	//Assignment returns Expression:
	//	{Assignment} feature=[Feature|IdOrSuper] OpSingleAssign value=Assignment | OrExpression (=> ({Operation.left=current}
	//	feature=OpMultiAssign) right=Assignment)?;
	public AssignmentElements getAssignmentAccess() {
		return (pAssignment != null) ? pAssignment : (pAssignment = new AssignmentElements());
	}
	
	public ParserRule getAssignmentRule() {
		return getAssignmentAccess().getRule();
	}

	//OpSingleAssign:
	//	"=";
	public OpSingleAssignElements getOpSingleAssignAccess() {
		return (pOpSingleAssign != null) ? pOpSingleAssign : (pOpSingleAssign = new OpSingleAssignElements());
	}
	
	public ParserRule getOpSingleAssignRule() {
		return getOpSingleAssignAccess().getRule();
	}

	//OpMultiAssign:
	//	"+=" | "-=" | "*=" | "/=" | "%=" | "&=" | "|=" | "^=" | "<<=" | ">>=" | ">>>=";
	public OpMultiAssignElements getOpMultiAssignAccess() {
		return (pOpMultiAssign != null) ? pOpMultiAssign : (pOpMultiAssign = new OpMultiAssignElements());
	}
	
	public ParserRule getOpMultiAssignRule() {
		return getOpMultiAssignAccess().getRule();
	}

	//OrExpression returns Expression:
	//	AndExpression (=> ({Operation.left=current} feature=OpOr) right=AndExpression)*;
	public OrExpressionElements getOrExpressionAccess() {
		return (pOrExpression != null) ? pOrExpression : (pOrExpression = new OrExpressionElements());
	}
	
	public ParserRule getOrExpressionRule() {
		return getOrExpressionAccess().getRule();
	}

	//OpOr:
	//	"||";
	public OpOrElements getOpOrAccess() {
		return (pOpOr != null) ? pOpOr : (pOpOr = new OpOrElements());
	}
	
	public ParserRule getOpOrRule() {
		return getOpOrAccess().getRule();
	}

	//AndExpression returns Expression:
	//	OtherOperatorExpression (=> ({Operation.left=current} feature=OpAnd) right=OtherOperatorExpression)*;
	public AndExpressionElements getAndExpressionAccess() {
		return (pAndExpression != null) ? pAndExpression : (pAndExpression = new AndExpressionElements());
	}
	
	public ParserRule getAndExpressionRule() {
		return getAndExpressionAccess().getRule();
	}

	//OpAnd:
	//	"&&";
	public OpAndElements getOpAndAccess() {
		return (pOpAnd != null) ? pOpAnd : (pOpAnd = new OpAndElements());
	}
	
	public ParserRule getOpAndRule() {
		return getOpAndAccess().getRule();
	}

	//OtherOperatorExpression returns Expression:
	//	CompareExpression (=> ({Operation.left=current} feature=OpOther) right=CompareExpression)*;
	public OtherOperatorExpressionElements getOtherOperatorExpressionAccess() {
		return (pOtherOperatorExpression != null) ? pOtherOperatorExpression : (pOtherOperatorExpression = new OtherOperatorExpressionElements());
	}
	
	public ParserRule getOtherOperatorExpressionRule() {
		return getOtherOperatorExpressionAccess().getRule();
	}

	//OpOther:
	//	"...";
	public OpOtherElements getOpOtherAccess() {
		return (pOpOther != null) ? pOpOther : (pOpOther = new OpOtherElements());
	}
	
	public ParserRule getOpOtherRule() {
		return getOpOtherAccess().getRule();
	}

	//CompareExpression returns Expression:
	//	BitwiseExpression (=> ({Operation.left=current} feature=OpCompare) right=BitwiseExpression)*;
	public CompareExpressionElements getCompareExpressionAccess() {
		return (pCompareExpression != null) ? pCompareExpression : (pCompareExpression = new CompareExpressionElements());
	}
	
	public ParserRule getCompareExpressionRule() {
		return getCompareExpressionAccess().getRule();
	}

	//OpCompare:
	//	"==" | "!=" | ">=" | "<=" | ">" | "<";
	public OpCompareElements getOpCompareAccess() {
		return (pOpCompare != null) ? pOpCompare : (pOpCompare = new OpCompareElements());
	}
	
	public ParserRule getOpCompareRule() {
		return getOpCompareAccess().getRule();
	}

	//BitwiseExpression returns Expression:
	//	BitshiftExpression (=> ({Operation.left=current} feature=OpBitwise) right=BitshiftExpression)*;
	public BitwiseExpressionElements getBitwiseExpressionAccess() {
		return (pBitwiseExpression != null) ? pBitwiseExpression : (pBitwiseExpression = new BitwiseExpressionElements());
	}
	
	public ParserRule getBitwiseExpressionRule() {
		return getBitwiseExpressionAccess().getRule();
	}

	//OpBitwise:
	//	"|" | "&" | "^";
	public OpBitwiseElements getOpBitwiseAccess() {
		return (pOpBitwise != null) ? pOpBitwise : (pOpBitwise = new OpBitwiseElements());
	}
	
	public ParserRule getOpBitwiseRule() {
		return getOpBitwiseAccess().getRule();
	}

	//BitshiftExpression returns Expression:
	//	AddExpression (=> ({Operation.left=current} feature=OpBitshift) right=AddExpression)*;
	public BitshiftExpressionElements getBitshiftExpressionAccess() {
		return (pBitshiftExpression != null) ? pBitshiftExpression : (pBitshiftExpression = new BitshiftExpressionElements());
	}
	
	public ParserRule getBitshiftExpressionRule() {
		return getBitshiftExpressionAccess().getRule();
	}

	//OpBitshift:
	//	"<<" | ">>" | ">>>";
	public OpBitshiftElements getOpBitshiftAccess() {
		return (pOpBitshift != null) ? pOpBitshift : (pOpBitshift = new OpBitshiftElements());
	}
	
	public ParserRule getOpBitshiftRule() {
		return getOpBitshiftAccess().getRule();
	}

	//AddExpression returns Expression:
	//	SubtractExpression (=> ({Operation.left=current} feature=OpAdd) right=SubtractExpression)*;
	public AddExpressionElements getAddExpressionAccess() {
		return (pAddExpression != null) ? pAddExpression : (pAddExpression = new AddExpressionElements());
	}
	
	public ParserRule getAddExpressionRule() {
		return getAddExpressionAccess().getRule();
	}

	//OpAdd:
	//	"+";
	public OpAddElements getOpAddAccess() {
		return (pOpAdd != null) ? pOpAdd : (pOpAdd = new OpAddElements());
	}
	
	public ParserRule getOpAddRule() {
		return getOpAddAccess().getRule();
	}

	//SubtractExpression returns Expression:
	//	MultiplyExpression (=> ({Operation.left=current} feature=OpSubtract) right=MultiplyExpression)*;
	public SubtractExpressionElements getSubtractExpressionAccess() {
		return (pSubtractExpression != null) ? pSubtractExpression : (pSubtractExpression = new SubtractExpressionElements());
	}
	
	public ParserRule getSubtractExpressionRule() {
		return getSubtractExpressionAccess().getRule();
	}

	//OpSubtract:
	//	"-";
	public OpSubtractElements getOpSubtractAccess() {
		return (pOpSubtract != null) ? pOpSubtract : (pOpSubtract = new OpSubtractElements());
	}
	
	public ParserRule getOpSubtractRule() {
		return getOpSubtractAccess().getRule();
	}

	//MultiplyExpression returns Expression:
	//	DivideExpression (=> ({Operation.left=current} feature=OpMultiply) right=DivideExpression)*;
	public MultiplyExpressionElements getMultiplyExpressionAccess() {
		return (pMultiplyExpression != null) ? pMultiplyExpression : (pMultiplyExpression = new MultiplyExpressionElements());
	}
	
	public ParserRule getMultiplyExpressionRule() {
		return getMultiplyExpressionAccess().getRule();
	}

	//OpMultiply:
	//	"*";
	public OpMultiplyElements getOpMultiplyAccess() {
		return (pOpMultiply != null) ? pOpMultiply : (pOpMultiply = new OpMultiplyElements());
	}
	
	public ParserRule getOpMultiplyRule() {
		return getOpMultiplyAccess().getRule();
	}

	//DivideExpression returns Expression:
	//	ModuloExpression (=> ({Operation.left=current} feature=OpDivide) right=ModuloExpression)*;
	public DivideExpressionElements getDivideExpressionAccess() {
		return (pDivideExpression != null) ? pDivideExpression : (pDivideExpression = new DivideExpressionElements());
	}
	
	public ParserRule getDivideExpressionRule() {
		return getDivideExpressionAccess().getRule();
	}

	//OpDivide:
	//	"/";
	public OpDivideElements getOpDivideAccess() {
		return (pOpDivide != null) ? pOpDivide : (pOpDivide = new OpDivideElements());
	}
	
	public ParserRule getOpDivideRule() {
		return getOpDivideAccess().getRule();
	}

	//ModuloExpression returns Expression:
	//	UnaryOperation (=> ({Operation.left=current} feature=OpModulo) right=UnaryOperation)*;
	public ModuloExpressionElements getModuloExpressionAccess() {
		return (pModuloExpression != null) ? pModuloExpression : (pModuloExpression = new ModuloExpressionElements());
	}
	
	public ParserRule getModuloExpressionRule() {
		return getModuloExpressionAccess().getRule();
	}

	//OpModulo:
	//	"%";
	public OpModuloElements getOpModuloAccess() {
		return (pOpModulo != null) ? pOpModulo : (pOpModulo = new OpModuloElements());
	}
	
	public ParserRule getOpModuloRule() {
		return getOpModuloAccess().getRule();
	}

	//UnaryOperation returns Expression:
	//	{UnaryOperation} feature=OpUnary operand=PreIncrementOperation | PreIncrementOperation;
	public UnaryOperationElements getUnaryOperationAccess() {
		return (pUnaryOperation != null) ? pUnaryOperation : (pUnaryOperation = new UnaryOperationElements());
	}
	
	public ParserRule getUnaryOperationRule() {
		return getUnaryOperationAccess().getRule();
	}

	//OpUnary:
	//	"!" | "-" | "~";
	public OpUnaryElements getOpUnaryAccess() {
		return (pOpUnary != null) ? pOpUnary : (pOpUnary = new OpUnaryElements());
	}
	
	public ParserRule getOpUnaryRule() {
		return getOpUnaryAccess().getRule();
	}

	//PreIncrementOperation returns Expression:
	//	=> ({PreIncrementOperation} feature=OpIncrement operand=PostIncrementOperation) | PostIncrementOperation;
	public PreIncrementOperationElements getPreIncrementOperationAccess() {
		return (pPreIncrementOperation != null) ? pPreIncrementOperation : (pPreIncrementOperation = new PreIncrementOperationElements());
	}
	
	public ParserRule getPreIncrementOperationRule() {
		return getPreIncrementOperationAccess().getRule();
	}

	//PostIncrementOperation returns Expression:
	//	=> ({PostIncrementOperation} operand=MemberFeatureCall feature=OpIncrement) | MemberFeatureCall;
	public PostIncrementOperationElements getPostIncrementOperationAccess() {
		return (pPostIncrementOperation != null) ? pPostIncrementOperation : (pPostIncrementOperation = new PostIncrementOperationElements());
	}
	
	public ParserRule getPostIncrementOperationRule() {
		return getPostIncrementOperationAccess().getRule();
	}

	//OpIncrement:
	//	"++" | "--";
	public OpIncrementElements getOpIncrementAccess() {
		return (pOpIncrement != null) ? pOpIncrement : (pOpIncrement = new OpIncrementElements());
	}
	
	public ParserRule getOpIncrementRule() {
		return getOpIncrementAccess().getRule();
	}

	//MemberFeatureCall returns Expression:
	//	PrimaryExpression (=> ({Assignment.assignable=current} "." feature=[Feature|ValidID] OpSingleAssign) value=Assignment
	//	| => ({MemberFeatureCall.target=current} ".") feature=ValidID (=> explicitOperationCall?="(" //memberCallArguments+=XShortClosure |
	//	(arguments+=Expression ("," arguments+=Expression)*)? ")")?)*;
	public MemberFeatureCallElements getMemberFeatureCallAccess() {
		return (pMemberFeatureCall != null) ? pMemberFeatureCall : (pMemberFeatureCall = new MemberFeatureCallElements());
	}
	
	public ParserRule getMemberFeatureCallRule() {
		return getMemberFeatureCallAccess().getRule();
	}

	//PrimaryExpression returns Expression:
	//	Literal | BlockExpression | ParenthesizedExpression | FeatureCall | ConstructorCall;
	public PrimaryExpressionElements getPrimaryExpressionAccess() {
		return (pPrimaryExpression != null) ? pPrimaryExpression : (pPrimaryExpression = new PrimaryExpressionElements());
	}
	
	public ParserRule getPrimaryExpressionRule() {
		return getPrimaryExpressionAccess().getRule();
	}

	//Literal returns Expression:
	//	BooleanLiteral | IntLiteral | NullLiteral | StringLiteral | FloatLiteral | RegularExpressionLiteral | ArrayLiteral;
	public LiteralElements getLiteralAccess() {
		return (pLiteral != null) ? pLiteral : (pLiteral = new LiteralElements());
	}
	
	public ParserRule getLiteralRule() {
		return getLiteralAccess().getRule();
	}

	//BlockExpression returns Expression:
	//	{BlockExpression} "{" (expressions+=ExpressionInsideBlock ";"?)* "}";
	public BlockExpressionElements getBlockExpressionAccess() {
		return (pBlockExpression != null) ? pBlockExpression : (pBlockExpression = new BlockExpressionElements());
	}
	
	public ParserRule getBlockExpressionRule() {
		return getBlockExpressionAccess().getRule();
	}

	//ExpressionInsideBlock returns Expression:
	//	VariableDeclarations | Expression;
	public ExpressionInsideBlockElements getExpressionInsideBlockAccess() {
		return (pExpressionInsideBlock != null) ? pExpressionInsideBlock : (pExpressionInsideBlock = new ExpressionInsideBlockElements());
	}
	
	public ParserRule getExpressionInsideBlockRule() {
		return getExpressionInsideBlockAccess().getRule();
	}

	//VariableDeclarations returns Expression:
	//	{VariableDeclarations} "var" declarations+=VariableDeclaration ("," declarations+=VariableDeclaration)*;
	public VariableDeclarationsElements getVariableDeclarationsAccess() {
		return (pVariableDeclarations != null) ? pVariableDeclarations : (pVariableDeclarations = new VariableDeclarationsElements());
	}
	
	public ParserRule getVariableDeclarationsRule() {
		return getVariableDeclarationsAccess().getRule();
	}

	//VariableDeclaration:
	//	{VariableDeclaration} name=ValidID (":" type=TypeReference)? ("=" expression=Expression)?;
	public VariableDeclarationElements getVariableDeclarationAccess() {
		return (pVariableDeclaration != null) ? pVariableDeclaration : (pVariableDeclaration = new VariableDeclarationElements());
	}
	
	public ParserRule getVariableDeclarationRule() {
		return getVariableDeclarationAccess().getRule();
	}

	//ParenthesizedExpression returns Expression:
	//	"(" Expression ")";
	public ParenthesizedExpressionElements getParenthesizedExpressionAccess() {
		return (pParenthesizedExpression != null) ? pParenthesizedExpression : (pParenthesizedExpression = new ParenthesizedExpressionElements());
	}
	
	public ParserRule getParenthesizedExpressionRule() {
		return getParenthesizedExpressionAccess().getRule();
	}

	//FeatureCall returns Expression:
	//	{FeatureCall} feature=[Feature|IdOrSuper] (=> explicitOperationCall?="(" //featureCallArguments+=XShortClosure |
	//	(arguments+=Expression ("," arguments+=Expression)*)? ")")?;
	public FeatureCallElements getFeatureCallAccess() {
		return (pFeatureCall != null) ? pFeatureCall : (pFeatureCall = new FeatureCallElements());
	}
	
	public ParserRule getFeatureCallRule() {
		return getFeatureCallAccess().getRule();
	}

	//Feature:
	//	VariableDeclaration;
	public FeatureElements getFeatureAccess() {
		return (pFeature != null) ? pFeature : (pFeature = new FeatureElements());
	}
	
	public ParserRule getFeatureRule() {
		return getFeatureAccess().getRule();
	}

	//ConstructorCall returns XExpression:
	//	{ConstructorCall} "new" constructor=QualifiedName "(" //arguments+=XShortClosure |
	//	(arguments+=Expression ("," arguments+=Expression)*)? ")";
	public ConstructorCallElements getConstructorCallAccess() {
		return (pConstructorCall != null) ? pConstructorCall : (pConstructorCall = new ConstructorCallElements());
	}
	
	public ParserRule getConstructorCallRule() {
		return getConstructorCallAccess().getRule();
	}

	//IdOrSuper:
	//	ValidID | "super";
	public IdOrSuperElements getIdOrSuperAccess() {
		return (pIdOrSuper != null) ? pIdOrSuper : (pIdOrSuper = new IdOrSuperElements());
	}
	
	public ParserRule getIdOrSuperRule() {
		return getIdOrSuperAccess().getRule();
	}

	//BooleanLiteral returns Expression:
	//	{BooleanLiteral} ("false" | isTrue?="true");
	public BooleanLiteralElements getBooleanLiteralAccess() {
		return (pBooleanLiteral != null) ? pBooleanLiteral : (pBooleanLiteral = new BooleanLiteralElements());
	}
	
	public ParserRule getBooleanLiteralRule() {
		return getBooleanLiteralAccess().getRule();
	}

	//NullLiteral returns Expression:
	//	{NullLiteral} "null";
	public NullLiteralElements getNullLiteralAccess() {
		return (pNullLiteral != null) ? pNullLiteral : (pNullLiteral = new NullLiteralElements());
	}
	
	public ParserRule getNullLiteralRule() {
		return getNullLiteralAccess().getRule();
	}

	//IntLiteral returns Expression:
	//	{IntLiteral} (value=INT | HEX);
	public IntLiteralElements getIntLiteralAccess() {
		return (pIntLiteral != null) ? pIntLiteral : (pIntLiteral = new IntLiteralElements());
	}
	
	public ParserRule getIntLiteralRule() {
		return getIntLiteralAccess().getRule();
	}

	//FloatLiteral returns Expression:
	//	{FloatLiteral} value=FLOAT;
	public FloatLiteralElements getFloatLiteralAccess() {
		return (pFloatLiteral != null) ? pFloatLiteral : (pFloatLiteral = new FloatLiteralElements());
	}
	
	public ParserRule getFloatLiteralRule() {
		return getFloatLiteralAccess().getRule();
	}

	//StringLiteral returns Expression:
	//	{StringLiteral} value=STRING;
	public StringLiteralElements getStringLiteralAccess() {
		return (pStringLiteral != null) ? pStringLiteral : (pStringLiteral = new StringLiteralElements());
	}
	
	public ParserRule getStringLiteralRule() {
		return getStringLiteralAccess().getRule();
	}

	//RegularExpressionLiteral returns Expression:
	//	{RegularExpressionLiteral} value=REGULAR_EXPRESSION;
	public RegularExpressionLiteralElements getRegularExpressionLiteralAccess() {
		return (pRegularExpressionLiteral != null) ? pRegularExpressionLiteral : (pRegularExpressionLiteral = new RegularExpressionLiteralElements());
	}
	
	public ParserRule getRegularExpressionLiteralRule() {
		return getRegularExpressionLiteralAccess().getRule();
	}

	//ArrayLiteral returns Expression:
	//	{ArrayLiteral} "[" elements+=Expression? ("," elements+=Expression)* "]";
	public ArrayLiteralElements getArrayLiteralAccess() {
		return (pArrayLiteral != null) ? pArrayLiteral : (pArrayLiteral = new ArrayLiteralElements());
	}
	
	public ParserRule getArrayLiteralRule() {
		return getArrayLiteralAccess().getRule();
	}

	//QualifiedName:
	//	ValidID ("." ValidID)*;
	public QualifiedNameElements getQualifiedNameAccess() {
		return (pQualifiedName != null) ? pQualifiedName : (pQualifiedName = new QualifiedNameElements());
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	//ValidID:
	//	ID;
	public ValidIDElements getValidIDAccess() {
		return (pValidID != null) ? pValidID : (pValidID = new ValidIDElements());
	}
	
	public ParserRule getValidIDRule() {
		return getValidIDAccess().getRule();
	}

	//terminal ID:
	//	("a".."z" | "A".."Z" | "$" | "_") ("a".."z" | "A".."Z" | "$" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return (tID != null) ? tID : (tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ID"));
	} 

	//terminal FLOAT returns ecore::EDouble:
	//	INT "e" INT | INT? ("." INT);
	public TerminalRule getFLOATRule() {
		return (tFLOAT != null) ? tFLOAT : (tFLOAT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "FLOAT"));
	} 

	//terminal HEX:
	//	"0x" ("0".."9" | "A".."F")+;
	public TerminalRule getHEXRule() {
		return (tHEX != null) ? tHEX : (tHEX = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "HEX"));
	} 

	//terminal INT returns ecore::EInt:
	//	"-"? "0".."9"+;
	public TerminalRule getINTRule() {
		return (tINT != null) ? tINT : (tINT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "INT"));
	} 

	//terminal REGULAR_EXPRESSION:
	//	"~/" ("\\/" | !"/")+ "/" ("i" | "g" | "m" | "s" | "u")*;
	public TerminalRule getREGULAR_EXPRESSIONRule() {
		return (tREGULAR_EXPRESSION != null) ? tREGULAR_EXPRESSION : (tREGULAR_EXPRESSION = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "REGULAR_EXPRESSION"));
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return (tSTRING != null) ? tSTRING : (tSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "STRING"));
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return (tML_COMMENT != null) ? tML_COMMENT : (tML_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ML_COMMENT"));
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return (tSL_COMMENT != null) ? tSL_COMMENT : (tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SL_COMMENT"));
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return (tWS != null) ? tWS : (tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "WS"));
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return (tANY_OTHER != null) ? tANY_OTHER : (tANY_OTHER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ANY_OTHER"));
	} 
}
