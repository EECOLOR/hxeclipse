grammar ee.xtext.haxe.Haxe hidden(WS, ML_COMMENT, SL_COMMENT)

import "http://www.eclipse.org/emf/2002/Ecore" as ecore

generate haxe "http://www.xtext.ee/haxe/Haxe"

//TODO, we might need to implement AbstractFeatureCall (see xbase.ecore)

Package:
	('package' name=QualifiedName ';')? 
	(classes+=Class)*
;

Type returns Type:
	Class
;

Class returns Class:
	'class' name=QualifiedName
	'{'
		(members+=ClassMember)+
	'}'
;

ClassMember:
	FunctionMemberDeclaration | VariableMemberDeclaration
;

TypeReference returns TypeReference:
	type=[Type|QualifiedName] (=>'<' arguments+=TypeReference (',' arguments+=TypeReference)* '>')?;

QualifiedName:
  ValidID ('.' ValidID)*;
  
ValidID:
	ID;

FeatureID:
	ValidID | 'super' | 'this';

Feature returns Feature:
	VariableDeclaration | FormalParameter | FunctionMemberDeclaration | VariableMemberDeclaration;

FormalParameter returns FormalParameter:
	name=ValidID (':' type=TypeReference)?;

Expression returns Expression :
	Assignment ';'?;

Assignment returns Expression :
	{Assignment} feature=[Feature|FeatureID] OpSingleAssign value=Assignment |	
	OrExpression (=>({Operation.left=current} feature=OpMultiAssign) right=Assignment)?;

OpSingleAssign:
	'='
;

OpMultiAssign:
	'+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '|=' | '^=' | '<<=' | '>>=' | ">>>=";

OrExpression returns Expression:
	AndExpression (=>({Operation.left=current} feature=OpOr) right=AndExpression)*;

OpOr:
	'||';

AndExpression returns Expression:
	OtherOperatorExpression (=>({Operation.left=current} feature=OpAnd) right=OtherOperatorExpression)*;

OpAnd:
	'&&';

OtherOperatorExpression returns Expression:
	CompareExpression (=>({Operation.left=current} feature=OpOther) right=CompareExpression)*;

OpOther:
	'...';

CompareExpression returns Expression:
	BitwiseExpression (=>({Operation.left=current} feature=OpCompare) right=BitwiseExpression)*;

OpCompare:
	'==' | '!=' | '>=' | '<=' | '>' | '<';

BitwiseExpression returns Expression:
	BitshiftExpression (=>({Operation.left=current} feature=OpBitwise) right=BitshiftExpression)*;

OpBitwise:
	'|' | '&' | '^';

BitshiftExpression returns Expression:
	AddExpression (=>({Operation.left=current} feature=OpBitshift) right=AddExpression)*;

OpBitshift:
	'<<' | '>>' | '>>>';

AddExpression returns Expression:
	SubtractExpression (=>({Operation.left=current} feature=OpAdd) right=SubtractExpression)*;

OpAdd:
	'+';

SubtractExpression returns Expression:
	MultiplyExpression (=>({Operation.left=current} feature=OpSubtract) right=MultiplyExpression)*;

OpSubtract:
	'-';

MultiplyExpression returns Expression:
	DivideExpression (=>({Operation.left=current} feature=OpMultiply) right=DivideExpression)*;

OpMultiply:
	'*';

DivideExpression returns Expression:
	ModuloExpression (=>({Operation.left=current} feature=OpDivide) right=ModuloExpression)*;

OpDivide:
	'/';

ModuloExpression returns Expression:
	UnaryOperation (=>({Operation.left=current} feature=OpModulo) right=UnaryOperation)*;

OpModulo:
	'%';

UnaryOperation returns Expression:
	{UnaryOperation} feature=OpUnary operand=PreIncrementOperation
	| PreIncrementOperation;
		
OpUnary:
	"!" | "-" | "~";
	
PreIncrementOperation returns Expression:
	=>({PreIncrementOperation} feature=OpIncrement operand=PostIncrementOperation) |
	PostIncrementOperation;
	
PostIncrementOperation returns Expression:
	=>({PostIncrementOperation} operand=MemberFeatureCall feature=OpIncrement) |
	MemberFeatureCall;
	
OpIncrement:
	"++" | "--";


MemberFeatureCall returns Expression:
	PrimaryExpression 
	(=>({Assignment.assignable=current} '.' feature=[Feature|FeatureID] OpSingleAssign) value=Assignment
	|=>({ArrayAssignment.assigname=current} '[' feature=Expression ']' OpSingleAssign) value=Assignment
	|=>({MemberFeatureCall.target=current} ".") 
		feature=[Feature|FeatureID] (
			=>explicitOperationCall?='(' 
				(
				    //memberCallArguments+=XShortClosure |
					arguments+=Expression (',' arguments+=Expression)*
				)? 
			')'
		)?
	|=>({ArrayAccess.target=current})
		'[' feature=Expression ']' (
			=>explicitOperationCall?='(' 
				(
				    //memberCallArguments+=XShortClosure |
					arguments+=Expression (',' arguments+=Expression)*
				)? 
			')'
		)?
	)*
;

PrimaryExpression returns Expression:
	BlockExpression |
	ParenthesizedExpression |
	IfExpression |
	WhileExpression |
	DoWhileExpression |
	ForLoopExpression |
	ReturnExpression |
	BreakExpression |
	ContinueExpression |
	ThrowExpression |
	TryCatchExpression |
	SwitchExpression |
	FunctionExpression |
	FeatureCall |
	ConstructorCall |
	Literal
;

BlockExpression returns Expression: 
	{BlockExpression}
	'{'// '[' temp=STRING ']' 
		(expressions+=ExpressionInsideBlock ';'?)*
	'}';

ExpressionInsideBlock returns Expression:
	VariableDeclarations |
	Expression;

VariableDeclarations returns Expression:
	{VariableDeclarations} 'var' declarations+=VariableDeclaration (',' declarations+=VariableDeclaration)*;

VariableDeclaration returns VariableDeclaration:
	{VariableDeclaration} name=ValidID (':' type=TypeReference)? ('=' expression=Expression)?;

VariableMemberDeclaration returns VariableMemberDeclaration:
	{VariableMemberDeclaration} 'var' name=ValidID ':' type=TypeReference ';'?;

FunctionMemberDeclaration returns FunctionDeclaration:
	{FunctionDeclaration} 'function' name=ValidID '(' (parameters+=FormalParameter (',' parameters+=FormalParameter)*)? ')' (':' returnType=[Type|QualifiedName])?
		body=BlockExpression;

ParenthesizedExpression returns Expression:
	'(' Expression ')';

IfExpression returns Expression:
	{IfExpression}
	'if' '(' if=Expression ')'
	then=Expression
	(=>'else' else=Expression)?;

WhileExpression returns Expression:
	{WhileExpression}
	'while' '(' predicate=Expression ')'
		body=Expression;

DoWhileExpression returns Expression:
	{DoWhileExpression}
   'do'
       body=Expression
   'while' '(' predicate=Expression ')';

ForLoopExpression returns Expression:
	{ForLoopExpression}
	=>('for' '(' declaredParam=FormalParameter 'in' forExpression=Expression ')')
		body=Expression;

ReturnExpression returns Expression :
	{ReturnExpression} 'return' (=>expression=Expression)?;

BreakExpression returns Expression:
	{BreakExpression} 'break';

ContinueExpression returns Expression:
	{BreakExpression} 'continue';

ThrowExpression returns Expression :
	{ThrowExpression} 'throw' expression=Expression;
	
TryCatchExpression returns Expression:
	{TryCatchExpression}
	'try' 
		expression=Expression
	(
		(catchClauses+=CatchClause)+
	);
	
CatchClause:
	=>'catch' '(' declaredParam=FormalParameter ')' expression=Expression;

SwitchExpression returns Expression:
	{SwitchExpression}
	'switch' switch=Expression '{'
		(cases+=CasePart)+
		('default' ':' default=Expression )?
	'}';

CasePart:
	=>'case' cases+=Expression ((',' cases+=Expression)+)? ':' then=Expression;

FunctionExpression returns Expression:
	{FunctionExpression} 'function' '(' (parameters+=FormalParameter (',' parameters+=FormalParameter)*)? ')' (':' returnType=[Type|QualifiedName])?
		body=BlockExpression;

ThisExpression returns Expression:
	{ThisExpression} 'this';

SuperExpression returns Expression:
	{SuperExpression} 'super';

FeatureCall returns Expression:
	{FeatureCall}
	feature=[Feature|FeatureID]
	(=>explicitOperationCall?='(' 
		(arguments+=Expression)? (',' arguments+=Expression)*
	')')?; 

ConstructorCall returns Expression:
	{ConstructorCall}
	'new' constructor=[Type|QualifiedName] 
	'(' 
		(arguments+=Expression)? (',' arguments+=Expression)*
	')';

Literal returns Expression:
	BooleanLiteral |
	NullLiteral |
	StringLiteral |
	FloatLiteral |
	IntLiteral |
	RegularExpressionLiteral |
	ArrayLiteral |
	ObjectLiteral
;

BooleanLiteral returns Expression:
	{BooleanLiteral} ('false' | isTrue?='true');

NullLiteral returns Expression:
	{NullLiteral} 'null';

IntLiteral returns Expression:
	{IntLiteral} (value= INT | HEX);

FloatLiteral returns Expression:
	{FloatLiteral} value=Float;

StringLiteral returns Expression:
	{StringLiteral} value=STRING;

RegularExpressionLiteral returns Expression:
	{RegularExpressionLiteral} value=REGULAR_EXPRESSION;

ArrayLiteral returns Expression:
	{ArrayLiteral} '[' (elements+=Expression)? (',' elements+=Expression)* ']';

ObjectLiteral returns Expression:
	{ObjectLiteral} '{' elements+=ObjectElement (',' elements+=ObjectElement)* '}';

ObjectElement:
	key=ValidID ':' value=Expression;


Float returns ecore::EDouble hidden():
	EFLOAT | INT '.' INT | '.' INT
;


terminal EFLOAT:
	INT 'e' '-'? INT;

terminal ID:
	('a'..'z'|'A'..'Z'|'$'|'_') ('a'..'z'|'A'..'Z'|'$'|'_'|'0'..'9')*;

terminal HEX:
	'0x' ('0'..'9'|'A'..'F')+;

terminal INT returns ecore::EInt: 
	('0'..'9')+;

terminal REGULAR_EXPRESSION:
	'~/' ('\\/' | !'/')+ '/' ('i' | 'g' | 'm' | 's' | 'u')*;
	
terminal STRING: 
	'"' ( '\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\') | !('\\'|'"') )* '"' |
	"'" ( '\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\') | !('\\'|"'") )* "'"
;
 
terminal ML_COMMENT:
	'/*' -> '*/';
	
terminal SL_COMMENT:
	'//' !('\n'|'\r')* ('\r'? '\n')?;

terminal WS:
	(' '|'\t'|'\r'|'\n')+;

terminal ANY_OTHER: 
	.;