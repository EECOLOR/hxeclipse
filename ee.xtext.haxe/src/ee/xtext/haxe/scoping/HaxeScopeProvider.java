/*
 * generated by Xtext
 */
package ee.xtext.haxe.scoping;

import java.util.List;

import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.xtext.scoping.IScope;
import org.eclipse.xtext.scoping.Scopes;
import org.eclipse.xtext.scoping.impl.AbstractDeclarativeScopeProvider;

import com.google.common.collect.Lists;

import ee.xtext.haxe.haxe.BlockExpression;
import ee.xtext.haxe.haxe.Expression;
import ee.xtext.haxe.haxe.FeatureCall;
import ee.xtext.haxe.haxe.VariableDeclaration;
import ee.xtext.haxe.haxe.VariableDeclarations;

/**
 * This class contains custom scoping description.
 * 
 * see : http://www.eclipse.org/Xtext/documentation/latest/xtext.html#scoping
 * on how and when to use it 
 *
 */
public class HaxeScopeProvider extends AbstractDeclarativeScopeProvider {
	
	public IScope getBlockExpressionScope(int index, BlockExpression context)
	{
		IScope parentScope = getParentScopes(context);
		
		List<VariableDeclaration> elements = getVariableDeclarations(index, context.getExpressions());
		
		return Scopes.scopeFor(elements, parentScope);
	}
	
	public IScope scope_FeatureCall_feature(FeatureCall context, EReference reference)
	{
		BlockExpression block = (BlockExpression) context.eContainer();
		
		IScope parentScope = getParentScopes(block);
		
		EList<Expression> expressions = block.getExpressions();
		int index = expressions.indexOf(context);
		
		List<VariableDeclaration> elements = getVariableDeclarations(index, expressions);
		
		return Scopes.scopeFor(elements, parentScope);
	}

	private IScope getParentScopes(BlockExpression block) {
		
		EObject container = block.eContainer();
		
		if (container instanceof BlockExpression)
		{
			BlockExpression parentBlock = (BlockExpression) container;
			IScope parentScope = getParentScopes(parentBlock);
			
			EList<Expression> expressions = parentBlock.getExpressions();
			int index = expressions.indexOf(block);

			List<VariableDeclaration> elements = getVariableDeclarations(index, expressions);
			
			return Scopes.scopeFor(elements, parentScope);
		} else
		{
			return IScope.NULLSCOPE;
		}
	}
	
	private List<VariableDeclaration> getVariableDeclarations(int currentIndex, EList<Expression> expressions) {
		
		List<VariableDeclaration> elements = Lists.newArrayList();
		
		for (int i = 0; i < currentIndex; i++)
		{
			Expression expression = expressions.get(i);
			
			if (expression instanceof VariableDeclarations)
			{
				elements.addAll(((VariableDeclarations) expression).getDeclarations());
			}
		}
		return elements;
	}
}
